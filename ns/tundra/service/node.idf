<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.service</value>
  <value name="encodeutf8">true</value>
  <value name="shared">Ly8gc2V0cyB0aGUgcmVzcG9uc2UgaGVhZGVycyBhbmQgYm9keSBmb3IgdGhlIGN1cnJlbnQgc2Vy
dmljZSBpbnZvY2F0aW9uCnB1YmxpYyBzdGF0aWMgdm9pZCByZXNwb25kKGludCBjb2RlLCBTdHJp
bmcgbWVzc2FnZSwgSURhdGEgaGVhZGVycywgT2JqZWN0IGNvbnRlbnQsIFN0cmluZyBjb250ZW50
VHlwZSwgU3RyaW5nIGVuY29kaW5nKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgdHJ5IHsK
ICAgIGNvbS53bS5uZXQuSHR0cEhlYWRlciByZXNwb25zZSA9IGNvbS53bS5hcHAuYjJiLnNlcnZl
ci5TZXJ2aWNlLmdldEh0dHBSZXNwb25zZUhlYWRlcigpOwoKICAgIGlmIChyZXNwb25zZSA9PSBu
dWxsKSB7IAogICAgICAvLyBub3QgaW52b2tlZCB2aWEgSFRUUCwgc28gdGhyb3cgYW4gZXhjZXB0
aW9uIGluc3RlYWQgZm9yIEhUVFAgc3RhdHVzZXMgPj0gNDAwCiAgICAgIGlmIChjb2RlID49IDQw
MCkgdHVuZHJhLmV4Y2VwdGlvbi5yYWlzZSh0dW5kcmEuc3RyaW5nLm5vcm1hbGl6ZShjb250ZW50
LCBlbmNvZGluZykpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkgbWVz
c2FnZSA9IHR1bmRyYS5zdXBwb3J0Lmh0dHAuc3RhdHVzKGNvZGUpOwogICAgICByZXNwb25zZS5z
ZXRSZXNwb25zZShjb2RlLCBtZXNzYWdlKTsKCiAgICAgIGlmIChjb250ZW50VHlwZSA9PSBudWxs
KSBjb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0iOwogICAgICBpZiAoZW5j
b2RpbmcgPT0gbnVsbCkgZW5jb2RpbmcgPSB0dW5kcmEuc3VwcG9ydC5jb25zdGFudC5ERUZBVUxU
X0NIQVJBQ1RFUl9FTkNPRElORzsKCiAgICAgIGphdmF4LmFjdGl2YXRpb24uTWltZVR5cGUgbWlt
ZVR5cGUgPSBuZXcgamF2YXguYWN0aXZhdGlvbi5NaW1lVHlwZShjb250ZW50VHlwZSk7CiAgICAg
IG1pbWVUeXBlLnNldFBhcmFtZXRlcigiY2hhcnNldCIsIGVuY29kaW5nKTsKCiAgICAgIHJlc3Bv
bnNlLmNsZWFyRmllbGQoIkNvbnRlbnQtVHlwZSIpOwogICAgICByZXNwb25zZS5hZGRGaWVsZCgi
Q29udGVudC1UeXBlIiwgbWltZVR5cGUudG9TdHJpbmcoKSk7CgogICAgICBpZiAoaGVhZGVycyAh
PSBudWxsKSB7CiAgICAgICAgSURhdGFDdXJzb3IgaGMgPSBoZWFkZXJzLmdldEN1cnNvcigpOwog
ICAgICAgIAogICAgICAgIHdoaWxlKGhjLm5leHQoKSkgewogICAgICAgICAgU3RyaW5nIGtleSA9
IGhjLmdldEtleSgpOwogICAgICAgICAgT2JqZWN0IHZhbHVlID0gaGMuZ2V0VmFsdWUoKTsKCiAg
ICAgICAgICBpZiAoa2V5ICE9IG51bGwgJiYgdmFsdWUgIT0gbnVsbCkgewogICAgICAgICAgICBy
ZXNwb25zZS5jbGVhckZpZWxkKGtleSk7CiAgICAgICAgICAgIHJlc3BvbnNlLmFkZEZpZWxkKGtl
eSwgdmFsdWUudG9TdHJpbmcoKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGhjLmRl
c3Ryb3koKTsKICAgICAgfQogICAgfQoKICAgIGlmIChjb250ZW50ID09IG51bGwpIGNvbnRlbnQg
PSAiIjsKICAgIGJ5dGVbXSBib2R5ID0gdHVuZHJhLmJ5dGVzLm5vcm1hbGl6ZShjb250ZW50LCBl
bmNvZGluZyk7CiAgICBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuU2VydmljZS5zZXRSZXNwb25zZShi
b2R5KTsKICB9IGNhdGNoIChqYXZhLmlvLklPRXhjZXB0aW9uIGV4KSB7CiAgICB0dW5kcmEuZXhj
ZXB0aW9uLnJhaXNlKGV4KTsKICB9IGNhdGNoIChqYXZheC5hY3RpdmF0aW9uLk1pbWVUeXBlUGFy
c2VFeGNlcHRpb24gZXgpIHsKICAgIHR1bmRyYS5leGNlcHRpb24ucmFpc2UoZXgpOwogIH0KfQoK
Ly8gcmV0dXJucyB0cnVlIGlmIHRoZSBjYWxsaW5nIHNlcnZpY2UgaXMgdGhlIHRvcC1sZXZlbCBp
bml0aWF0aW5nIAovLyBzZXJ2aWNlIG9mIHRoZSBjdXJyZW50IHRocmVhZApwdWJsaWMgc3RhdGlj
IGJvb2xlYW4gaW5pdGlhdG9yKCkgewogIHJldHVybiBjYWxsc3RhY2soKS5sZW5ndGggPD0gMTsK
fQoKLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBzZXJ2aWNlIGFuZCBl
eGlzdHMKcHVibGljIHN0YXRpYyBib29sZWFuIHZhbGlkYXRlKFN0cmluZyBzZXJ2aWNlKSB0aHJv
d3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgcmV0dXJuIHZhbGlkYXRlKHNlcnZpY2UsIGZhbHNlKTsK
fQoKLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBzZXJ2aWNlIGFuZCBl
eGlzdHMKcHVibGljIHN0YXRpYyBib29sZWFuIHZhbGlkYXRlKFN0cmluZyBzZXJ2aWNlLCBib29s
ZWFuIHJhaXNlKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgYm9vbGVhbiB2YWxpZCA9IHR1
bmRyYS5ub2RlLmV4aXN0cyhzZXJ2aWNlKSAmJiAic2VydmljZSIuZXF1YWxzKHR1bmRyYS5ub2Rl
LnR5cGUoc2VydmljZSkpOwoKICBpZiAocmFpc2UgJiYgIXZhbGlkKSB0aHJvdyBuZXcgU2Vydmlj
ZUV4Y2VwdGlvbigiU2VydmljZSBkb2VzIG5vdCBleGlzdDogIiArIHNlcnZpY2UpOwogIAogIHJl
dHVybiB2YWxpZDsKfQoKLy8gcmV0dXJucyB0aGUgaW52b2NhdGlvbiBjYWxsIHN0YWNrCnB1Ymxp
YyBzdGF0aWMgU3RyaW5nW10gY2FsbHN0YWNrKCkgewogIGphdmEudXRpbC5JdGVyYXRvciBzdGFj
ayA9IGNvbS53bS5hcHAuYjJiLnNlcnZlci5JbnZva2VTdGF0ZS5nZXRDdXJyZW50U3RhdGUoKS5n
ZXRDYWxsU3RhY2soKS5pdGVyYXRvcigpOwogIGphdmEudXRpbC5MaXN0PFN0cmluZz4gc2Vydmlj
ZXMgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDxTdHJpbmc+KCk7CiAgd2hpbGUgKHN0YWNrLmhh
c05leHQoKSkgewogICAgc2VydmljZXMuYWRkKHN0YWNrLm5leHQoKS50b1N0cmluZygpKTsKICB9
CiAgLy8gcmVtb3ZlIGNhbGwgdG8gdHVuZHJhLmludm9rZTpjYWxsc3RhY2sgZnJvbSB0aGUgc3Rh
Y2sKICBpZiAoc2VydmljZXMuc2l6ZSgpID4gMCkgc2VydmljZXMucmVtb3ZlKHNlcnZpY2VzLnNp
emUoKSAtIDEpOwogIHJldHVybiAoU3RyaW5nW10pc2VydmljZXMudG9BcnJheShuZXcgU3RyaW5n
W3NlcnZpY2VzLnNpemUoKV0pOwp9CgovLyByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50
IHNlcnZpY2UsIG9yIG51bGwgaWYgaW52b2tlZCBkaXJlY3RseQpwdWJsaWMgc3RhdGljIFN0cmlu
ZyBzZWxmKCkgewogIFN0cmluZyBzZWxmID0gbnVsbDsKICBqYXZhLnV0aWwuU3RhY2sgc3RhY2sg
PSBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuSW52b2tlU3RhdGUuZ2V0Q3VycmVudFN0YXRlKCkuZ2V0
Q2FsbFN0YWNrKCk7CiAgaWYgKHN0YWNrLnNpemUoKSA+IDEpIHsKICAgIHNlbGYgPSBzdGFjay5n
ZXQoc3RhY2suc2l6ZSgpIC0gMikudG9TdHJpbmcoKTsgLy8gdGhpcyB3aWxsIHJldHVybiB0aGlz
IHNlcnZpY2UncyBjYWxsZXIKICB9CiAgcmV0dXJuIHNlbGY7Cn0KCi8vIGludm9rZXMgdGhlIGdp
dmVuIHNlcnZpY2Ugc3luY2hyb25vdXNseQpwdWJsaWMgc3RhdGljIElEYXRhIGludm9rZShTdHJp
bmcgc2VydmljZSwgSURhdGEgcGlwZWxpbmUpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsgIAog
IHJldHVybiAoSURhdGEpaW52b2tlKHNlcnZpY2UsIHBpcGVsaW5lLCAic3luY2hyb25vdXMiKTsK
fQoKLy8gaW52b2tlcyB0aGUgZ2l2ZW4gc2VydmljZSBlaXRoZXIgc3luY2hyb25vdXNseSBvciBh
c3luY2hyb25vdXNseQpwdWJsaWMgc3RhdGljIE9iamVjdCBpbnZva2UoU3RyaW5nIHNlcnZpY2Us
IElEYXRhIHBpcGVsaW5lLCBTdHJpbmcgbW9kZSkgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24geyAg
CiAgT2JqZWN0IHJlc3VsdCA9IG51bGw7CiAgaWYgKG1vZGUuZXF1YWxzKCJzeW5jaHJvbm91cyIp
KSB7CiAgICByZXN1bHQgPSBpbnZva2Uuc3luY2hyb25vdXMoc2VydmljZSwgcGlwZWxpbmUpOwog
IH0gZWxzZSBpZiAobW9kZS5lcXVhbHMoImFzeW5jaHJvbm91cyIpKSB7CiAgICByZXN1bHQgPSBp
bnZva2UuYXN5bmNocm9ub3VzKHNlcnZpY2UsIHBpcGVsaW5lKTsKICB9IGVsc2UgewogICAgdGhy
b3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigibW9kZSBtdXN0IGJlIGVpdGhlciAnc3lu
Y2hyb25vdXMnIG9yICdhc3luY2hyb25vdXMnOiAiICsgbW9kZSk7CiAgfQogIHJldHVybiByZXN1
bHQ7Cn0KCnB1YmxpYyBzdGF0aWMgY2xhc3MgaW52b2tlIHsKICAvLyBpbnZva2VzIGEgc2Vydmlj
ZSBhc3luY2hyb25vdXNseQogIHB1YmxpYyBzdGF0aWMgY29tLndtLmFwcC5iMmIuc2VydmVyLlNl
cnZpY2VUaHJlYWQgYXN5bmNocm9ub3VzKFN0cmluZyBzZXJ2aWNlLCBJRGF0YSBwaXBlbGluZSkg
ewogICAgaWYgKHBpcGVsaW5lID09IG51bGwpIHBpcGVsaW5lID0gSURhdGFGYWN0b3J5LmNyZWF0
ZSgpOwogICAgaWYgKHNlcnZpY2UgPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICAKICAgIElEYXRh
IHNjb3BlID0gSURhdGFVdGlsLmNsb25lKHBpcGVsaW5lKTsKICAgIGNvbS53bS5sYW5nLm5zLk5T
TmFtZSBuYW1lID0gY29tLndtLmxhbmcubnMuTlNOYW1lLmNyZWF0ZShzZXJ2aWNlKTsgIAogICAg
Y29tLndtLmFwcC5iMmIuc2VydmVyLlNlcnZpY2VUaHJlYWQgdGhyZWFkID0gY29tLndtLmFwcC5i
MmIuc2VydmVyLlNlcnZpY2UuZG9UaHJlYWRJbnZva2UobmFtZSwgc2NvcGUpOwoKICAgIHJldHVy
biB0aHJlYWQ7CiAgfQoKICAvLyBpbnZva2VzIGEgc2VydmljZSBzeW5jaHJvbm91c2x5CiAgcHVi
bGljIHN0YXRpYyBJRGF0YSBzeW5jaHJvbm91cyhTdHJpbmcgc2VydmljZSwgSURhdGEgcGlwZWxp
bmUpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICAgIGlmIChwaXBlbGluZSA9PSBudWxsKSBw
aXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKICAgIGlmIChzZXJ2aWNlID09IG51bGwp
IHJldHVybiBwaXBlbGluZTsKICAgIAogICAgSURhdGEgc2NvcGUgPSBJRGF0YVV0aWwuY2xvbmUo
cGlwZWxpbmUpOwogICAgY29tLndtLmxhbmcubnMuTlNOYW1lIG5hbWUgPSBjb20ud20ubGFuZy5u
cy5OU05hbWUuY3JlYXRlKHNlcnZpY2UpOwoKICAgIHRyeSB7CiAgICAgIHNjb3BlID0gY29tLndt
LmFwcC5iMmIuc2VydmVyLlNlcnZpY2UuZG9JbnZva2UobmFtZSwgc2NvcGUpOwogICAgfSBjYXRj
aCAoRXhjZXB0aW9uIGV4KSB7CiAgICAgIHR1bmRyYS5leGNlcHRpb24ucmFpc2UoZXgpOwogICAg
fQoKICAgIElEYXRhVXRpbC5tZXJnZShzY29wZSwgcGlwZWxpbmUpOwogICAgCiAgICByZXR1cm4g
cGlwZWxpbmU7CiAgfQp9CgovLyB3YWl0cyBmb3IgYW4gYXN5bmNocm9ub3VzbHkgaW52b2tlZCBz
ZXJ2aWNlIHRvIGNvbXBsZXRlCnB1YmxpYyBzdGF0aWMgSURhdGEgam9pbihjb20ud20uYXBwLmIy
Yi5zZXJ2ZXIuU2VydmljZVRocmVhZCB0aHJlYWQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsK
ICBJRGF0YSBwaXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCiAgaWYgKHRocmVhZCAh
PSBudWxsKSB7CiAgICB0cnkgewogICAgICBwaXBlbGluZSA9IHRocmVhZC5nZXRJRGF0YSgpOwog
ICAgfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7CiAgICAgIHR1bmRyYS5leGNlcHRpb24ucmFpc2Uo
ZXgpOwogICAgfQogIH0KICAKICByZXR1cm4gcGlwZWxpbmU7Cn0KCi8vIHNsZWVwcyB0aGUgY3Vy
cmVudCB0aHJlYWQgZm9yIHRoZSBnaXZlbiBkdXJhdGlvbgpwdWJsaWMgc3RhdGljIHZvaWQgc2xl
ZXAoU3RyaW5nIGR1cmF0aW9uKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgc2xlZXAodHVu
ZHJhLmR1cmF0aW9uLnBhcnNlKGR1cmF0aW9uKS5nZXRUaW1lSW5NaWxsaXMobmV3IGphdmEudXRp
bC5EYXRlKCkpKTsKfQoKLy8gc2xlZXBzIHRoZSBjdXJyZW50IHRocmVhZCBmb3IgdGhlIGdpdmVu
IGR1cmF0aW9uCnB1YmxpYyBzdGF0aWMgdm9pZCBzbGVlcChsb25nIG1pbGxpc2Vjb25kcykgdGhy
b3dzIFNlcnZpY2VFeGNlcHRpb24gewogIHRyeSB7CiAgICBUaHJlYWQuc2xlZXAobWlsbGlzZWNv
bmRzKTsKICB9IGNhdGNoKEludGVycnVwdGVkRXhjZXB0aW9uIGV4KSB7CiAgICB0dW5kcmEuZXhj
ZXB0aW9uLnJhaXNlKGV4KTsKICB9Cn0KCi8vIHByb3ZpZGVzIGEgdHJ5L2NhdGNoL2ZpbmFsbHkg
cGF0dGVybiBmb3IgZmxvdyBzZXJ2aWNlcwpwdWJsaWMgc3RhdGljIElEYXRhIGVuc3VyZShTdHJp
bmcgc2VydmljZSwgSURhdGEgcGlwZWxpbmUsIFN0cmluZyBjYXRjaFNlcnZpY2UsIFN0cmluZyBm
aW5hbGx5U2VydmljZSkgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gewogIHRyeSB7CiAgICBwaXBl
bGluZSA9IGludm9rZS5zeW5jaHJvbm91cyhzZXJ2aWNlLCBwaXBlbGluZSk7CiAgfSBjYXRjaCAo
VGhyb3dhYmxlIHQpIHsKICAgIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNv
cigpOwogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkZXhjZXB0aW9uIiwgdCk7CiAgICBJRGF0
YVV0aWwucHV0KGN1cnNvciwgIiRleGNlcHRpb24/IiwgInRydWUiKTsKICAgIElEYXRhVXRpbC5w
dXQoY3Vyc29yLCAiJGV4Y2VwdGlvbi5jbGFzcyIsIHQuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpOwog
ICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkZXhjZXB0aW9uLm1lc3NhZ2UiLCB0LmdldE1lc3Nh
Z2UoKSk7CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRleGNlcHRpb24uc3RhY2siLCB0dW5k
cmEuZXhjZXB0aW9uLnN0YWNrKHQpKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CgogICAgaWYgKGNh
dGNoU2VydmljZSA9PSBudWxsKSB7CiAgICAgIHR1bmRyYS5leGNlcHRpb24ucmFpc2UodCk7CiAg
ICB9IGVsc2UgewogICAgICBwaXBlbGluZSA9IGludm9rZShjYXRjaFNlcnZpY2UsIHBpcGVsaW5l
KTsKICAgIH0KICB9IGZpbmFsbHkgewogICAgaWYgKGZpbmFsbHlTZXJ2aWNlICE9IG51bGwpIHBp
cGVsaW5lID0gaW52b2tlKGZpbmFsbHlTZXJ2aWNlLCBwaXBlbGluZSk7CiAgfQoKICByZXR1cm4g
cGlwZWxpbmU7Cn0KCi8vIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGdpdmVuIHNlcnZp
Y2UKcHVibGljIHN0YXRpYyBJRGF0YSByZWZsZWN0KFN0cmluZyBzZXJ2aWNlTmFtZSkgewogIGlm
IChzZXJ2aWNlTmFtZSA9PSBudWxsKSByZXR1cm4gbnVsbDsKCiAgY29tLndtLmFwcC5iMmIuc2Vy
dmVyLkJhc2VTZXJ2aWNlIHNlcnZpY2UgPSBjb20ud20uYXBwLmIyYi5zZXJ2ZXIubnMuTmFtZXNw
YWNlLmdldFNlcnZpY2UoY29tLndtLmxhbmcubnMuTlNOYW1lLmNyZWF0ZShzZXJ2aWNlTmFtZSkp
OwogIGlmIChzZXJ2aWNlID09IG51bGwpIHJldHVybiBudWxsOwoKICBJRGF0YSBvdXRwdXQgPSBJ
RGF0YUZhY3RvcnkuY3JlYXRlKCk7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gb3V0cHV0LmdldEN1
cnNvcigpOwoKICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIm5hbWUiLCBzZXJ2aWNlTmFtZSk7CiAg
SURhdGFVdGlsLnB1dChjdXJzb3IsICJ0eXBlIiwgc2VydmljZS5nZXRTZXJ2aWNlVHlwZSgpLmdl
dFR5cGUoKSk7CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICJwYWNrYWdlIiwgc2VydmljZS5nZXRQ
YWNrYWdlTmFtZSgpKTsKCiAgU3RyaW5nIGRlc2NyaXB0aW9uID0gc2VydmljZS5nZXRDb21tZW50
KCk7CiAgaWYgKGRlc2NyaXB0aW9uICE9IG51bGwpIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiZGVz
Y3JpcHRpb24iLCBkZXNjcmlwdGlvbik7CgogIGN1cnNvci5kZXN0cm95KCk7CgogIHJldHVybiBv
dXRwdXQ7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVuIHNlcnZpY2UgYSBnaXZlbiBudW1iZXIgb2Yg
dGltZXMsIGFuZCByZXR1cm5zIGV4ZWN1dGlvbiBkdXJhdGlvbiBzdGF0aXN0aWNzCnB1YmxpYyBz
dGF0aWMgSW5jcmVtZW50YWxOb3JtYWxEaXN0cmlidXRpb25Fc3RpbWF0b3IgYmVuY2htYXJrKFN0
cmluZyBzZXJ2aWNlLCBJRGF0YSBwaXBlbGluZSwgaW50IGNvdW50KSB0aHJvd3MgU2VydmljZUV4
Y2VwdGlvbiB7CiAgSW5jcmVtZW50YWxOb3JtYWxEaXN0cmlidXRpb25Fc3RpbWF0b3IgZXN0aW1h
dG9yID0gbmV3IEluY3JlbWVudGFsTm9ybWFsRGlzdHJpYnV0aW9uRXN0aW1hdG9yKCJtcyIpOwoK
ICB2YWxpZGF0ZShzZXJ2aWNlLCB0cnVlKTsKCiAgdHJ5IHsgCiAgICBmb3IgKGludCBpID0gMDsg
aSA8IGNvdW50OyBpKyspIHsKICAgICAgbG9uZyBzdGFydCA9IFN5c3RlbS5jdXJyZW50VGltZU1p
bGxpcygpOwogICAgICB0dW5kcmEuc2VydmljZS5pbnZva2Uuc3luY2hyb25vdXMoc2VydmljZSwg
cGlwZWxpbmUpOwogICAgICBsb25nIGVuZCA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOwoK
ICAgICAgZXN0aW1hdG9yLmFwcGVuZChlbmQgLSBzdGFydCk7CiAgICB9CiAgfSBjYXRjaCAoU2Vy
dmljZUV4Y2VwdGlvbiBleCkgewogICAgLy8gaWdub3JlIGV4Y2VwdGlvbnMKICB9CgogIHJldHVy
biBlc3RpbWF0b3I7Cn0KCi8vIENsYXNzIGZvciBpbmNyZW1lbnRhbGx5IGNhbGN1bGF0aW5nIHRo
ZSBtZWFuIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24KcHVibGljIHN0YXRpYyBjbGFzcyBJbmNyZW1l
bnRhbE5vcm1hbERpc3RyaWJ1dGlvbkVzdGltYXRvciB7CgogIHByb3RlY3RlZCBsb25nIGNvdW50
OwogIHByb3RlY3RlZCBkb3VibGUgbWVhbiwgc3EsIG1pbmltdW0sIG1heGltdW07CiAgcHJvdGVj
dGVkIFN0cmluZyB1bml0ID0gIiI7CgogIC8qKgogICAqIENvbnN0cnVjdHMgYSBuZXcgZXN0aW1h
dG9yIG9iamVjdC4KICAgKi8KICBwdWJsaWMgSW5jcmVtZW50YWxOb3JtYWxEaXN0cmlidXRpb25F
c3RpbWF0b3IoKSB7CiAgICByZXNldCgpOwogIH0KCiAgLyoqCiAgICogQ29uc3RydWN0cyBhIG5l
dyBlc3RpbWF0b3Igb2JqZWN0LgogICAqIEBwYXJhbSB1bml0IFRoZSB1bml0IG9mIG1lYXN1cmVt
ZW50IHJlbGF0ZWQgdG8gdGhlIG1lYXN1cmVkIHNhbXBsZXMuCiAgICovCiAgcHVibGljIEluY3Jl
bWVudGFsTm9ybWFsRGlzdHJpYnV0aW9uRXN0aW1hdG9yKFN0cmluZyB1bml0KSB7CiAgICB0aGlz
KCk7CiAgICB0aGlzLnVuaXQgPSB1bml0OwogIH0gIAoKICAvKioKICAgKiBDb25zdHJ1Y3RzIGEg
bmV3IGVzdGltYXRvciBvYmplY3Qgc2VlZGVkIHdpdGggdGhlIGdpdmVuIHNhbXBsZXMuCiAgICoK
ICAgKiBAcGFyYW0gc2FtcGxlcyBPbmUgb3IgbW9yZSBpbml0aWFsIHNhbXBsZXMgdG8gc2VlZCB0
aGUgZXN0aW1hdG9yIHdpdGguCiAgICovCiAgcHVibGljIEluY3JlbWVudGFsTm9ybWFsRGlzdHJp
YnV0aW9uRXN0aW1hdG9yKGRvdWJsZS4uLiBzYW1wbGVzKSB7CiAgICB0aGlzKCk7CiAgICBhcHBl
bmQoc2FtcGxlcyk7CiAgfQoKICAvKioKICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGVzdGltYXRvciBv
YmplY3Qgc2VlZGVkIHdpdGggdGhlIGdpdmVuIHNhbXBsZXMuCiAgICoKICAgKiBAcGFyYW0gdW5p
dCBUaGUgdW5pdCBvZiBtZWFzdXJlbWVudCByZWxhdGVkIHRvIHRoZSBtZWFzdXJlZCBzYW1wbGVz
LgogICAqIEBwYXJhbSBzYW1wbGVzIE9uZSBvciBtb3JlIGluaXRpYWwgc2FtcGxlcyB0byBzZWVk
IHRoZSBlc3RpbWF0b3Igd2l0aC4KICAgKi8KICBwdWJsaWMgSW5jcmVtZW50YWxOb3JtYWxEaXN0
cmlidXRpb25Fc3RpbWF0b3IoU3RyaW5nIHVuaXQsIGRvdWJsZS4uLiBzYW1wbGVzKSB7CiAgICB0
aGlzKHVuaXQpOwogICAgYXBwZW5kKHNhbXBsZXMpOwogIH0KCiAgLyoqCiAgICogQ29uc3RydWN0
cyBhIG5ldyBlc3RpbWF0b3Igb2JqZWN0IHNlZWRlZCB3aXRoIHRoZSBnaXZlbiBjb2xsZWN0aW9u
IG9mCiAgICogc2FtcGxlcy4KICAgKgogICAqIEBwYXJhbSBzYW1wbGVzIEFuIGluaXRpYWwgY29s
bGVjdGlvbiBvZiBzYW1wbGVzIHRvIHNlZWQgdGhlIGVzdGltYXRvciB3aXRoLgogICAqLwogIHB1
YmxpYyBJbmNyZW1lbnRhbE5vcm1hbERpc3RyaWJ1dGlvbkVzdGltYXRvcihqYXZhLnV0aWwuQ29s
bGVjdGlvbjxEb3VibGU+IHNhbXBsZXMpIHsKICAgIHRoaXMoKTsKICAgIGFwcGVuZChzYW1wbGVz
KTsKICB9CgogIC8qKgogICAqIENvbnN0cnVjdHMgYSBuZXcgZXN0aW1hdG9yIG9iamVjdCBzZWVk
ZWQgd2l0aCB0aGUgZ2l2ZW4gY29sbGVjdGlvbiBvZgogICAqIHNhbXBsZXMuCiAgICoKICAgKiBA
cGFyYW0gdW5pdCBUaGUgdW5pdCBvZiBtZWFzdXJlbWVudCByZWxhdGVkIHRvIHRoZSBtZWFzdXJl
ZCBzYW1wbGVzLgogICAqIEBwYXJhbSBzYW1wbGVzIEFuIGluaXRpYWwgY29sbGVjdGlvbiBvZiBz
YW1wbGVzIHRvIHNlZWQgdGhlIGVzdGltYXRvciB3aXRoLgogICAqLwogIHB1YmxpYyBJbmNyZW1l
bnRhbE5vcm1hbERpc3RyaWJ1dGlvbkVzdGltYXRvcihTdHJpbmcgdW5pdCwgamF2YS51dGlsLkNv
bGxlY3Rpb248RG91YmxlPiBzYW1wbGVzKSB7CiAgICB0aGlzKHVuaXQpOwogICAgYXBwZW5kKHNh
bXBsZXMpOwogIH0KCiAgLyoqCiAgICogQXBwZW5kcyB0aGUgZ2l2ZW4gc2FtcGxlIHRvIHRoZSBs
aXN0IG9mIHNhbXBsZXMgaW4gdGhlIGVzdGltYXRvci4KICAgKgogICAqIEBwYXJhbSBzYW1wbGUg
VGhlIHNhbXBsZSB0byBiZSBhZGRlZCB0byB0aGUgZXN0aW1hdG9yLgogICAqIEByZXR1cm4gVGhl
IEVzdGltYXRvciBvYmplY3QgaXRzZWxmLCB0byBzdXBwb3J0IG1ldGhvZCBjaGFpbmluZy4KICAg
Ki8KICBwdWJsaWMgZmluYWwgSW5jcmVtZW50YWxOb3JtYWxEaXN0cmlidXRpb25Fc3RpbWF0b3Ig
YXBwZW5kKGRvdWJsZSBzYW1wbGUpIHsKICAgIGRvdWJsZSBuZXh0ID0gbWVhbiArIChzYW1wbGUg
LSBtZWFuKSAvICsrY291bnQ7CiAgICBzcSArPSAoc2FtcGxlIC0gbWVhbikgKiAoc2FtcGxlIC0g
bmV4dCk7CiAgICBtZWFuID0gbmV4dDsKICAgIGlmIChzYW1wbGUgPCBtaW5pbXVtKSBtaW5pbXVt
ID0gc2FtcGxlOwogICAgaWYgKHNhbXBsZSA+IG1heGltdW0pIG1heGltdW0gPSBzYW1wbGU7Cgog
ICAgcmV0dXJuIHRoaXM7CiAgfQoKICAvKioKICAgKiBBZGRzIG9uZSBvciBtb3JlIHNhbXBsZXMg
dG8gdGhlIGVzdGltYXRvci4KICAgKgogICAqIEBwYXJhbSBzYW1wbGVzIE9uZSBvciBtb3JlIHNh
bXBsZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGVzdGltYXRvci4KICAgKiBAcmV0dXJuIFRoZSBFc3Rp
bWF0b3Igb2JqZWN0IGl0c2VsZiwgdG8gc3VwcG9ydCBtZXRob2QgY2hhaW5pbmcuCiAgICovCiAg
cHVibGljIGZpbmFsIEluY3JlbWVudGFsTm9ybWFsRGlzdHJpYnV0aW9uRXN0aW1hdG9yIGFwcGVu
ZChkb3VibGUuLi4gc2FtcGxlcykgewogICAgZm9yIChkb3VibGUgc2FtcGxlIDogc2FtcGxlcykg
ewogICAgICBhcHBlbmQoc2FtcGxlKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9CgogIC8q
KgogICAqIEFkZHMgYSBjb2xsZWN0aW9uIG9mIHNhbXBsZXMgdG8gdGhlIGVzdGltYXRvci4KICAg
KgogICAqIEBwYXJhbSBzYW1wbGVzIEEgY29sbGVjdGlvbiBvZiBzYW1wbGVzIHRvIGJlIGFkZGVk
IHRvIHRoZSBlc3RpbWF0b3IuCiAgICogQHJldHVybiBUaGUgRXN0aW1hdG9yIG9iamVjdCBpdHNl
bGYsIHRvIHN1cHBvcnQgbWV0aG9kIGNoYWluaW5nLgogICAqLwogIHB1YmxpYyBmaW5hbCBJbmNy
ZW1lbnRhbE5vcm1hbERpc3RyaWJ1dGlvbkVzdGltYXRvciBhcHBlbmQoamF2YS51dGlsLkNvbGxl
Y3Rpb248RG91YmxlPiBzYW1wbGVzKSB7CiAgICBmb3IgKGRvdWJsZSBzYW1wbGUgOiBzYW1wbGVz
KSB7CiAgICAgIGFwcGVuZChzYW1wbGUpOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0KCiAg
LyoqCiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHNhbXBsZXMgc2VlbiBieSB0aGlzIGVzdGlt
YXRvci4KICAgKgogICAqIEByZXR1cm4gVGhlIG51bWJlciBvZiBzYW1wbGVzIHNlZW4gYnkgdGhp
cyBlc3RpbWF0b3IuCiAgICovCiAgcHVibGljIGxvbmcgY291bnQoKSB7CiAgICByZXR1cm4gY291
bnQ7CiAgfQoKICAvKioKICAgKiBSZXR1cm5zIHRoZSBtZWFuIG9mIHRoZSBzYW1wbGVzLgogICAq
CiAgICogQHJldHVybiBUaGUgbWVhbiBvZiB0aGUgc2FtcGxlcy4KICAgKi8KICBwdWJsaWMgZG91
YmxlIG1lYW4oKSB7CiAgICByZXR1cm4gbWVhbjsKICB9CgogIC8qKgogICAqIFJldHVybnMgdGhl
IG1pbmltdW0gb2YgdGhlIHNhbXBsZXMuCiAgICoKICAgKiBAcmV0dXJuIFRoZSBtaW5pbXVtIG9m
IHRoZSBzYW1wbGVzLgogICAqLwogIHB1YmxpYyBkb3VibGUgbWluaW11bSgpIHsKICAgIHJldHVy
biBtaW5pbXVtOwogIH0KCiAgLyoqCiAgICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0aGUgc2Ft
cGxlcy4KICAgKgogICAqIEByZXR1cm4gVGhlIG1heGltdW0gb2YgdGhlIHNhbXBsZXMuCiAgICov
CiAgcHVibGljIGRvdWJsZSBtYXhpbXVtKCkgewogICAgcmV0dXJuIG1heGltdW07CiAgfQoKICAv
KioKICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGxpa2VsaWhvb2QgZXN0aW1hdGUgb2YgdGhlIHZh
cmlhbmNlIG9mIHRoZSBzYW1wbGVzLgogICAqCiAgICogQHJldHVybiBNYXhpbXVtIGxpa2VsaWhv
b2QgdmFyaWFuY2UgZXN0aW1hdGUuCiAgICovCiAgcHVibGljIGRvdWJsZSB2YXJpYW5jZSgpIHsK
ICAgIHJldHVybiBjb3VudCA+IDEgJiYgbWVhbiA+IDAgPyBzcSAvIG1lYW4gOiAwLjA7CiAgfQoK
ICAvKioKICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGxpa2VsaWhvb2QgZXN0aW1hdGUgb2YgdGhl
IHN0YW5kYXJkIGRldmlhdGlvbiBvZiB0aGUKICAgKiBzYW1wbGVzLgogICAqCiAgICogQHJldHVy
biBNYXhpbXVtIGxpa2VsaWhvb2Qgc3RhbmRhcmQgZGV2aWF0aW9uIGVzdGltYXRlLgogICAqLwog
IHB1YmxpYyBkb3VibGUgc3RhbmRhcmREZXZpYXRpb24oKSB7CiAgICByZXR1cm4gTWF0aC5zcXJ0
KHZhcmlhbmNlKCkpOwogIH0KCiAgLyoqCiAgICogUmV0dXJucyB0aGUgdW5pdCBvZiBtZWFzdXJl
IHJlbGF0ZWQgdG8gdGhlIG1lYXN1cmVkIHNhbXBsZXMuCiAgICoKICAgKiBAcmV0dXJuIE1heGlt
dW0gbGlrZWxpaG9vZCBzdGFuZGFyZCBkZXZpYXRpb24gZXN0aW1hdGUuCiAgICovCiAgcHVibGlj
IFN0cmluZyB1bml0KCkgewogICAgcmV0dXJuIHVuaXQ7CiAgfQoKICAvKioKICAgKiBSZXNldHMg
dGhlIGVzdGltYXRvciBiYWNrIHRvIHplcm8gc2FtcGxlcy4KICAgKgogICAqIEByZXR1cm4gVGhl
IEVzdGltYXRvciBvYmplY3QgaXRzZWxmLCB0byBzdXBwb3J0IG1ldGhvZCBjaGFpbmluZy4KICAg
Ki8KICBwdWJsaWMgZmluYWwgSW5jcmVtZW50YWxOb3JtYWxEaXN0cmlidXRpb25Fc3RpbWF0b3Ig
cmVzZXQoKSB7CiAgICBjb3VudCA9IDA7CiAgICBtZWFuID0gMC4wOwogICAgc3EgPSAwLjA7CiAg
ICBtaW5pbXVtID0gRG91YmxlLlBPU0lUSVZFX0lORklOSVRZOwogICAgbWF4aW11bSA9IERvdWJs
ZS5ORUdBVElWRV9JTkZJTklUWTsKCiAgICByZXR1cm4gdGhpczsKICB9CgogIC8qKgogICAqIFJl
dHVybnMgYSBzdHJpbmctYmFzZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lYW4sIHN0YW5kYXJk
IGRldmlhdGlvbiBhbmQKICAgKiBudW1iZXIgb2Ygc2FtcGxlcyBmb3IgdGhpcyBlc3RpbWF0b3Iu
CiAgICoKICAgKiBAcmV0dXJuIFN0cmluZy1iYXNlZCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGVz
dGltYXRvci4KICAgKi8KICBAT3ZlcnJpZGUKICBwdWJsaWMgU3RyaW5nIHRvU3RyaW5nKCkgewog
ICAgcmV0dXJuIFN0cmluZy5mb3JtYXQoIs68ID0gJS4zZiAlcywgz4MgPSAlLjNmICVzLCDiiKcg
PSAlLjNmICVzLCDiiKggPSAlLjNmICVzLCBuID0gJWQiLCBtZWFuKCksIHVuaXQoKSwgc3RhbmRh
cmREZXZpYXRpb24oKSwgdW5pdCgpLCBtaW5pbXVtKCksIHVuaXQoKSwgbWF4aW11bSgpLCB1bml0
KCksIGNvdW50KCkpOwogIH0KfQ==</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
