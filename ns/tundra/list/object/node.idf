<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBhcHBlbmQoVFtdIGFycmF5LCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgLTEsIGtsYXNz
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNl
cnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgYXBwZW5kKElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBhcHBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6
IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilq
YXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSks
IGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNv
ciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIG51bGwgZWxlbWVudHMgcmVtb3Zl
ZApwdWJsaWMgc3RhdGljIDxUPiBUW10gY29tcGFjdChUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwoKICBmb3IgKGludCBpID0gMDsg
aSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkgbGlzdC5h
ZGQoYXJyYXlbaV0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggY29u
dGFpbnMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheXMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIGNvbmNhdGVuYXRlKFRbXSBhcnJheSwgVFtdIGl0ZW1zKSB7CiAgaWYgKGFycmF5
ID09IG51bGwpIHJldHVybiBpdGVtczsKICBpZiAoaXRlbXMgPT0gbnVsbCkgcmV0dXJuIGFycmF5
OwoKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
YXJyYXkubGVuZ3RoICsgaXRlbXMubGVuZ3RoKTsKICAKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMu
YWRkQWxsKGxpc3QsIGFycmF5KTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMuYWRkQWxsKGxpc3Qs
IGl0ZW1zKTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9m
KGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBu
b3QgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkaWZmZXJlbmNlKFRbXSB4LCBUW10g
eSkgewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4geDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZW1vdmVBbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZW1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBp
bmRleCBmcm9tIHRoZSBnaXZlbiBsaXN0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkcm9wKFRbXSBh
cnJheSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGRyb3AoYXJyYXksIEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpKTsKfQoKLy8gcmVtb3ZlcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXgg
ZnJvbSB0aGUgZ2l2ZW4gbGlzdApwdWJsaWMgc3RhdGljIDxUPiBUW10gZHJvcChUW10gYXJyYXks
IGludCBpbmRleCkgewogIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3Ro
OwogICAgaWYgKGluZGV4IDwgMCB8fCBhcnJheS5sZW5ndGggPD0gaW5kZXgpIHRocm93IG5ldyBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24oaW5kZXgpOwoKICAgIFRbXSBoZWFkID0gc2xp
Y2UoYXJyYXksIDAsIGluZGV4KTsKICAgIFRbXSB0YWlsID0gc2xpY2UoYXJyYXksIGluZGV4ICsg
MSwgYXJyYXkubGVuZ3RoIC0gaW5kZXgpOwoKICAgIGFycmF5ID0gY29uY2F0ZW5hdGUoaGVhZCwg
dGFpbCk7ICAgICAgCiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVu
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBlYWNoKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBtYXAoYXJyYXksIHNlcnZpY2Us
IHBpcGVsaW5lLCBpbnB1dCwgbnVsbCk7Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4g
YXJyYXlzIGFyZSBlcXVhbApwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGVxdWFsKFRbXSB4LCBU
W10geSkgewogIGJvb2xlYW4gcmVzdWx0ID0gdHJ1ZTsKCiAgaWYgKHggIT0gbnVsbCAmJiB5ICE9
IG51bGwpIHsKICAgIHJlc3VsdCA9ICh4Lmxlbmd0aCA9PSB5Lmxlbmd0aCk7CgogICAgaWYgKHJl
c3VsdCkgewogICAgICBmb3IgKGludCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHsKICAgICAg
ICByZXN1bHQgPSByZXN1bHQgJiYgdHVuZHJhLm9iamVjdC5lcXVhbCh4W2ldLCB5W2ldKTsKICAg
ICAgICBpZiAoIXJlc3VsdCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgcmVz
dWx0ID0gKHggPT0gbnVsbCAmJiB5ID09IG51bGwpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoK
Ly8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIG9uZS1kaW1lbnNpb25hbCByZWN1cnNp
dmUgZmxhdHRlbmluZyBvZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gVFtdIGZs
YXR0ZW4oVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09
IDApIHJldHVybiBhcnJheTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0ID0gbmV3IGph
dmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgZm9yIChpbnQgaSA9IDA7IGkg
PCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldICE9IG51bGwgJiYgYXJyYXlb
aV0uZ2V0Q2xhc3MoKS5pc0FycmF5KCkpIHsKICAgICAgbGlzdC5lbnN1cmVDYXBhY2l0eShsaXN0
LnNpemUoKSArICgoVFtdKWFycmF5W2ldKS5sZW5ndGgpOwogICAgICBsaXN0LmFkZEFsbChqYXZh
LnV0aWwuQXJyYXlzLmFzTGlzdChmbGF0dGVuKChUW10pYXJyYXlbaV0pKSk7CiAgICB9IGVsc2Ug
ewogICAgICBsaXN0LmFkZChhcnJheVtpXSk7CiAgICB9CiAgfQogIAogIHJldHVybiBsaXN0LnRv
QXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9CgoKLy8gcmV0dXJu
cyB0aGUgZWxlbWVudCBmcm9tIHRoZSBnaXZlbiBhcnJheSBhdCB0aGUgZ2l2ZW4gaW5kZXggKHN1
cHBvcnRzIHJ1Ynktc3R5bGUgcmV2ZXJzZSBpbmRleGluZykKcHVibGljIHN0YXRpYyA8VD4gVCBn
ZXQoVFtdIGFycmF5LCBTdHJpbmcgaW5kZXgpIHsKICByZXR1cm4gZ2V0KGFycmF5LCBJbnRlZ2Vy
LnBhcnNlSW50KGluZGV4KSk7Cn0KCi8vIHJldHVybnMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2l2
ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5LXN0eWxlIHJldmVyc2Ug
aW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFQgZ2V0KFRbXSBhcnJheSwgaW50IGluZGV4KSB7
CiAgVCBpdGVtID0gbnVsbDsKICAKICBpZiAoYXJyYXkgIT0gbnVsbCkgewogICAgLy8gc3VwcG9y
dCByZXZlcnNlL3RhaWwgaW5kZXhpbmcKICAgIGlmIChpbmRleCA8IDApIGluZGV4ICs9IGFycmF5
Lmxlbmd0aDsKICAgIAogICAgaXRlbSA9IGFycmF5W2luZGV4XTsKICB9CiAgCiAgcmV0dXJuIGl0
ZW07Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gaXRlbSBpcyBmb3VuZCBpbiB0aGUg
Z2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gYm9vbGVhbiBpbmNsdWRlKFRbXSBhcnJheSwg
VCBpdGVtKSB7CiAgYm9vbGVhbiBmb3VuZCA9IGZhbHNlOwoKICBpZiAoYXJyYXkgIT0gbnVsbCkg
ewogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgICBmb3Vu
ZCA9IHR1bmRyYS5vYmplY3QuZXF1YWwoYXJyYXlbaV0sIGl0ZW0pOwogICAgICBpZiAoZm91bmQp
IGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIGZvdW5kOwp9CgovLyByZXR1cm5zIGEgbmV3IGFy
cmF5IHdpdGggdGhlIGdpdmVuIGl0ZW0gaW5zZXJ0ZWQgYXQgdGhlIGdpdmVuIGluZGV4CnB1Ymxp
YyBzdGF0aWMgPFQ+IFRbXSBpbnNlcnQoVFtdIGFycmF5LCBUIGl0ZW0sIFN0cmluZyBpbmRleCwg
Q2xhc3M8VD4ga2xhc3MpIHsKICBpZiAoaW5kZXggPT0gbnVsbCkgaW5kZXggPSAiLTEiOwogIHJl
dHVybiBpbnNlcnQoYXJyYXksIGl0ZW0sIEludGVnZXIucGFyc2VJbnQoaW5kZXgpLCBrbGFzcyk7
Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCB0aGUgZ2l2ZW4gaXRlbSBpbnNlcnRlZCBh
dCB0aGUgZ2l2ZW4gaW5kZXgKcHVibGljIHN0YXRpYyA8VD4gVFtdIGluc2VydChUW10gYXJyYXks
IFQgaXRlbSwgaW50IGluZGV4LCBDbGFzczxUPiBrbGFzcykgewogIGlmIChhcnJheSA9PSBudWxs
KSBhcnJheSA9IChUW10pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uoa2xhc3Ms
IDApOwoKICBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+IGxpc3QgPSBuZXcgamF2YS51dGlsLkFycmF5
TGlzdDxUPihqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdChhcnJheSkpOwoKICBpbnQgY2FwYWNpdHkg
PSAwOwogIGlmIChpbmRleCA8IDApIGluZGV4ICs9IGxpc3Quc2l6ZSgpICsgMTsKICBpZiAoaW5k
ZXggPCAwKSB7CiAgICBjYXBhY2l0eSA9IChpbmRleCAqIC0xKSArIGxpc3Quc2l6ZSgpOwogICAg
aW5kZXggPSAwOwogIH0gZWxzZSB7CiAgICBjYXBhY2l0eSA9IGluZGV4OwogIH0KCiAgbGlzdC5l
bnN1cmVDYXBhY2l0eShjYXBhY2l0eSk7CiAgaWYgKGNhcGFjaXR5ID49IGxpc3Quc2l6ZSgpKSB7
CiAgICAvLyBmaWxsIHRoZSBsaXN0IHdpdGggbnVsbHMgaWYgaXQgbmVlZHMgdG8gYmUgZXh0ZW5k
ZWQKICAgIGZvciAoaW50IGkgPSBsaXN0LnNpemUoKTsgaSA8IGNhcGFjaXR5OyBpKyspIHsKICAg
ICAgbGlzdC5hZGQoaSwgbnVsbCk7CiAgICB9CiAgfQogIGxpc3QuYWRkKGluZGV4LCBpdGVtKTsK
ICAKICByZXR1cm4gbGlzdC50b0FycmF5KGFycmF5KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJh
eSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBhdCB0aGUgZ2l2ZW4gaW5kZXgKcHVi
bGljIHN0YXRpYyA8VD4gdm9pZCBpbnNlcnQoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNz
KSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7
CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRs
aXN0Iik7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwgIiRpdGVtIik7CiAg
ICBTdHJpbmcgaW5kZXggPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1cnNvciwgIiRpbmRleCIpOwoK
ICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBpbnNlcnQobGlzdCA9PSBudWxsID8g
bnVsbCA6IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8
VFtdPilqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xh
c3MoKSksIGl0ZW0sIGluZGV4LCBrbGFzcykpOwogIH0gZmluYWxseSB7CiAgICBjdXJzb3IuZGVz
dHJveSgpOwogIH0KfQoKLy8gcmV0dXJucyBvbmx5IHRoZSBpdGVtcyBpbiB4IHRoYXQgYXJlIGFs
c28gaW4geQpwdWJsaWMgc3RhdGljIDxUPiBUW10gaW50ZXJzZWN0aW9uKFRbXSB4LCBUW10geSkg
ewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4gbnVsbDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZXRhaW5BbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZXR1cm5zIGEgc3RyaW5nIGNyZWF0ZWQgYnkgY29uY2F0
ZW5hdGluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIGdpdmVuIGFycmF5LCBzZXBhcmF0ZWQgYnkgdGhl
IGdpdmVuIHNlcGFyYXRvciBzdHJpbmcKcHVibGljIHN0YXRpYyA8VD4gU3RyaW5nIGpvaW4oVFtd
IGFycmF5LCBTdHJpbmcgc2VwYXJhdG9yKSB7CiAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3
IFN0cmluZ0J1aWxkZXIoKTsKICAKICBpZiAoYXJyYXkgIT0gbnVsbCkgewogICAgZm9yIChpbnQg
aSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgICBUIHZhbHVlID0gYXJyYXlbaV07
CiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSBidWlsZGVyLmFwcGVuZCh2YWx1ZS50b1N0cmluZygp
KTsKICAgICAgaWYgKHNlcGFyYXRvciAhPSBudWxsICYmIGkgPCBhcnJheS5sZW5ndGggLSAxKSBi
dWlsZGVyLmFwcGVuZChzZXBhcmF0b3IpOwogICAgfQogIH0KICAKICByZXR1cm4gYnVpbGRlci50
b1N0cmluZygpOwp9CgovLyByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIGdpdmVuIGFycmF5CnB1
YmxpYyBzdGF0aWMgPFQ+IGludCBsZW5ndGgoVFtdIGFycmF5KSB7CiAgcmV0dXJuIChhcnJheSA9
PSBudWxsPyAwIDogYXJyYXkubGVuZ3RoKTsKfQoKLy8gbWFwcyB0aGUgZ2l2ZW4gYXJyYXkgdG8g
YSBuZXcgYXJyYXkgYnkgaW52b2tpbmcgYSBzZXJ2aWNlIGZvciBlYWNoIGVsZW1lbnQgYW5kIGNv
bGxlY3RpbmcgdGhlIG91dHB1dApwdWJsaWMgc3RhdGljIDxUPiB2b2lkIG1hcChJRGF0YSBwaXBl
bGluZSwgQ2xhc3M8VD4ga2xhc3MpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBJRGF0YUN1
cnNvciBjdXJzb3IgPSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIE9iamVjdFtd
IGxpc3QgPSBJRGF0YVV0aWwuZ2V0T2JqZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFN0
cmluZyBzZXJ2aWNlID0gSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkc2VydmljZSIpOwog
ICAgSURhdGEgc2NvcGUgPSBJRGF0YVV0aWwuZ2V0SURhdGEoY3Vyc29yLCAiJHBpcGVsaW5lIik7
CiAgICBTdHJpbmcgaW5wdXQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1cnNvciwgIiRpdGVtLmlu
cHV0Iik7CiAgICBTdHJpbmcgb3V0cHV0ID0gSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIk
aXRlbS5vdXRwdXQiKTsKCiAgICBib29sZWFuIHNjb3BlZCA9IHNjb3BlICE9IG51bGw7CgogICAg
Ly8gaW52b2tlIHRoZSBzZXJ2aWNlIGZvciBlYWNoIGl0ZW0gaW4gdGhlIGxpc3QsIHBhc3Npbmcg
JGl0ZW0gYW5kICRpbmRleCB2YXJpYWJsZXMgb24gZWFjaCBpbnZvY2F0aW9uCiAgICAvLyBhbmQg
Y29sbGVjdCB0aGUgcmV0dXJuZWQgJGl0ZW0ncyBpbnRvIGEgbmV3IGxpc3QKICAgIElEYXRhVXRp
bC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBtYXAobGlzdCA9PSBudWxsID8gbnVsbCA6IGphdmEudXRp
bC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilqYXZhLmxhbmcu
cmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSksIHNlcnZpY2Us
IHNjb3BlZCA/IHNjb3BlIDogcGlwZWxpbmUsIGlucHV0LCBvdXRwdXQpKTsKICB9IGZpbmFsbHkg
ewogICAgY3Vyc29yLmRlc3Ryb3koKTsKICB9Cn0KCi8vIG1hcHMgdGhlIGdpdmVuIGFycmF5IHRv
IGEgbmV3IGFycmF5IGJ5IGludm9raW5nIGEgc2VydmljZSBmb3IgZWFjaCBlbGVtZW50IGFuZCBj
b2xsZWN0aW5nIHRoZSBvdXRwdXQKcHVibGljIHN0YXRpYyA8VD4gVFtdIG1hcChUW10gYXJyYXks
IFN0cmluZyBzZXJ2aWNlLCBJRGF0YSBwaXBlbGluZSwgU3RyaW5nIGlucHV0LCBTdHJpbmcgb3V0
cHV0KSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJy
YXkubGVuZ3RoID09IDAgfHwgc2VydmljZSA9PSBudWxsKSByZXR1cm4gYXJyYXk7CiAgaWYgKHBp
cGVsaW5lID09IG51bGwpIHBpcGVsaW5lID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwogIGlmIChp
bnB1dCA9PSBudWxsKSBpbnB1dCA9ICIkaXRlbSI7CiAgaWYgKG91dHB1dCA9PSBudWxsKSBvdXRw
dXQgPSBpbnB1dDsKICAgCiAgamF2YS51dGlsLkxpc3Q8VD4gbGlzdCA9IG5ldyBqYXZhLnV0aWwu
QXJyYXlMaXN0PFQ+KGFycmF5Lmxlbmd0aCk7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gbnVsbDsK
ICAKICBmb3IgKGludCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAvLyBhZGQg
JGl0ZW0sICRpbmRleCwgJGl0ZXJhdGlvbiBhbmQgJGxlbmd0aCB2YXJpYWJsZXMgdG8gdGhlIGlu
cHV0IHBpcGVsaW5lCiAgICBjdXJzb3IgPSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKICAgIElEYXRh
VXRpbC5wdXQoY3Vyc29yLCBpbnB1dCwgYXJyYXlbaV0pOwogICAgSURhdGFVdGlsLnB1dChjdXJz
b3IsICIkaW5kZXgiLCAiIiArIGkpOwogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkaXRlcmF0
aW9uIiwgIiIgKyAoaSArIDEpKTsKICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxlbmd0aCIs
ICIiICsgYXJyYXkubGVuZ3RoKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CgogICAgLy8gaW52b2tl
IHRoZSBpdGVyYXRvciBzZXJ2aWNlCiAgICBwaXBlbGluZSA9IHR1bmRyYS5zZXJ2aWNlLmludm9r
ZShzZXJ2aWNlLCBwaXBlbGluZSk7CgogICAgLy8gY2xlYW4gdXAgdGhlIGlucHV0IHBpcGVsaW5l
CiAgICBjdXJzb3IgPSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKICAgIFQgaXRlbSA9IChUKUlEYXRh
VXRpbC5nZXQoY3Vyc29yLCBvdXRwdXQpOwogICAgSURhdGFVdGlsLnJlbW92ZShjdXJzb3IsIGlu
cHV0KTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCBvdXRwdXQpOwogICAgSURhdGFVdGls
LnJlbW92ZShjdXJzb3IsICIkaW5kZXgiKTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAi
JGl0ZXJhdGlvbiIpOwogICAgSURhdGFVdGlsLnJlbW92ZShjdXJzb3IsICIkbGVuZ3RoIik7CiAg
ICBjdXJzb3IuZGVzdHJveSgpOwogICAgCiAgICAvLyBjb2xsZWN0IHRoZSBtYXBwZWQgaXRlbXMK
ICAgIGxpc3QuYWRkKGl0ZW0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRp
bC5BcnJheXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0
aCBhIG5ldyBlbGVtZW50IGluc2VydGVkIGF0IHRoZSBiZWdpbm5pbmcKcHVibGljIHN0YXRpYyA8
VD4gVFtdIHByZXBlbmQoVFtdIGFycmF5LCBUIGl0ZW0sIENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0
dXJuIGluc2VydChhcnJheSwgaXRlbSwgMCwga2xhc3MpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFy
cmF5LCB3aXRoIHRoZSBnaXZlbiBlbGVtZW50IGluc2VydGVkIGF0IHRoZSBlbmQKcHVibGljIHN0
YXRpYyA8VD4gdm9pZCBwcmVwZW5kKElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgewog
IElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0cnkgewogICAg
VFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIp
OwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAgIGxp
c3QgPSBwcmVwZW5kKGxpc3QgPT0gbnVsbCA/IG51bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlP
ZihsaXN0LCBsaXN0Lmxlbmd0aCwgKENsYXNzPFRbXT4pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXku
bmV3SW5zdGFuY2Uoa2xhc3MsIDApLmdldENsYXNzKCkpLCBpdGVtLCBrbGFzcyk7CgogICAgaWYg
KGxpc3QgIT0gbnVsbCkgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGxpc3QpOwogIH0g
ZmluYWxseSB7CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gc2V0cyB0aGUgZWxlbWVu
dCBmcm9tIHRoZSBnaXZlbiBhcnJheSBhdCB0aGUgZ2l2ZW4gaW5kZXggKHN1cHBvcnRzIHJ1Ynkt
c3R5bGUgcmV2ZXJzZSBpbmRleGluZykKcHVibGljIHN0YXRpYyA8VD4gVFtdIHB1dChUW10gYXJy
YXksIFQgaXRlbSwgU3RyaW5nIGluZGV4LCBDbGFzczxUPiBrbGFzcykgewogIHJldHVybiBwdXQo
YXJyYXksIGl0ZW0sIEludGVnZXIucGFyc2VJbnQoaW5kZXgpLCBrbGFzcyk7Cn0KCi8vIHNldHMg
dGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBw
b3J0cyBydWJ5LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBw
dXQoVFtdIGFycmF5LCBUIGl0ZW0sIGludCBpbmRleCwgQ2xhc3M8VD4ga2xhc3MpIHsKICBpZiAo
YXJyYXkgPT0gbnVsbCkgYXJyYXkgPSAoVFtdKWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0lu
c3RhbmNlKGtsYXNzLCAwKTsKCiAgLy8gc3VwcG9ydCByZXZlcnNlL3RhaWwgaW5kZXhpbmcKICBp
ZiAoaW5kZXggPCAwKSBpbmRleCArPSBhcnJheS5sZW5ndGg7CiAgaW50IGNhcGFjaXR5ID0gMDsK
ICBpZiAoaW5kZXggPCAwKSB7CiAgICBjYXBhY2l0eSA9IChpbmRleCAqIC0xKSArIGFycmF5Lmxl
bmd0aDsKICAgIGluZGV4ID0gMDsKICB9IGVsc2UgewogICAgY2FwYWNpdHkgPSBpbmRleCArIDE7
CiAgfQogIGlmIChjYXBhY2l0eSA+IGFycmF5Lmxlbmd0aCkgYXJyYXkgPSBqYXZhLnV0aWwuQXJy
YXlzLmNvcHlPZihhcnJheSwgY2FwYWNpdHkpOwoKICBhcnJheVtpbmRleF0gPSBpdGVtOwoKICBy
ZXR1cm4gYXJyYXk7Cn0KCi8vIHNldHMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkg
YXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcp
CnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgcHV0KElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFz
cykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0cnkg
ewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIk
bGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwog
ICAgU3RyaW5nIGluZGV4ID0gSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkaW5kZXgiKTsK
CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgcHV0KGxpc3QgPT0gbnVsbCA/IG51
bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihsaXN0LCBsaXN0Lmxlbmd0aCwgKENsYXNzPFRb
XT4pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uoa2xhc3MsIDApLmdldENsYXNz
KCkpLCBpdGVtLCBpbmRleCwga2xhc3MpKTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ry
b3koKTsKICB9Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCBhbGwgZWxlbWVudHMgZnJv
bSB0aGUgZ2l2ZW4gYXJyYXkgYnV0IGluIHJldmVyc2Ugb3JkZXIKcHVibGljIHN0YXRpYyA8VD4g
VFtdIHJldmVyc2UoVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVu
Z3RoIDw9IDEpIHJldHVybiBhcnJheTsKICAKICBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+IGxpc3Qg
PSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDxUPihqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdChhcnJh
eSkpOwogIGphdmEudXRpbC5Db2xsZWN0aW9ucy5yZXZlcnNlKGxpc3QpOwogIAogIHJldHVybiBs
aXN0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9CgovLyBy
ZXR1cm5zIGEgbmV3IGFycmF5IHdoaWNoIGlzIGEgc3Vic2V0IG9mIGVsZW1lbnRzIGZyb20gdGhl
IGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzbGljZShUW10gYXJyYXksIFN0cmlu
ZyBpbmRleCwgU3RyaW5nIGxlbmd0aCkgewogIHJldHVybiBzbGljZShhcnJheSwgaW5kZXggPT0g
bnVsbCA/IDAgOiBJbnRlZ2VyLnBhcnNlSW50KGluZGV4KSwgbGVuZ3RoID09IG51bGwgPyAoYXJy
YXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgpIDogSW50ZWdlci5wYXJzZUludChsZW5ndGgp
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIHN1YnNldCBvZiBlbGVtZW50
cyBmcm9tIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUW10gc2xpY2UoVFtdIGFy
cmF5LCBpbnQgaW5kZXgsIGludCBsZW5ndGgpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJh
eS5sZW5ndGggPT0gMCkgcmV0dXJuIGFycmF5OwogIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGxl
bmd0aAogIGlmIChsZW5ndGggPCAwKSBsZW5ndGggPSBhcnJheS5sZW5ndGggKyBsZW5ndGg7CiAg
Ly8gc3VwcG9ydCByZXZlcnNlL3RhaWwgaW5kZXhpbmcKICBpZiAoaW5kZXggPCAwKSBpbmRleCAr
PSBhcnJheS5sZW5ndGg7CiAgLy8gZG9uJ3Qgc2xpY2UgcGFzdCB0aGUgZW5kIG9mIHRoZSBhcnJh
eQogIGlmICgobGVuZ3RoICs9IGluZGV4KSA+IGFycmF5Lmxlbmd0aCkgbGVuZ3RoID0gYXJyYXku
bGVuZ3RoOwogIAogIHJldHVybiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZlJhbmdlKGFycmF5LCBp
bmRleCwgbGVuZ3RoKTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIGFsbCBlbGVtZW50
cyBzb3J0ZWQKcHVibGljIHN0YXRpYyA8VD4gVFtdIHNvcnQoVFtdIGFycmF5KSB7CiAgaWYgKGFy
cmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoIDw9IDEpIHJldHVybiBhcnJheTsKICAKICBUW10g
Y29weSA9IGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCBhcnJheS5sZW5ndGgpOwogIGph
dmEudXRpbC5BcnJheXMuc29ydChjb3B5KTsKICByZXR1cm4gY29weTsKfQoKLy8gcmV0dXJucyBh
IG5ldyBhcnJheSB3aXRoIGFsbCBkdXBsaWNhdGUgZWxlbWVudHMgcmVtb3ZlZApwdWJsaWMgc3Rh
dGljIDxUPiBUW10gdW5pcXVlKFRbXSBhcnJheSkgewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFy
cmF5Lmxlbmd0aCA8PSAxKSByZXR1cm4gYXJyYXk7CiAgCiAgamF2YS51dGlsLlNldDxUPiBzZXQg
PSBuZXcgamF2YS51dGlsLlRyZWVTZXQ8VD4oamF2YS51dGlsLkFycmF5cy5hc0xpc3QoYXJyYXkp
KTsKICAKICByZXR1cm4gc2V0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXks
IDApKTsKfQ==</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
