<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBhcHBlbmQoVFtdIGFycmF5LCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgLTEsIGtsYXNz
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNl
cnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgYXBwZW5kKElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBhcHBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6
IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilq
YXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSks
IGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNv
ciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIG51bGwgZWxlbWVudHMgcmVtb3Zl
ZApwdWJsaWMgc3RhdGljIDxUPiBUW10gY29tcGFjdChUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwoKICBmb3IgKGludCBpID0gMDsg
aSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkgbGlzdC5h
ZGQoYXJyYXlbaV0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggY29u
dGFpbnMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheXMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIGNvbmNhdGVuYXRlKFRbXSBhcnJheSwgVFtdIGl0ZW1zKSB7CiAgaWYgKGFycmF5
ID09IG51bGwpIHJldHVybiBpdGVtczsKICBpZiAoaXRlbXMgPT0gbnVsbCkgcmV0dXJuIGFycmF5
OwoKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
YXJyYXkubGVuZ3RoICsgaXRlbXMubGVuZ3RoKTsKICAKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMu
YWRkQWxsKGxpc3QsIGFycmF5KTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMuYWRkQWxsKGxpc3Qs
IGl0ZW1zKTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9m
KGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBu
b3QgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkaWZmZXJlbmNlKFRbXSB4LCBUW10g
eSkgewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4geDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZW1vdmVBbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZW1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBp
bmRleCBmcm9tIHRoZSBnaXZlbiBsaXN0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkcm9wKFRbXSBh
cnJheSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGRyb3AoYXJyYXksIEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpKTsKfQoKLy8gcmVtb3ZlcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXgg
ZnJvbSB0aGUgZ2l2ZW4gbGlzdApwdWJsaWMgc3RhdGljIDxUPiBUW10gZHJvcChUW10gYXJyYXks
IGludCBpbmRleCkgewogIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3Ro
OwogICAgaWYgKGluZGV4IDwgMCB8fCBhcnJheS5sZW5ndGggPD0gaW5kZXgpIHRocm93IG5ldyBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24oaW5kZXgpOwoKICAgIFRbXSBoZWFkID0gc2xp
Y2UoYXJyYXksIDAsIGluZGV4KTsKICAgIFRbXSB0YWlsID0gc2xpY2UoYXJyYXksIGluZGV4ICsg
MSwgYXJyYXkubGVuZ3RoIC0gaW5kZXgpOwoKICAgIGFycmF5ID0gY29uY2F0ZW5hdGUoaGVhZCwg
dGFpbCk7ICAgICAgCiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVu
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBlYWNoKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBtYXAoYXJyYXksIHNlcnZpY2Us
IHBpcGVsaW5lLCBpbnB1dCwgbnVsbCk7Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4g
YXJyYXlzIGFyZSBlcXVhbApwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGVxdWFsKFRbXSB4LCBU
W10geSkgewogIGJvb2xlYW4gcmVzdWx0ID0gdHJ1ZTsKCiAgaWYgKHggIT0gbnVsbCAmJiB5ICE9
IG51bGwpIHsKICAgIHJlc3VsdCA9ICh4Lmxlbmd0aCA9PSB5Lmxlbmd0aCk7CgogICAgaWYgKHJl
c3VsdCkgewogICAgICBmb3IgKGludCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHsKICAgICAg
ICByZXN1bHQgPSByZXN1bHQgJiYgdHVuZHJhLm9iamVjdC5lcXVhbCh4W2ldLCB5W2ldKTsKICAg
ICAgICBpZiAoIXJlc3VsdCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgcmVz
dWx0ID0gKHggPT0gbnVsbCAmJiB5ID09IG51bGwpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoK
Ly8gZmlsdGVycyB0aGUgZ2l2ZW4gYXJyYXkgYnkgZXZhbHVhdGluZyB0aGUgY29uZGl0aW9uYWwg
c3RhdGVtZW50IGFnYWluc3QgdGhlIAovLyBnaXZlbiBwaXBlbGluZSBhbmQgZWFjaCBpdGVtIGlu
IHRoZSBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUW10gZmlsdGVyKFRbXSBhcnJheSwgU3RyaW5n
IGNvbmRpdGlvbiwgSURhdGEgcGlwZWxpbmUpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBp
ZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBjb25kaXRpb24gPT0gbnVs
bCB8fCBjb25kaXRpb24uZXF1YWxzKCIiKSkgcmV0dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9
PSBudWxsKSBwaXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCiAgamF2YS51dGlsLkFy
cmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3Ro
KTsKCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgSURhdGFD
dXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1
cnNvciwgIiRpdGVtIiwgYXJyYXlbaV0pOwoKICAgIGlmICh0dW5kcmEuY29uZGl0aW9uLmV2YWx1
YXRlKGNvbmRpdGlvbiwgcGlwZWxpbmUpKSBsaXN0LmFkZChhcnJheVtpXSk7CiAgICAKICAgIElE
YXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGl0ZW0iKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQoKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAw
KSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIG9uZS1kaW1lbnNpb25h
bCByZWN1cnNpdmUgZmxhdHRlbmluZyBvZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8
VD4gVFtdIGZsYXR0ZW4oVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXku
bGVuZ3RoID09IDApIHJldHVybiBhcnJheTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0
ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgZm9yIChpbnQg
aSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldICE9IG51bGwg
JiYgYXJyYXlbaV0uZ2V0Q2xhc3MoKS5pc0FycmF5KCkpIHsKICAgICAgbGlzdC5lbnN1cmVDYXBh
Y2l0eShsaXN0LnNpemUoKSArICgoVFtdKWFycmF5W2ldKS5sZW5ndGgpOwogICAgICBsaXN0LmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdChmbGF0dGVuKChUW10pYXJyYXlbaV0pKSk7CiAg
ICB9IGVsc2UgewogICAgICBsaXN0LmFkZChhcnJheVtpXSk7CiAgICB9CiAgfQogIAogIHJldHVy
biBsaXN0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIFN0cmluZyBpbmRleCwgU3RyaW5nIGl0ZXJhdGlvbikgewog
IGludCBpID0gMDsKICBpZiAoaW5kZXggIT0gbnVsbCkgewogICAgaSA9IEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpOwogIH0gZWxzZSB7CiAgICBpID0gSW50ZWdlci5wYXJzZUludChpdGVyYXRpb24p
IC0gMTsKICB9CiAgcmV0dXJuIGdldChhcnJheSwgaSk7Cn0KCi8vIHJldHVybnMgdGhlIGVsZW1l
bnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5
LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFQgZ2V0KFRbXSBhcnJh
eSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGdldChhcnJheSwgaW5kZXgsIG51bGwpOwp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIGludCBpbmRleCkgewogIFQgaXRlbSA9IG51bGw7CiAgCiAg
aWYgKGFycmF5ICE9IG51bGwpIHsKICAgIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5n
CiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCArPSBhcnJheS5sZW5ndGg7CiAgICAKICAgIGl0ZW0g
PSBhcnJheVtpbmRleF07CiAgfQogIAogIHJldHVybiBpdGVtOwp9CgovLyByZXNpemVzIHRoZSBn
aXZlbiBhcnJheSAob3IgaW5zdGFudGlhdGVzIGEgbmV3IGFycmF5LCBpZiBudWxsKSB0byB0aGUg
ZGVzaXJlZCBsZW5ndGgsIAovLyBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBz
dGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0sIENs
YXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZhLmxh
bmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CiAgcmV0dXJuIHJlc2l6ZShh
cnJheSwgbmV3TGVuZ3RoLCBpdGVtKTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8g
dGhlIGRlc2lyZWQgbGVuZ3RoLCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBz
dGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0pIHsK
ICBpZiAobmV3TGVuZ3RoIDwgMCkgdGhyb3cgbmV3IE5lZ2F0aXZlQXJyYXlTaXplRXhjZXB0aW9u
KCk7CgogIGludCBvcmlnaW5hbExlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICBpZiAobmV3TGVuZ3Ro
ID09IG9yaWdpbmFsTGVuZ3RoKSByZXR1cm4gYXJyYXk7CgogIGFycmF5ID0gamF2YS51dGlsLkFy
cmF5cy5jb3B5T2YoYXJyYXksIG5ld0xlbmd0aCk7CiAgaWYgKGl0ZW0gIT0gbnVsbCkgewogICAg
Zm9yIChpbnQgaSA9IG9yaWdpbmFsTGVuZ3RoOyBpIDwgbmV3TGVuZ3RoOyBpKyspIGFycmF5W2ld
ID0gaXRlbTsKICB9CiAgcmV0dXJuIGFycmF5Owp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJh
eSB0byB0aGUgZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGggbnVsbHMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIHJlc2l6ZShUW10gYXJyYXksIGludCBuZXdMZW5ndGgpIHsKICByZXR1cm4gcmVz
aXplKGFycmF5LCBuZXdMZW5ndGgsIG51bGwpOwp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJh
eSB0byB0aGUgZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGggdGhlIGdpdmVuIGl0ZW0KcHVi
bGljIHN0YXRpYyA8VD4gdm9pZCByZXNpemUoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNz
KSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7
CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRs
aXN0Iik7CiAgICBpbnQgbGVuZ3RoID0gSW50ZWdlci5wYXJzZUludChJRGF0YVV0aWwuZ2V0U3Ry
aW5nKGN1cnNvciwgIiRsZW5ndGgiKSk7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1
cnNvciwgIiRpdGVtIik7CgogICAgbGlzdCA9IHJlc2l6ZShsaXN0LCBsZW5ndGgsIGl0ZW0sIGts
YXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0
IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyBn
cm93cyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXJyYXkgYnkgdGhlIGdpdmVuIGNvdW50LCBhbmQg
cGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBncm93KFRbXSBh
cnJheSwgaW50IGNvdW50LCBUIGl0ZW0sIENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIHJlc2l6
ZShhcnJheSwgYXJyYXkgPT0gbnVsbCA/IGNvdW50IDogYXJyYXkubGVuZ3RoICsgY291bnQsIGl0
ZW0sIGtsYXNzKTsKfQoKLy8gZ3Jvd3MgdGhlIGdpdmVuIGFycmF5IHRvIHRoZSBkZXNpcmVkIGxl
bmd0aCwgYW5kIHBhZHMgd2l0aCB0aGUgZ2l2ZW4gaXRlbQpwdWJsaWMgc3RhdGljIDxUPiB2b2lk
IGdyb3coSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vy
c29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10p
SURhdGFVdGlsLmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBpbnQgY291bnQg
PSBJbnRlZ2VyLnBhcnNlSW50KElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGNvdW50Iikp
OwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAgIGxp
c3QgPSBncm93KGxpc3QsIGNvdW50LCBpdGVtLCBrbGFzcyk7CgogICAgaWYgKGxpc3QgIT0gbnVs
bCkgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGxpc3QpOwogIH0gZmluYWxseSB7CiAg
ICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gc2hyaW5rcyB0aGUgc2l6ZSBvZiB0aGUgZ2l2
ZW4gYXJyYXkgYnkgdGhlIGdpdmVuIGNvdW50CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzaHJpbmso
VFtdIGFycmF5LCBpbnQgY291bnQpIHsKICBpZiAoYXJyYXkgIT0gbnVsbCkgewogICAgaW50IGxl
bmd0aCA9IGFycmF5Lmxlbmd0aCAtIGNvdW50OwogICAgYXJyYXkgPSByZXNpemUoYXJyYXksIGxl
bmd0aCA8IDAgPyAwIDogbGVuZ3RoKTsKICB9CiAgcmV0dXJuIGFycmF5Owp9CgovLyByZXR1cm5z
IHRydWUgaWYgdGhlIGdpdmVuIGl0ZW0gaXMgZm91bmQgaW4gdGhlIGdpdmVuIGFycmF5CnB1Ymxp
YyBzdGF0aWMgPFQ+IGJvb2xlYW4gaW5jbHVkZShUW10gYXJyYXksIFQgaXRlbSkgewogIGJvb2xl
YW4gZm91bmQgPSBmYWxzZTsKCiAgaWYgKGFycmF5ICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkg
PSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgZm91bmQgPSB0dW5kcmEub2JqZWN0
LmVxdWFsKGFycmF5W2ldLCBpdGVtKTsKICAgICAgaWYgKGZvdW5kKSBicmVhazsKICAgIH0KICB9
CgogIHJldHVybiBmb3VuZDsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZl
biBpdGVtIGluc2VydGVkIGF0IHRoZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiBUW10g
aW5zZXJ0KFRbXSBhcnJheSwgVCBpdGVtLCBTdHJpbmcgaW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7
CiAgaWYgKGluZGV4ID09IG51bGwpIGluZGV4ID0gIi0xIjsKICByZXR1cm4gaW5zZXJ0KGFycmF5
LCBpdGVtLCBJbnRlZ2VyLnBhcnNlSW50KGluZGV4KSwga2xhc3MpOwp9CgovLyByZXR1cm5zIGEg
bmV3IGFycmF5IHdpdGggdGhlIGdpdmVuIGl0ZW0gaW5zZXJ0ZWQgYXQgdGhlIGdpdmVuIGluZGV4
CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBpbnNlcnQoVFtdIGFycmF5LCBUIGl0ZW0sIGludCBpbmRl
eCwgQ2xhc3M8VD4ga2xhc3MpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCkgYXJyYXkgPSAoVFtdKWph
dmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKTsKCiAgamF2YS51dGls
LkFycmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oamF2YS51dGls
LkFycmF5cy5hc0xpc3QoYXJyYXkpKTsKCiAgaW50IGNhcGFjaXR5ID0gMDsKICBpZiAoaW5kZXgg
PCAwKSBpbmRleCArPSBsaXN0LnNpemUoKSArIDE7CiAgaWYgKGluZGV4IDwgMCkgewogICAgY2Fw
YWNpdHkgPSAoaW5kZXggKiAtMSkgKyBsaXN0LnNpemUoKTsKICAgIGluZGV4ID0gMDsKICB9IGVs
c2UgewogICAgY2FwYWNpdHkgPSBpbmRleDsKICB9CgogIGxpc3QuZW5zdXJlQ2FwYWNpdHkoY2Fw
YWNpdHkpOwogIGlmIChjYXBhY2l0eSA+PSBsaXN0LnNpemUoKSkgewogICAgLy8gZmlsbCB0aGUg
bGlzdCB3aXRoIG51bGxzIGlmIGl0IG5lZWRzIHRvIGJlIGV4dGVuZGVkCiAgICBmb3IgKGludCBp
ID0gbGlzdC5zaXplKCk7IGkgPCBjYXBhY2l0eTsgaSsrKSB7CiAgICAgIGxpc3QuYWRkKGksIG51
bGwpOwogICAgfQogIH0KICBsaXN0LmFkZChpbmRleCwgaXRlbSk7CiAgCiAgcmV0dXJuIGxpc3Qu
dG9BcnJheShhcnJheSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXksIHdpdGggdGhlIGdpdmVu
IGVsZW1lbnQgaW5zZXJ0ZWQgYXQgdGhlIGdpdmVuIGluZGV4CnB1YmxpYyBzdGF0aWMgPFQ+IHZv
aWQgaW5zZXJ0KElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29y
IGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAo
VFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVt
ID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwogICAgU3RyaW5nIGluZGV4ID0g
SURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkaW5kZXgiKTsKCiAgICBJRGF0YVV0aWwucHV0
KGN1cnNvciwgIiRsaXN0IiwgaW5zZXJ0KGxpc3QgPT0gbnVsbCA/IG51bGwgOiBqYXZhLnV0aWwu
QXJyYXlzLmNvcHlPZihsaXN0LCBsaXN0Lmxlbmd0aCwgKENsYXNzPFRbXT4pamF2YS5sYW5nLnJl
ZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uoa2xhc3MsIDApLmdldENsYXNzKCkpLCBpdGVtLCBpbmRl
eCwga2xhc3MpKTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ryb3koKTsKICB9Cn0KCi8v
IHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBhbHNvIGluIHkKcHVibGljIHN0
YXRpYyA8VD4gVFtdIGludGVyc2VjdGlvbihUW10geCwgVFtdIHkpIHsKICBpZiAoeCA9PSBudWxs
IHx8IHkgPT0gbnVsbCkgcmV0dXJuIG51bGw7CgogIGphdmEudXRpbC5MaXN0PFQ+IGQgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPih4Lmxlbmd0aCk7CiAgZC5hZGRBbGwoamF2YS51dGlsLkFy
cmF5cy5hc0xpc3QoeCkpOwogIGQucmV0YWluQWxsKGphdmEudXRpbC5BcnJheXMuYXNMaXN0KHkp
KTsKICAKICByZXR1cm4gZC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKHgsIDApKTsK
fQoKLy8gcmV0dXJucyBhIHN0cmluZyBjcmVhdGVkIGJ5IGNvbmNhdGVuYXRpbmcgZWFjaCBlbGVt
ZW50IG9mIHRoZSBnaXZlbiBhcnJheSwgc2VwYXJhdGVkIGJ5IHRoZSBnaXZlbiBzZXBhcmF0b3Ig
c3RyaW5nCnB1YmxpYyBzdGF0aWMgPFQ+IFN0cmluZyBqb2luKFRbXSBhcnJheSwgU3RyaW5nIHNl
cGFyYXRvcikgewogIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7
CiAgCiAgaWYgKGFycmF5ICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXku
bGVuZ3RoOyBpKyspIHsKICAgICAgVCB2YWx1ZSA9IGFycmF5W2ldOwogICAgICBpZiAodmFsdWUg
IT0gbnVsbCkgYnVpbGRlci5hcHBlbmQodmFsdWUudG9TdHJpbmcoKSk7CiAgICAgIGlmIChzZXBh
cmF0b3IgIT0gbnVsbCAmJiBpIDwgYXJyYXkubGVuZ3RoIC0gMSkgYnVpbGRlci5hcHBlbmQoc2Vw
YXJhdG9yKTsKICAgIH0KICB9CiAgCiAgcmV0dXJuIGJ1aWxkZXIudG9TdHJpbmcoKTsKfQoKLy8g
cmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBp
bnQgbGVuZ3RoKFRbXSBhcnJheSkgewogIHJldHVybiAoYXJyYXkgPT0gbnVsbD8gMCA6IGFycmF5
Lmxlbmd0aCk7Cn0KCi8vIG1hcHMgdGhlIGdpdmVuIGFycmF5IHRvIGEgbmV3IGFycmF5IGJ5IGlu
dm9raW5nIGEgc2VydmljZSBmb3IgZWFjaCBlbGVtZW50IGFuZCBjb2xsZWN0aW5nIHRoZSBvdXRw
dXQKcHVibGljIHN0YXRpYyA8VD4gdm9pZCBtYXAoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGts
YXNzKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlw
ZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBPYmplY3RbXSBsaXN0ID0gSURhdGFVdGls
LmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBTdHJpbmcgc2VydmljZSA9IElE
YXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJHNlcnZpY2UiKTsKICAgIElEYXRhIHNjb3BlID0g
SURhdGFVdGlsLmdldElEYXRhKGN1cnNvciwgIiRwaXBlbGluZSIpOwogICAgU3RyaW5nIGlucHV0
ID0gSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkaXRlbS5pbnB1dCIpOwogICAgU3RyaW5n
IG91dHB1dCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGl0ZW0ub3V0cHV0Iik7Cgog
ICAgYm9vbGVhbiBzY29wZWQgPSBzY29wZSAhPSBudWxsOwoKICAgIC8vIGludm9rZSB0aGUgc2Vy
dmljZSBmb3IgZWFjaCBpdGVtIGluIHRoZSBsaXN0LCBwYXNzaW5nICRpdGVtIGFuZCAkaW5kZXgg
dmFyaWFibGVzIG9uIGVhY2ggaW52b2NhdGlvbgogICAgLy8gYW5kIGNvbGxlY3QgdGhlIHJldHVy
bmVkICRpdGVtJ3MgaW50byBhIG5ldyBsaXN0CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRs
aXN0IiwgbWFwKGxpc3QgPT0gbnVsbCA/IG51bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihs
aXN0LCBsaXN0Lmxlbmd0aCwgKENsYXNzPFRbXT4pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3
SW5zdGFuY2Uoa2xhc3MsIDApLmdldENsYXNzKCkpLCBzZXJ2aWNlLCBzY29wZWQgPyBzY29wZSA6
IHBpcGVsaW5lLCBpbnB1dCwgb3V0cHV0KSk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0
cm95KCk7CiAgfQp9CgovLyBtYXBzIHRoZSBnaXZlbiBhcnJheSB0byBhIG5ldyBhcnJheSBieSBp
bnZva2luZyBhIHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBhbmQgY29sbGVjdGluZyB0aGUgb3V0
cHV0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBtYXAoVFtdIGFycmF5LCBTdHJpbmcgc2VydmljZSwg
SURhdGEgcGlwZWxpbmUsIFN0cmluZyBpbnB1dCwgU3RyaW5nIG91dHB1dCkgdGhyb3dzIFNlcnZp
Y2VFeGNlcHRpb24gewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwIHx8
IHNlcnZpY2UgPT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9PSBudWxsKSBw
aXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKICBpZiAoaW5wdXQgPT0gbnVsbCkgaW5w
dXQgPSAiJGl0ZW0iOwogIGlmIChvdXRwdXQgPT0gbnVsbCkgb3V0cHV0ID0gaW5wdXQ7CiAgIAog
IGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJh
eS5sZW5ndGgpOwogIElEYXRhQ3Vyc29yIGN1cnNvciA9IG51bGw7CiAgCiAgZm9yIChpbnQgaSA9
IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgLy8gYWRkICRpdGVtLCAkaW5kZXgsICRp
dGVyYXRpb24gYW5kICRsZW5ndGggdmFyaWFibGVzIHRvIHRoZSBpbnB1dCBwaXBlbGluZQogICAg
Y3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwg
aW5wdXQsIGFycmF5W2ldKTsKICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGluZGV4IiwgIiIg
KyBpKTsKICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGl0ZXJhdGlvbiIsICIiICsgKGkgKyAx
KSk7CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsZW5ndGgiLCAiIiArIGFycmF5Lmxlbmd0
aCk7CiAgICBjdXJzb3IuZGVzdHJveSgpOwoKICAgIC8vIGludm9rZSB0aGUgaXRlcmF0b3Igc2Vy
dmljZQogICAgcGlwZWxpbmUgPSB0dW5kcmEuc2VydmljZS5pbnZva2Uoc2VydmljZSwgcGlwZWxp
bmUpOwoKICAgIC8vIGNsZWFuIHVwIHRoZSBpbnB1dCBwaXBlbGluZQogICAgY3Vyc29yID0gcGlw
ZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwg
b3V0cHV0KTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCBpbnB1dCk7CiAgICBJRGF0YVV0
aWwucmVtb3ZlKGN1cnNvciwgb3V0cHV0KTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAi
JGluZGV4Iik7CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNvciwgIiRpdGVyYXRpb24iKTsKICAg
IElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGxlbmd0aCIpOwogICAgY3Vyc29yLmRlc3Ryb3ko
KTsKICAgIAogICAgLy8gY29sbGVjdCB0aGUgbWFwcGVkIGl0ZW1zCiAgICBsaXN0LmFkZChpdGVt
KTsKICB9CiAgCiAgcmV0dXJuIGxpc3QudG9BcnJheShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihh
cnJheSwgMCkpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYSBuZXcgZWxlbWVudCBp
bnNlcnRlZCBhdCB0aGUgYmVnaW5uaW5nCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBwcmVwZW5kKFRb
XSBhcnJheSwgVCBpdGVtLCBDbGFzczxUPiBrbGFzcykgewogIHJldHVybiBpbnNlcnQoYXJyYXks
IGl0ZW0sIDAsIGtsYXNzKTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2
ZW4gZWxlbWVudCBpbnNlcnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgcHJl
cGVuZChJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJz
b3IgPSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJ
RGF0YVV0aWwuZ2V0T2JqZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChU
KUlEYXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKCiAgICBsaXN0ID0gcHJlcGVuZChsaXN0
ID09IG51bGwgPyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5n
dGgsIChDbGFzczxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNz
LCAwKS5nZXRDbGFzcygpKSwgaXRlbSwga2xhc3MpOwoKICAgIGlmIChsaXN0ICE9IG51bGwpIElE
YXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBsaXN0KTsKICB9IGZpbmFsbHkgewogICAgY3Vy
c29yLmRlc3Ryb3koKTsKICB9Cn0KCi8vIHNldHMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4g
YXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5LXN0eWxlIHJldmVyc2UgaW5k
ZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBwdXQoVFtdIGFycmF5LCBUIGl0ZW0sIFN0cmlu
ZyBpbmRleCwgQ2xhc3M8VD4ga2xhc3MpIHsKICByZXR1cm4gcHV0KGFycmF5LCBpdGVtLCBJbnRl
Z2VyLnBhcnNlSW50KGluZGV4KSwga2xhc3MpOwp9CgovLyBzZXRzIHRoZSBlbGVtZW50IGZyb20g
dGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSBy
ZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxUPiBUW10gcHV0KFRbXSBhcnJheSwgVCBp
dGVtLCBpbnQgaW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFy
cmF5ID0gKFRbXSlqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7
CgogIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5nCiAgaWYgKGluZGV4IDwgMCkgaW5k
ZXggKz0gYXJyYXkubGVuZ3RoOwogIGludCBjYXBhY2l0eSA9IDA7CiAgaWYgKGluZGV4IDwgMCkg
ewogICAgY2FwYWNpdHkgPSAoaW5kZXggKiAtMSkgKyBhcnJheS5sZW5ndGg7CiAgICBpbmRleCA9
IDA7CiAgfSBlbHNlIHsKICAgIGNhcGFjaXR5ID0gaW5kZXggKyAxOwogIH0KICBpZiAoY2FwYWNp
dHkgPiBhcnJheS5sZW5ndGgpIGFycmF5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXks
IGNhcGFjaXR5KTsKCiAgYXJyYXlbaW5kZXhdID0gaXRlbTsKCiAgcmV0dXJuIGFycmF5Owp9Cgov
LyBzZXRzIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRl
eCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxU
PiB2b2lkIHB1dChJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNv
ciBjdXJzb3IgPSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0g
KFRbXSlJRGF0YVV0aWwuZ2V0T2JqZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRl
bSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKICAgIFN0cmluZyBpbmRleCA9
IElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGluZGV4Iik7CgogICAgSURhdGFVdGlsLnB1
dChjdXJzb3IsICIkbGlzdCIsIHB1dChsaXN0ID09IG51bGwgPyBudWxsIDogamF2YS51dGlsLkFy
cmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5ndGgsIChDbGFzczxUW10+KWphdmEubGFuZy5yZWZs
ZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgaXRlbSwgaW5kZXgs
IGtsYXNzKSk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyBy
ZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIGVsZW1lbnRzIGZyb20gdGhlIGdpdmVuIGFycmF5
IGJ1dCBpbiByZXZlcnNlIG9yZGVyCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSByZXZlcnNlKFRbXSBh
cnJheSkgewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8PSAxKSByZXR1cm4g
YXJyYXk7CiAgCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5B
cnJheUxpc3Q8VD4oamF2YS51dGlsLkFycmF5cy5hc0xpc3QoYXJyYXkpKTsKICBqYXZhLnV0aWwu
Q29sbGVjdGlvbnMucmV2ZXJzZShsaXN0KTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEu
dXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAwKSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJh
eSB3aGljaCBpcyBhIHN1YnNldCBvZiBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheQpwdWJs
aWMgc3RhdGljIDxUPiBUW10gc2xpY2UoVFtdIGFycmF5LCBTdHJpbmcgaW5kZXgsIFN0cmluZyBs
ZW5ndGgpIHsKICByZXR1cm4gc2xpY2UoYXJyYXksIGluZGV4ID09IG51bGwgPyAwIDogSW50ZWdl
ci5wYXJzZUludChpbmRleCksIGxlbmd0aCA9PSBudWxsID8gKGFycmF5ID09IG51bGwgPyAwIDog
YXJyYXkubGVuZ3RoKSA6IEludGVnZXIucGFyc2VJbnQobGVuZ3RoKSk7Cn0KCi8vIHJldHVybnMg
YSBuZXcgYXJyYXkgd2hpY2ggaXMgYSBzdWJzZXQgb2YgZWxlbWVudHMgZnJvbSB0aGUgZ2l2ZW4g
YXJyYXkKcHVibGljIHN0YXRpYyA8VD4gVFtdIHNsaWNlKFRbXSBhcnJheSwgaW50IGluZGV4LCBp
bnQgbGVuZ3RoKSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09IDApIHJl
dHVybiBhcnJheTsKICAvLyBzdXBwb3J0IHJldmVyc2UvdGFpbCBsZW5ndGgKICBpZiAobGVuZ3Ro
IDwgMCkgbGVuZ3RoID0gYXJyYXkubGVuZ3RoICsgbGVuZ3RoOwogIC8vIHN1cHBvcnQgcmV2ZXJz
ZS90YWlsIGluZGV4aW5nCiAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3RoOwog
IC8vIGRvbid0IHNsaWNlIHBhc3QgdGhlIGVuZCBvZiB0aGUgYXJyYXkKICBpZiAoKGxlbmd0aCAr
PSBpbmRleCkgPiBhcnJheS5sZW5ndGgpIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAKICByZXR1
cm4gamF2YS51dGlsLkFycmF5cy5jb3B5T2ZSYW5nZShhcnJheSwgaW5kZXgsIGxlbmd0aCk7Cn0K
Ci8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCBhbGwgZWxlbWVudHMgc29ydGVkCnB1YmxpYyBz
dGF0aWMgPFQ+IFRbXSBzb3J0KFRbXSBhcnJheSkgewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFy
cmF5Lmxlbmd0aCA8PSAxKSByZXR1cm4gYXJyYXk7CiAgCiAgVFtdIGNvcHkgPSBqYXZhLnV0aWwu
QXJyYXlzLmNvcHlPZihhcnJheSwgYXJyYXkubGVuZ3RoKTsKICBqYXZhLnV0aWwuQXJyYXlzLnNv
cnQoY29weSk7CiAgcmV0dXJuIGNvcHk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCBh
bGwgZHVwbGljYXRlIGVsZW1lbnRzIHJlbW92ZWQKcHVibGljIHN0YXRpYyA8VD4gVFtdIHVuaXF1
ZShUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPD0gMSkg
cmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5TZXQ8VD4gc2V0ID0gbmV3IGphdmEudXRpbC5U
cmVlU2V0PFQ+KGphdmEudXRpbC5BcnJheXMuYXNMaXN0KGFycmF5KSk7CiAgCiAgcmV0dXJuIHNl
dC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAwKSk7Cn0=</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
