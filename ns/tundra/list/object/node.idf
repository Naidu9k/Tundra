<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBhcHBlbmQoVFtdIGFycmF5LCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgLTEsIGtsYXNz
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNl
cnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgYXBwZW5kKElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBhcHBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6
IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilq
YXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSks
IGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNv
ciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIG51bGwgZWxlbWVudHMgcmVtb3Zl
ZApwdWJsaWMgc3RhdGljIDxUPiBUW10gY29tcGFjdChUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwoKICBmb3IgKGludCBpID0gMDsg
aSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkgbGlzdC5h
ZGQoYXJyYXlbaV0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggY29u
dGFpbnMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheXMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIGNvbmNhdGVuYXRlKFRbXSBhcnJheSwgVFtdIGl0ZW1zKSB7CiAgaWYgKGFycmF5
ID09IG51bGwpIHJldHVybiBpdGVtczsKICBpZiAoaXRlbXMgPT0gbnVsbCkgcmV0dXJuIGFycmF5
OwoKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
YXJyYXkubGVuZ3RoICsgaXRlbXMubGVuZ3RoKTsKICAKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMu
YWRkQWxsKGxpc3QsIGFycmF5KTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMuYWRkQWxsKGxpc3Qs
IGl0ZW1zKTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9m
KGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBu
b3QgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkaWZmZXJlbmNlKFRbXSB4LCBUW10g
eSkgewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4geDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZW1vdmVBbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZW1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBp
bmRleCBmcm9tIHRoZSBnaXZlbiBsaXN0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkcm9wKFRbXSBh
cnJheSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGRyb3AoYXJyYXksIEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpKTsKfQoKLy8gcmVtb3ZlcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXgg
ZnJvbSB0aGUgZ2l2ZW4gbGlzdApwdWJsaWMgc3RhdGljIDxUPiBUW10gZHJvcChUW10gYXJyYXks
IGludCBpbmRleCkgewogIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3Ro
OwogICAgaWYgKGluZGV4IDwgMCB8fCBhcnJheS5sZW5ndGggPD0gaW5kZXgpIHRocm93IG5ldyBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24oaW5kZXgpOwoKICAgIFRbXSBoZWFkID0gc2xp
Y2UoYXJyYXksIDAsIGluZGV4KTsKICAgIFRbXSB0YWlsID0gc2xpY2UoYXJyYXksIGluZGV4ICsg
MSwgYXJyYXkubGVuZ3RoIC0gaW5kZXgpOwoKICAgIGFycmF5ID0gY29uY2F0ZW5hdGUoaGVhZCwg
dGFpbCk7ICAgICAgCiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVu
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBlYWNoKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBtYXAoYXJyYXksIHNlcnZpY2Us
IHBpcGVsaW5lLCBpbnB1dCwgbnVsbCk7Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4g
YXJyYXlzIGFyZSBlcXVhbApwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGVxdWFsKFRbXSB4LCBU
W10geSkgewogIGJvb2xlYW4gcmVzdWx0ID0gdHJ1ZTsKCiAgaWYgKHggIT0gbnVsbCAmJiB5ICE9
IG51bGwpIHsKICAgIHJlc3VsdCA9ICh4Lmxlbmd0aCA9PSB5Lmxlbmd0aCk7CgogICAgaWYgKHJl
c3VsdCkgewogICAgICBmb3IgKGludCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHsKICAgICAg
ICByZXN1bHQgPSByZXN1bHQgJiYgdHVuZHJhLm9iamVjdC5lcXVhbCh4W2ldLCB5W2ldKTsKICAg
ICAgICBpZiAoIXJlc3VsdCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgcmVz
dWx0ID0gKHggPT0gbnVsbCAmJiB5ID09IG51bGwpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoK
Ly8gZmlsdGVycyB0aGUgZ2l2ZW4gYXJyYXkgYnkgZXZhbHVhdGluZyB0aGUgY29uZGl0aW9uYWwg
c3RhdGVtZW50IGFnYWluc3QgdGhlIAovLyBnaXZlbiBwaXBlbGluZSBhbmQgZWFjaCBpdGVtIGlu
IHRoZSBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUW10gZmlsdGVyKFRbXSBhcnJheSwgU3RyaW5n
IGNvbmRpdGlvbiwgSURhdGEgcGlwZWxpbmUpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBp
ZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBjb25kaXRpb24gPT0gbnVs
bCB8fCBjb25kaXRpb24uZXF1YWxzKCIiKSkgcmV0dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9
PSBudWxsKSBwaXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCiAgamF2YS51dGlsLkFy
cmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3Ro
KTsKCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgSURhdGFD
dXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1
cnNvciwgIiRpdGVtIiwgYXJyYXlbaV0pOwoKICAgIGlmICh0dW5kcmEuY29uZGl0aW9uLmV2YWx1
YXRlKGNvbmRpdGlvbiwgcGlwZWxpbmUpKSBsaXN0LmFkZChhcnJheVtpXSk7CiAgICAKICAgIElE
YXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGl0ZW0iKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQoKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAw
KSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIG9uZS1kaW1lbnNpb25h
bCByZWN1cnNpdmUgZmxhdHRlbmluZyBvZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8
VD4gVFtdIGZsYXR0ZW4oVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXku
bGVuZ3RoID09IDApIHJldHVybiBhcnJheTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0
ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgZm9yIChpbnQg
aSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldICE9IG51bGwg
JiYgYXJyYXlbaV0uZ2V0Q2xhc3MoKS5pc0FycmF5KCkpIHsKICAgICAgbGlzdC5lbnN1cmVDYXBh
Y2l0eShsaXN0LnNpemUoKSArICgoVFtdKWFycmF5W2ldKS5sZW5ndGgpOwogICAgICBsaXN0LmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdChmbGF0dGVuKChUW10pYXJyYXlbaV0pKSk7CiAg
ICB9IGVsc2UgewogICAgICBsaXN0LmFkZChhcnJheVtpXSk7CiAgICB9CiAgfQogIAogIHJldHVy
biBsaXN0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIFN0cmluZyBpbmRleCwgU3RyaW5nIGl0ZXJhdGlvbikgewog
IGludCBpID0gMDsKICBpZiAoaW5kZXggIT0gbnVsbCkgewogICAgaSA9IEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpOwogIH0gZWxzZSB7CiAgICBpID0gSW50ZWdlci5wYXJzZUludChpdGVyYXRpb24p
IC0gMTsKICB9CiAgcmV0dXJuIGdldChhcnJheSwgaSk7Cn0KCi8vIHJldHVybnMgdGhlIGVsZW1l
bnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5
LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFQgZ2V0KFRbXSBhcnJh
eSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGdldChhcnJheSwgaW5kZXgsIG51bGwpOwp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIGludCBpbmRleCkgewogIFQgaXRlbSA9IG51bGw7CiAgCiAg
aWYgKGFycmF5ICE9IG51bGwpIHsKICAgIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5n
CiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCArPSBhcnJheS5sZW5ndGg7CiAgICAKICAgIGl0ZW0g
PSBhcnJheVtpbmRleF07CiAgfQogIAogIHJldHVybiBpdGVtOwp9CgovLyByZXR1cm5zIHRoZSBm
aXJzdCBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMgPFQ+IFQgZmly
c3QoVFtdIGFycmF5KSB7CiAgcmV0dXJuIGdldChhcnJheSwgMCk7Cn0KCi8vIHJlc2l6ZXMgdGhl
IGdpdmVuIGFycmF5IChvciBpbnN0YW50aWF0ZXMgYSBuZXcgYXJyYXksIGlmIG51bGwpIHRvIHRo
ZSBkZXNpcmVkIGxlbmd0aCwgCi8vIGFuZCBwYWRzIHdpdGggdGhlIGdpdmVuIGl0ZW0KcHVibGlj
IHN0YXRpYyA8VD4gVFtdIHJlc2l6ZShUW10gYXJyYXksIGludCBuZXdMZW5ndGgsIFQgaXRlbSwg
Q2xhc3M8VD4ga2xhc3MpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCkgYXJyYXkgPSAoVFtdKWphdmEu
bGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKTsKICByZXR1cm4gcmVzaXpl
KGFycmF5LCBuZXdMZW5ndGgsIGl0ZW0pOwp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJheSB0
byB0aGUgZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGggdGhlIGdpdmVuIGl0ZW0KcHVibGlj
IHN0YXRpYyA8VD4gVFtdIHJlc2l6ZShUW10gYXJyYXksIGludCBuZXdMZW5ndGgsIFQgaXRlbSkg
ewogIGlmIChuZXdMZW5ndGggPCAwKSBuZXdMZW5ndGggPSBhcnJheS5sZW5ndGggKyBuZXdMZW5n
dGg7CiAgaWYgKG5ld0xlbmd0aCA8IDApIG5ld0xlbmd0aCA9IDA7CgogIGludCBvcmlnaW5hbExl
bmd0aCA9IGFycmF5Lmxlbmd0aDsKICBpZiAobmV3TGVuZ3RoID09IG9yaWdpbmFsTGVuZ3RoKSBy
ZXR1cm4gYXJyYXk7CgogIGFycmF5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIG5l
d0xlbmd0aCk7CiAgaWYgKGl0ZW0gIT0gbnVsbCkgewogICAgZm9yIChpbnQgaSA9IG9yaWdpbmFs
TGVuZ3RoOyBpIDwgbmV3TGVuZ3RoOyBpKyspIGFycmF5W2ldID0gaXRlbTsKICB9CiAgcmV0dXJu
IGFycmF5Owp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJheSB0byB0aGUgZGVzaXJlZCBsZW5n
dGgsIGFuZCBwYWRzIHdpdGggbnVsbHMKcHVibGljIHN0YXRpYyA8VD4gVFtdIHJlc2l6ZShUW10g
YXJyYXksIGludCBuZXdMZW5ndGgpIHsKICByZXR1cm4gcmVzaXplKGFycmF5LCBuZXdMZW5ndGgs
IG51bGwpOwp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJheSB0byB0aGUgZGVzaXJlZCBsZW5n
dGgsIGFuZCBwYWRzIHdpdGggdGhlIGdpdmVuIGl0ZW0KcHVibGljIHN0YXRpYyA8VD4gdm9pZCBy
ZXNpemUoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vy
c29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10p
SURhdGFVdGlsLmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBpbnQgbGVuZ3Ro
ID0gSW50ZWdlci5wYXJzZUludChJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1cnNvciwgIiRsZW5ndGgi
KSk7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwgIiRpdGVtIik7CgogICAg
bGlzdCA9IHJlc2l6ZShsaXN0LCBsZW5ndGgsIGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAh
PSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5
IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyBncm93cyB0aGUgc2l6ZSBvZiB0aGUg
Z2l2ZW4gYXJyYXkgYnkgdGhlIGdpdmVuIGNvdW50LCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBp
dGVtCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBncm93KFRbXSBhcnJheSwgaW50IGNvdW50LCBUIGl0
ZW0sIENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIHJlc2l6ZShhcnJheSwgYXJyYXkgPT0gbnVs
bCA/IGNvdW50IDogYXJyYXkubGVuZ3RoICsgY291bnQsIGl0ZW0sIGtsYXNzKTsKfQoKLy8gZ3Jv
d3MgdGhlIGdpdmVuIGFycmF5IHRvIHRoZSBkZXNpcmVkIGxlbmd0aCwgYW5kIHBhZHMgd2l0aCB0
aGUgZ2l2ZW4gaXRlbQpwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGdyb3coSURhdGEgcGlwZWxpbmUs
IENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vy
c29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVjdEFy
cmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBpbnQgY291bnQgPSBJbnRlZ2VyLnBhcnNlSW50KElE
YXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGNvdW50IikpOwogICAgVCBpdGVtID0gKFQpSURh
dGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBncm93KGxpc3QsIGNvdW50
LCBpdGVtLCBrbGFzcyk7CgogICAgaWYgKGxpc3QgIT0gbnVsbCkgSURhdGFVdGlsLnB1dChjdXJz
b3IsICIkbGlzdCIsIGxpc3QpOwogIH0gZmluYWxseSB7CiAgICBjdXJzb3IuZGVzdHJveSgpOwog
IH0KfQoKLy8gc2hyaW5rcyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXJyYXkgYnkgdGhlIGdpdmVu
IGNvdW50CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzaHJpbmsoVFtdIGFycmF5LCBpbnQgY291bnQp
IHsKICBpZiAoYXJyYXkgIT0gbnVsbCkgewogICAgaW50IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCAt
IGNvdW50OwogICAgYXJyYXkgPSByZXNpemUoYXJyYXksIGxlbmd0aCA8IDAgPyAwIDogbGVuZ3Ro
KTsKICB9CiAgcmV0dXJuIGFycmF5Owp9CgovLyByZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGl0
ZW0gaXMgZm91bmQgaW4gdGhlIGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMgPFQ+IGJvb2xlYW4g
aW5jbHVkZShUW10gYXJyYXksIFQgaXRlbSkgewogIGJvb2xlYW4gZm91bmQgPSBmYWxzZTsKCiAg
aWYgKGFycmF5ICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3Ro
OyBpKyspIHsKICAgICAgZm91bmQgPSB0dW5kcmEub2JqZWN0LmVxdWFsKGFycmF5W2ldLCBpdGVt
KTsKICAgICAgaWYgKGZvdW5kKSBicmVhazsKICAgIH0KICB9CgogIHJldHVybiBmb3VuZDsKfQoK
Ly8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZlbiBpdGVtIGluc2VydGVkIGF0IHRo
ZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiBUW10gaW5zZXJ0KFRbXSBhcnJheSwgVCBp
dGVtLCBTdHJpbmcgaW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGluZGV4ID09IG51bGwp
IGluZGV4ID0gIi0xIjsKICByZXR1cm4gaW5zZXJ0KGFycmF5LCBpdGVtLCBJbnRlZ2VyLnBhcnNl
SW50KGluZGV4KSwga2xhc3MpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggdGhlIGdp
dmVuIGl0ZW0gaW5zZXJ0ZWQgYXQgdGhlIGdpdmVuIGluZGV4CnB1YmxpYyBzdGF0aWMgPFQ+IFRb
XSBpbnNlcnQoVFtdIGFycmF5LCBUIGl0ZW0sIGludCBpbmRleCwgQ2xhc3M8VD4ga2xhc3MpIHsK
ICBpZiAoYXJyYXkgPT0gbnVsbCkgYXJyYXkgPSAoVFtdKWphdmEubGFuZy5yZWZsZWN0LkFycmF5
Lm5ld0luc3RhbmNlKGtsYXNzLCAwKTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0ID0g
bmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oamF2YS51dGlsLkFycmF5cy5hc0xpc3QoYXJyYXkp
KTsKCiAgaW50IGNhcGFjaXR5ID0gMDsKICBpZiAoaW5kZXggPCAwKSBpbmRleCArPSBsaXN0LnNp
emUoKSArIDE7CiAgaWYgKGluZGV4IDwgMCkgewogICAgY2FwYWNpdHkgPSAoaW5kZXggKiAtMSkg
KyBsaXN0LnNpemUoKTsKICAgIGluZGV4ID0gMDsKICB9IGVsc2UgewogICAgY2FwYWNpdHkgPSBp
bmRleDsKICB9CgogIGxpc3QuZW5zdXJlQ2FwYWNpdHkoY2FwYWNpdHkpOwogIGlmIChjYXBhY2l0
eSA+PSBsaXN0LnNpemUoKSkgewogICAgLy8gZmlsbCB0aGUgbGlzdCB3aXRoIG51bGxzIGlmIGl0
IG5lZWRzIHRvIGJlIGV4dGVuZGVkCiAgICBmb3IgKGludCBpID0gbGlzdC5zaXplKCk7IGkgPCBj
YXBhY2l0eTsgaSsrKSB7CiAgICAgIGxpc3QuYWRkKGksIG51bGwpOwogICAgfQogIH0KICBsaXN0
LmFkZChpbmRleCwgaXRlbSk7CiAgCiAgcmV0dXJuIGxpc3QudG9BcnJheShhcnJheSk7Cn0KCi8v
IHJldHVybnMgYSBuZXcgYXJyYXksIHdpdGggdGhlIGdpdmVuIGVsZW1lbnQgaW5zZXJ0ZWQgYXQg
dGhlIGdpdmVuIGluZGV4CnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgaW5zZXJ0KElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwogICAgU3RyaW5nIGluZGV4ID0gSURhdGFVdGlsLmdldFN0cmluZyhj
dXJzb3IsICIkaW5kZXgiKTsKCiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgaW5z
ZXJ0KGxpc3QgPT0gbnVsbCA/IG51bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihsaXN0LCBs
aXN0Lmxlbmd0aCwgKENsYXNzPFRbXT4pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3SW5zdGFu
Y2Uoa2xhc3MsIDApLmdldENsYXNzKCkpLCBpdGVtLCBpbmRleCwga2xhc3MpKTsKICB9IGZpbmFs
bHkgewogICAgY3Vyc29yLmRlc3Ryb3koKTsKICB9Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRl
bXMgaW4geCB0aGF0IGFyZSBhbHNvIGluIHkKcHVibGljIHN0YXRpYyA8VD4gVFtdIGludGVyc2Vj
dGlvbihUW10geCwgVFtdIHkpIHsKICBpZiAoeCA9PSBudWxsIHx8IHkgPT0gbnVsbCkgcmV0dXJu
IG51bGw7CgogIGphdmEudXRpbC5MaXN0PFQ+IGQgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDxU
Pih4Lmxlbmd0aCk7CiAgZC5hZGRBbGwoamF2YS51dGlsLkFycmF5cy5hc0xpc3QoeCkpOwogIGQu
cmV0YWluQWxsKGphdmEudXRpbC5BcnJheXMuYXNMaXN0KHkpKTsKICAKICByZXR1cm4gZC50b0Fy
cmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKHgsIDApKTsKfQoKLy8gcmV0dXJucyBhIHN0cmlu
ZyBjcmVhdGVkIGJ5IGNvbmNhdGVuYXRpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBnaXZlbiBhcnJh
eSwgc2VwYXJhdGVkIGJ5IHRoZSBnaXZlbiBzZXBhcmF0b3Igc3RyaW5nCnB1YmxpYyBzdGF0aWMg
PFQ+IFN0cmluZyBqb2luKFRbXSBhcnJheSwgU3RyaW5nIHNlcGFyYXRvcikgewogIFN0cmluZ0J1
aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7CiAgCiAgaWYgKGFycmF5ICE9IG51
bGwpIHsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAg
VCB2YWx1ZSA9IGFycmF5W2ldOwogICAgICBpZiAodmFsdWUgIT0gbnVsbCkgYnVpbGRlci5hcHBl
bmQodmFsdWUudG9TdHJpbmcoKSk7CiAgICAgIGlmIChzZXBhcmF0b3IgIT0gbnVsbCAmJiBpIDwg
YXJyYXkubGVuZ3RoIC0gMSkgYnVpbGRlci5hcHBlbmQoc2VwYXJhdG9yKTsKICAgIH0KICB9CiAg
CiAgcmV0dXJuIGJ1aWxkZXIudG9TdHJpbmcoKTsKfQoKLy8gcmV0dXJucyB0aGUgbGVuZ3RoIG9m
IHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBpbnQgbGVuZ3RoKFRbXSBhcnJheSkg
ewogIHJldHVybiAoYXJyYXkgPT0gbnVsbD8gMCA6IGFycmF5Lmxlbmd0aCk7Cn0KCi8vIG1hcHMg
dGhlIGdpdmVuIGFycmF5IHRvIGEgbmV3IGFycmF5IGJ5IGludm9raW5nIGEgc2VydmljZSBmb3Ig
ZWFjaCBlbGVtZW50IGFuZCBjb2xsZWN0aW5nIHRoZSBvdXRwdXQKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBtYXAoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB0aHJvd3MgU2VydmljZUV4
Y2VwdGlvbiB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7Cgog
IHRyeSB7CiAgICBPYmplY3RbXSBsaXN0ID0gSURhdGFVdGlsLmdldE9iamVjdEFycmF5KGN1cnNv
ciwgIiRsaXN0Iik7CiAgICBTdHJpbmcgc2VydmljZSA9IElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vy
c29yLCAiJHNlcnZpY2UiKTsKICAgIElEYXRhIHNjb3BlID0gSURhdGFVdGlsLmdldElEYXRhKGN1
cnNvciwgIiRwaXBlbGluZSIpOwogICAgU3RyaW5nIGlucHV0ID0gSURhdGFVdGlsLmdldFN0cmlu
ZyhjdXJzb3IsICIkaXRlbS5pbnB1dCIpOwogICAgU3RyaW5nIG91dHB1dCA9IElEYXRhVXRpbC5n
ZXRTdHJpbmcoY3Vyc29yLCAiJGl0ZW0ub3V0cHV0Iik7CgogICAgYm9vbGVhbiBzY29wZWQgPSBz
Y29wZSAhPSBudWxsOwoKICAgIC8vIGludm9rZSB0aGUgc2VydmljZSBmb3IgZWFjaCBpdGVtIGlu
IHRoZSBsaXN0LCBwYXNzaW5nICRpdGVtIGFuZCAkaW5kZXggdmFyaWFibGVzIG9uIGVhY2ggaW52
b2NhdGlvbgogICAgLy8gYW5kIGNvbGxlY3QgdGhlIHJldHVybmVkICRpdGVtJ3MgaW50byBhIG5l
dyBsaXN0CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgbWFwKGxpc3QgPT0gbnVs
bCA/IG51bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihsaXN0LCBsaXN0Lmxlbmd0aCwgKENs
YXNzPFRbXT4pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uoa2xhc3MsIDApLmdl
dENsYXNzKCkpLCBzZXJ2aWNlLCBzY29wZWQgPyBzY29wZSA6IHBpcGVsaW5lLCBpbnB1dCwgb3V0
cHV0KSk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyBtYXBz
IHRoZSBnaXZlbiBhcnJheSB0byBhIG5ldyBhcnJheSBieSBpbnZva2luZyBhIHNlcnZpY2UgZm9y
IGVhY2ggZWxlbWVudCBhbmQgY29sbGVjdGluZyB0aGUgb3V0cHV0CnB1YmxpYyBzdGF0aWMgPFQ+
IFRbXSBtYXAoVFtdIGFycmF5LCBTdHJpbmcgc2VydmljZSwgSURhdGEgcGlwZWxpbmUsIFN0cmlu
ZyBpbnB1dCwgU3RyaW5nIG91dHB1dCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gewogIGlmIChh
cnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwIHx8IHNlcnZpY2UgPT0gbnVsbCkgcmV0
dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9PSBudWxsKSBwaXBlbGluZSA9IElEYXRhRmFjdG9y
eS5jcmVhdGUoKTsKICBpZiAoaW5wdXQgPT0gbnVsbCkgaW5wdXQgPSAiJGl0ZW0iOwogIGlmIChv
dXRwdXQgPT0gbnVsbCkgb3V0cHV0ID0gaW5wdXQ7CiAgIAogIGphdmEudXRpbC5MaXN0PFQ+IGxp
c3QgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwogIElEYXRhQ3Vy
c29yIGN1cnNvciA9IG51bGw7CiAgCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7
IGkrKykgewogICAgLy8gYWRkICRpdGVtLCAkaW5kZXgsICRpdGVyYXRpb24gYW5kICRsZW5ndGgg
dmFyaWFibGVzIHRvIHRoZSBpbnB1dCBwaXBlbGluZQogICAgY3Vyc29yID0gcGlwZWxpbmUuZ2V0
Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgaW5wdXQsIGFycmF5W2ldKTsKICAg
IElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGluZGV4IiwgIiIgKyBpKTsKICAgIElEYXRhVXRpbC5w
dXQoY3Vyc29yLCAiJGl0ZXJhdGlvbiIsICIiICsgKGkgKyAxKSk7CiAgICBJRGF0YVV0aWwucHV0
KGN1cnNvciwgIiRsZW5ndGgiLCAiIiArIGFycmF5Lmxlbmd0aCk7CiAgICBjdXJzb3IuZGVzdHJv
eSgpOwoKICAgIC8vIGludm9rZSB0aGUgaXRlcmF0b3Igc2VydmljZQogICAgcGlwZWxpbmUgPSB0
dW5kcmEuc2VydmljZS5pbnZva2Uoc2VydmljZSwgcGlwZWxpbmUpOwoKICAgIC8vIGNsZWFuIHVw
IHRoZSBpbnB1dCBwaXBlbGluZQogICAgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAg
ICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwgb3V0cHV0KTsKICAgIElEYXRhVXRp
bC5yZW1vdmUoY3Vyc29yLCBpbnB1dCk7CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNvciwgb3V0
cHV0KTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGluZGV4Iik7CiAgICBJRGF0YVV0
aWwucmVtb3ZlKGN1cnNvciwgIiRpdGVyYXRpb24iKTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vy
c29yLCAiJGxlbmd0aCIpOwogICAgY3Vyc29yLmRlc3Ryb3koKTsKICAgIAogICAgLy8gY29sbGVj
dCB0aGUgbWFwcGVkIGl0ZW1zCiAgICBsaXN0LmFkZChpdGVtKTsKICB9CiAgCiAgcmV0dXJuIGxp
c3QudG9BcnJheShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihhcnJheSwgMCkpOwp9CgovLyByZXR1
cm5zIGEgbmV3IGFycmF5IHdpdGggYSBuZXcgZWxlbWVudCBpbnNlcnRlZCBhdCB0aGUgYmVnaW5u
aW5nCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBwcmVwZW5kKFRbXSBhcnJheSwgVCBpdGVtLCBDbGFz
czxUPiBrbGFzcykgewogIHJldHVybiBpbnNlcnQoYXJyYXksIGl0ZW0sIDAsIGtsYXNzKTsKfQoK
Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgcHJlcGVuZChJRGF0YSBwaXBlbGluZSwg
Q2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJzb3IgPSBwaXBlbGluZS5nZXRDdXJz
b3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJRGF0YVV0aWwuZ2V0T2JqZWN0QXJy
YXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vyc29y
LCAiJGl0ZW0iKTsKCiAgICBsaXN0ID0gcHJlcGVuZChsaXN0ID09IG51bGwgPyBudWxsIDogamF2
YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5ndGgsIChDbGFzczxUW10+KWphdmEu
bGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgaXRl
bSwga2xhc3MpOwoKICAgIGlmIChsaXN0ICE9IG51bGwpIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAi
JGxpc3QiLCBsaXN0KTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ryb3koKTsKICB9Cn0K
Ci8vIHNldHMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGlu
ZGV4IChzdXBwb3J0cyBydWJ5LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMg
PFQ+IFRbXSBwdXQoVFtdIGFycmF5LCBUIGl0ZW0sIFN0cmluZyBpbmRleCwgQ2xhc3M8VD4ga2xh
c3MpIHsKICByZXR1cm4gcHV0KGFycmF5LCBpdGVtLCBJbnRlZ2VyLnBhcnNlSW50KGluZGV4KSwg
a2xhc3MpOwp9CgovLyBzZXRzIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRo
ZSBnaXZlbiBpbmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJs
aWMgc3RhdGljIDxUPiBUW10gcHV0KFRbXSBhcnJheSwgVCBpdGVtLCBpbnQgaW5kZXgsIENsYXNz
PFQ+IGtsYXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZhLmxhbmcu
cmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CgogIC8vIHN1cHBvcnQgcmV2ZXJz
ZS90YWlsIGluZGV4aW5nCiAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3RoOwog
IGludCBjYXBhY2l0eSA9IDA7CiAgaWYgKGluZGV4IDwgMCkgewogICAgY2FwYWNpdHkgPSAoaW5k
ZXggKiAtMSkgKyBhcnJheS5sZW5ndGg7CiAgICBpbmRleCA9IDA7CiAgfSBlbHNlIHsKICAgIGNh
cGFjaXR5ID0gaW5kZXggKyAxOwogIH0KICBpZiAoY2FwYWNpdHkgPiBhcnJheS5sZW5ndGgpIGFy
cmF5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIGNhcGFjaXR5KTsKCiAgYXJyYXlb
aW5kZXhdID0gaXRlbTsKCiAgcmV0dXJuIGFycmF5Owp9CgovLyBzZXRzIHRoZSBlbGVtZW50IGZy
b20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3VwcG9ydHMgcnVieS1zdHls
ZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxUPiB2b2lkIHB1dChJRGF0YSBwaXBl
bGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJzb3IgPSBwaXBlbGluZS5n
ZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJRGF0YVV0aWwuZ2V0T2Jq
ZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQo
Y3Vyc29yLCAiJGl0ZW0iKTsKICAgIFN0cmluZyBpbmRleCA9IElEYXRhVXRpbC5nZXRTdHJpbmco
Y3Vyc29yLCAiJGluZGV4Iik7CgogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIHB1
dChsaXN0ID09IG51bGwgPyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlz
dC5sZW5ndGgsIChDbGFzczxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNl
KGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgaXRlbSwgaW5kZXgsIGtsYXNzKSk7CiAgfSBmaW5hbGx5
IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdp
dGggYWxsIGVsZW1lbnRzIGZyb20gdGhlIGdpdmVuIGFycmF5IGJ1dCBpbiByZXZlcnNlIG9yZGVy
CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSByZXZlcnNlKFRbXSBhcnJheSkgewogIGlmIChhcnJheSA9
PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8PSAxKSByZXR1cm4gYXJyYXk7CiAgCiAgamF2YS51dGls
LkFycmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oamF2YS51dGls
LkFycmF5cy5hc0xpc3QoYXJyYXkpKTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMucmV2ZXJzZShs
aXN0KTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFy
cmF5LCAwKSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIHN1YnNldCBv
ZiBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUW10gc2xp
Y2UoVFtdIGFycmF5LCBTdHJpbmcgaW5kZXgsIFN0cmluZyBsZW5ndGgpIHsKICByZXR1cm4gc2xp
Y2UoYXJyYXksIGluZGV4ID09IG51bGwgPyAwIDogSW50ZWdlci5wYXJzZUludChpbmRleCksIGxl
bmd0aCA9PSBudWxsID8gKGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoKSA6IEludGVn
ZXIucGFyc2VJbnQobGVuZ3RoKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggaXMg
YSBzdWJzZXQgb2YgZWxlbWVudHMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8
VD4gVFtdIHNsaWNlKFRbXSBhcnJheSwgaW50IGluZGV4LCBpbnQgbGVuZ3RoKSB7CiAgaWYgKGFy
cmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09IDApIHJldHVybiBhcnJheTsKICAvLyBzdXBw
b3J0IHJldmVyc2UvdGFpbCBsZW5ndGgKICBpZiAobGVuZ3RoIDwgMCkgbGVuZ3RoID0gYXJyYXku
bGVuZ3RoICsgbGVuZ3RoOwogIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5nCiAgaWYg
KGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3RoOwogIC8vIGRvbid0IHNsaWNlIHBhc3Qg
dGhlIGVuZCBvZiB0aGUgYXJyYXkKICBpZiAoKGxlbmd0aCArPSBpbmRleCkgPiBhcnJheS5sZW5n
dGgpIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAKICByZXR1cm4gamF2YS51dGlsLkFycmF5cy5j
b3B5T2ZSYW5nZShhcnJheSwgaW5kZXgsIGxlbmd0aCk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJy
YXkgd2l0aCBhbGwgZWxlbWVudHMgc29ydGVkCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzb3J0KFRb
XSBhcnJheSkgewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8PSAxKSByZXR1
cm4gYXJyYXk7CiAgCiAgVFtdIGNvcHkgPSBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihhcnJheSwg
YXJyYXkubGVuZ3RoKTsKICBqYXZhLnV0aWwuQXJyYXlzLnNvcnQoY29weSk7CiAgcmV0dXJuIGNv
cHk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCBhbGwgc3RyaW5nIGl0ZW1zIHRyaW1t
ZWQsIGFsbAovLyBlbXB0eSBzdHJpbmcgaXRlbXMgcmVtb3ZlZCwgYW5kIGFsbCBudWxsIGl0ZW1z
IHJlbW92ZWQKcHVibGljIHN0YXRpYyA8VD4gVFtdIHNxdWVlemUoVFtdIGFycmF5KSB7CiAgaWYg
KGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09IDApIHJldHVybiBudWxsOwoKICBqYXZh
LnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVu
Z3RoKTsKCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYg
KGFycmF5W2ldICE9IG51bGwgJiYgYXJyYXlbaV0gaW5zdGFuY2VvZiBTdHJpbmcpIHsKICAgICAg
VCBpdGVtID0gKFQpKChTdHJpbmcpYXJyYXlbaV0pLnRyaW0oKTsKICAgICAgaWYgKGl0ZW0uZXF1
YWxzKCIiKSkgewogICAgICAgIGFycmF5W2ldID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAg
ICBhcnJheVtpXSA9IGl0ZW07CiAgICAgIH0KICAgIH0KICAgIGlmIChhcnJheVtpXSAhPSBudWxs
KSBsaXN0LmFkZChhcnJheVtpXSk7CiAgfQoKICBhcnJheSA9IGxpc3QudG9BcnJheShqYXZhLnV0
aWwuQXJyYXlzLmNvcHlPZihhcnJheSwgMCkpOwogIGlmIChhcnJheS5sZW5ndGggPT0gMCkgYXJy
YXkgPSBudWxsOwogIAogIHJldHVybiBhcnJheTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3
aXRoIGFsbCBkdXBsaWNhdGUgZWxlbWVudHMgcmVtb3ZlZApwdWJsaWMgc3RhdGljIDxUPiBUW10g
dW5pcXVlKFRbXSBhcnJheSkgewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8
PSAxKSByZXR1cm4gYXJyYXk7CiAgCiAgamF2YS51dGlsLlNldDxUPiBzZXQgPSBuZXcgamF2YS51
dGlsLlRyZWVTZXQ8VD4oamF2YS51dGlsLkFycmF5cy5hc0xpc3QoYXJyYXkpKTsKICAKICByZXR1
cm4gc2V0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsKfQ==</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
