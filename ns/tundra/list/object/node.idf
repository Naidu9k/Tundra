<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">LyoqCiAqIFJldHVybnMgYSBuZXcgYXJyYXksIHdpdGggdGhlIGdpdmVuIGVsZW1lbnQgaW5zZXJ0
ZWQgYXQgdGhlIGVuZC4KICogCiAqIEBwYXJhbSBwaXBlbGluZSBUaGUgcGlwZWxpbmUgY29udGFp
bmluZyB0aGUgYXJyYXkgYW5kIGl0ZW0gdG8gYmUgaW5zZXJ0ZWQuCiAqIEBwYXJhbSBrbGFzcyAg
ICBUaGUgY2xhc3Mgb2YgdGhlIGl0ZW0gYmVpbmcgYXBwZW5kZWQuCiAqIEBwYXJhbSA8VD4gICAg
ICBUaGUgY2xhc3Mgb2YgdGhlIGl0ZW0gYmVpbmcgYXBwZW5kZWQuCiAqLwpwdWJsaWMgc3RhdGlj
IDxUPiB2b2lkIGFwcGVuZChJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICAgIElE
YXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICAgIHRyeSB7CiAgICAg
ICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlz
dCIpOwogICAgICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsK
CiAgICAgICAgbGlzdCA9IEFycmF5SGVscGVyLmFwcGVuZChsaXN0LCBpdGVtLCBrbGFzcywgZmFs
c2UpOwoKICAgICAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRs
aXN0IiwgbGlzdCk7CiAgICB9IGZpbmFsbHkgewogICAgICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
ICB9Cn0KCi8qKgogKiBJbnZva2VzIHRoZSBnaXZlbiBzZXJ2aWNlIGZvciBlYWNoIGVsZW1lbnQg
aW4gdGhlIGFycmF5LgogKgogKiBAcGFyYW0gYXJyYXkgICAgIFRoZSBhcnJheSB0byBpdGVyYXRl
IG92ZXIuCiAqIEBwYXJhbSBzZXJ2aWNlICAgVGhlIHNlcnZpY2UgdG8gaW52b2tlIGZvciBlYWNo
IGl0ZW0gaW4gdGhlIGFycmF5LgogKiBAcGFyYW0gcGlwZWxpbmUgIFRoZSBpbnB1dCBwaXBlbGlu
ZSB1c2VkIHdoZW4gaW52b2tpbmcgdGhlIHNlcnZpY2UuCiAqIEBwYXJhbSBpbnB1dCAgICAgVGhl
IHZhcmlhYmxlIG5hbWUgdXNlZCBmb3IgdGhlIGl0ZW0gaW4gdGhlIGlucHV0IHBpcGVsaW5lLgog
KiBAcGFyYW0gPFQ+ICAgICAgIFRoZSBhcnJheSBjb21wb25lbnQgY2xhc3MuCiAqIEB0aHJvd3Mg
U2VydmljZUV4Y2VwdGlvbiBJZiBhbiBlcnJvciBpbnZva2luZyB0aGUgc2VydmljZSBvY2N1cnMu
CiAqLwpwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGVhY2goVFtdIGFycmF5LCBTdHJpbmcgc2Vydmlj
ZSwgSURhdGEgcGlwZWxpbmUsIFN0cmluZyBpbnB1dCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24g
ewogICAgbWFwKGFycmF5LCBzZXJ2aWNlLCBwaXBlbGluZSwgaW5wdXQsIG51bGwpOwp9CgovKioK
ICogRmlsdGVycyB0aGUgZ2l2ZW4gbGlzdCB0byBvbmx5IGluY2x1ZGUgaXRlbXMgd2hlcmUgdGhl
IGdpdmVuIGNvbmRpdGlvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4KICogCiAqIEBwYXJhbSBhcnJheSAg
ICAgVGhlIGFycmF5IHRvIGJlIGZpbHRlcmVkLgogKiBAcGFyYW0gY29uZGl0aW9uIFRoZSBmaWx0
ZXIgY29uZGl0aW9uLgogKiBAcGFyYW0gcGlwZWxpbmUgIFRoZSBwaXBlbGluZSBhZ2FpbnN0IHdo
aWNoIHRoZSBjb25kaXRpb24gaXMgZXZhbHVhdGVkLgogKiBAcGFyYW0gPFQ+ICAgICAgIFRoZSBh
cnJheSBjb21wb25lbnQgY2xhc3MuCiAqIEByZXR1cm4gICAgICAgICAgQSBuZXcgYXJyYXkgY29u
dGFpbmluZyBvbmx5IHRoZSBpdGVtcyBmcm9tIHRoZSBnaXZlbiBhcnJheSB3aGVyZSB0aGUgY29u
ZGl0aW9uIHdhcyB0cnVlLgogKiBAdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gSWYgYW4gZXJyb3Ig
b2NjdXJzIGV2YWx1YXRpbmcgdGhlIGNvbmRpdGlvbi4KICovCnB1YmxpYyBzdGF0aWMgPFQ+IFRb
XSBmaWx0ZXIoVFtdIGFycmF5LCBTdHJpbmcgY29uZGl0aW9uLCBJRGF0YSBwaXBlbGluZSkgdGhy
b3dzIFNlcnZpY2VFeGNlcHRpb24gewogICAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVu
Z3RoID09IDAgfHwgY29uZGl0aW9uID09IG51bGwgfHwgY29uZGl0aW9uLmVxdWFscygiIikpIHJl
dHVybiBhcnJheTsKICAgIGlmIChwaXBlbGluZSA9PSBudWxsKSBwaXBlbGluZSA9IElEYXRhRmFj
dG9yeS5jcmVhdGUoKTsKCiAgICBMaXN0PFQ+IGxpc3QgPSBuZXcgQXJyYXlMaXN0PFQ+KGFycmF5
Lmxlbmd0aCk7CgogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewog
ICAgICAgIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwogICAgICAg
IElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGl0ZW0iLCBhcnJheVtpXSk7CgogICAgICAgIGlmIChD
b25kaXRpb25FdmFsdWF0b3IuZXZhbHVhdGUoY29uZGl0aW9uLCBwaXBlbGluZSkpIGxpc3QuYWRk
KGFycmF5W2ldKTsKCiAgICAgICAgSURhdGFVdGlsLnJlbW92ZShjdXJzb3IsICIkaXRlbSIpOwog
ICAgICAgIGN1cnNvci5kZXN0cm95KCk7CiAgICB9CgogICAgcmV0dXJuIGxpc3QudG9BcnJheShB
cnJheXMuY29weU9mKGFycmF5LCBsaXN0LnNpemUoKSkpOwp9CgovKioKICogR3Jvd3MgdGhlIGdp
dmVuIGFycmF5IHRvIHRoZSBkZXNpcmVkIGxlbmd0aCwgYW5kIHBhZHMgd2l0aCB0aGUgZ2l2ZW4g
aXRlbS4KICoKICogQHBhcmFtIHBpcGVsaW5lICBUaGUgcGlwZWxpbmUgY29udGFpbmluZyAkbGlz
dCwgJGNvdW50LCBhbmQgJGl0ZW0gdmFyaWFibGVzLgogKiBAcGFyYW0ga2xhc3MgICAgIFRoZSBh
cnJheSBjb21wb25lbnQgY2xhc3MuCiAqIEBwYXJhbSA8VD4gICAgICAgVGhlIGFycmF5IGNvbXBv
bmVudCBjbGFzcy4KICovCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgZ3JvdyhJRGF0YSBwaXBlbGlu
ZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICAgIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICAgIHRyeSB7CiAgICAgICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5n
ZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgICAgIGludCBjb3VudCA9IEludGVn
ZXJIZWxwZXIucGFyc2UoSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkY291bnQiKSk7CiAg
ICAgICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAgICAg
ICBsaXN0ID0gQXJyYXlIZWxwZXIuZ3JvdyhsaXN0LCBjb3VudCwgaXRlbSwga2xhc3MpOwoKICAg
ICAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgbGlz
dCk7CiAgICB9IGZpbmFsbHkgewogICAgICAgIGN1cnNvci5kZXN0cm95KCk7CiAgICB9Cn0KCi8q
KgogKiBSZXR1cm5zIGEgbmV3IGFycmF5LCB3aXRoIHRoZSBnaXZlbiBlbGVtZW50IGluc2VydGVk
IGF0IHRoZSBnaXZlbiBpbmRleC4KICogCiAqIEBwYXJhbSBwaXBlbGluZSAgVGhlIHBpcGVsaW5l
IGNvbnRhaW5pbmcgdGhlICRsaXN0LCAkaXRlbSwgJGluZGV4IHZhcmlhYmxlcy4KICogQHBhcmFt
IGtsYXNzICAgICBUaGUgYXJyYXkgY29tcG9uZW50IGNsYXNzLgogKiBAcGFyYW0gPFQ+ICAgICAg
IFRoZSBhcnJheSBjb21wb25lbnQgY2xhc3MuCiAqLwpwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGlu
c2VydChJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICAgIElEYXRhQ3Vyc29yIGN1
cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICAgIHRyeSB7CiAgICAgICAgVFtdIGxpc3Qg
PSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgICAg
IFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKICAgICAgICBpbnQg
aW5kZXggPSBJbnRlZ2VySGVscGVyLnBhcnNlKElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAi
JGluZGV4IikpOwoKICAgICAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgQXJyYXlI
ZWxwZXIuaW5zZXJ0KGxpc3QsIGl0ZW0sIGluZGV4LCBrbGFzcykpOwogICAgfSBmaW5hbGx5IHsK
ICAgICAgICBjdXJzb3IuZGVzdHJveSgpOwogICAgfQp9CgovKioKICogTWFwcyB0aGUgZ2l2ZW4g
YXJyYXkgdG8gYSBuZXcgYXJyYXkgYnkgaW52b2tpbmcgYSBzZXJ2aWNlIGZvciBlYWNoIGVsZW1l
bnQgYW5kIGNvbGxlY3RpbmcgdGhlIG91dHB1dC4KICogCiAqIEBwYXJhbSBwaXBlbGluZSBUaGUg
cGlwZWxpbmUgY29udGFpbmluZyB0aGUgJGxpc3QsICRzZXJ2aWNlLCAkcGlwZWxpbmUsICRpdGVt
LmlucHV0LCBhbmQgJGl0ZW0ub3V0cHV0IHZhcmlhYmxlcy4KICogQHBhcmFtIGtsYXNzICAgIFRo
ZSBhcnJheSBjb21wb25lbnQgY2xhc3MuCiAqIEBwYXJhbSA8VD4gICAgICBUaGUgYXJyYXkgY29t
cG9uZW50IGNsYXNzLgogKiBAdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gSWYgYW4gZXJyb3Igb2Nj
dXJzIGludm9raW5nIHRoZSBzZXJ2aWNlLgogKi8KcHVibGljIHN0YXRpYyA8VD4gdm9pZCBtYXAo
SURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7
CiAgICBJRGF0YUN1cnNvciBjdXJzb3IgPSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKCiAgICB0cnkg
ewogICAgICAgIE9iamVjdFtdIGxpc3QgPSBJRGF0YVV0aWwuZ2V0T2JqZWN0QXJyYXkoY3Vyc29y
LCAiJGxpc3QiKTsKICAgICAgICBTdHJpbmcgc2VydmljZSA9IElEYXRhVXRpbC5nZXRTdHJpbmco
Y3Vyc29yLCAiJHNlcnZpY2UiKTsKICAgICAgICBJRGF0YSBzY29wZSA9IElEYXRhVXRpbC5nZXRJ
RGF0YShjdXJzb3IsICIkcGlwZWxpbmUiKTsKICAgICAgICBTdHJpbmcgaW5wdXQgPSBJRGF0YVV0
aWwuZ2V0U3RyaW5nKGN1cnNvciwgIiRpdGVtLmlucHV0Iik7CiAgICAgICAgU3RyaW5nIG91dHB1
dCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGl0ZW0ub3V0cHV0Iik7CgogICAgICAg
IGJvb2xlYW4gc2NvcGVkID0gc2NvcGUgIT0gbnVsbDsKCiAgICAgICAgLy8gaW52b2tlIHRoZSBz
ZXJ2aWNlIGZvciBlYWNoIGl0ZW0gaW4gdGhlIGxpc3QsIHBhc3NpbmcgJGl0ZW0gYW5kICRpbmRl
eCB2YXJpYWJsZXMgb24gZWFjaCBpbnZvY2F0aW9uCiAgICAgICAgLy8gYW5kIGNvbGxlY3QgdGhl
IHJldHVybmVkICRpdGVtJ3MgaW50byBhIG5ldyBsaXN0CgogICAgICAgIGxpc3QgPSBtYXAobGlz
dCA9PSBudWxsID8gbnVsbCA6IEFycmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5ndGgsIChDbGFz
czxUW10+KUFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgc2VydmljZSwg
c2NvcGVkID8gc2NvcGUgOiBwaXBlbGluZSwgaW5wdXQsIG91dHB1dCk7CgogICAgICAgIGlmIChs
aXN0ICE9IG51bGwpIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBsaXN0KTsKICAgIH0g
ZmluYWxseSB7CiAgICAgICAgY3Vyc29yLmRlc3Ryb3koKTsKICAgIH0KfQoKLyoqCiAqIE1hcHMg
dGhlIGdpdmVuIGFycmF5IHRvIGEgbmV3IGFycmF5IGJ5IGludm9raW5nIGEgc2VydmljZSBmb3Ig
ZWFjaCBlbGVtZW50IGFuZCBjb2xsZWN0aW5nIHRoZSBvdXRwdXQuCiAqIAogKiBAcGFyYW0gYXJy
YXkgICAgIFRoZSBhcnJheSB0byBiZSBpdGVyYXRlZCBvdmVyLgogKiBAcGFyYW0gc2VydmljZSAg
IFRoZSBzZXJ2aWNlIHRvIGJlIGludm9rZWQgZm9yIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuCiAq
IEBwYXJhbSBwaXBlbGluZSAgVGhlIGlucHV0IHBpcGVsaW5lIHVzZWQgd2hlbiBpbnZva2luZyB0
aGUgYXJyYXkuCiAqIEBwYXJhbSBpbnB1dCAgICAgVGhlIHZhcmlhYmxlIG5hbWUgdXNlZCB3aGVu
IHBhc3NpbmcgdGhlIGFycmF5IGl0ZW0gaW4gdGhlIGlucHV0IHBpcGVsaW5lLgogKiBAcGFyYW0g
b3V0cHV0ICAgIFRoZSB2YXJpYWJsZSBuYW1lIG9mIHRoZSBtYXBwZWQgaXRlbSByZXR1cm5lZCBi
eSB0aGUgaW52b2tlZCBzZXJ2aWNlLgogKiBAcGFyYW0gPFQ+ICAgICAgIFRoZSBhcnJheSBjb21w
b25lbnQgY2xhc3MuCiAqIEByZXR1cm4gICAgICAgICAgQSBuZXcgYXJyYXkgY29udGFpbmluZyBl
YWNoIGl0ZW0gZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYWZ0ZXIgYmVpbmcgdHJhbnNmb3JtZWQgYnkg
dGhlIGdpdmVuIHNlcnZpY2UuCiAqIEB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiBJZiBhbiBlcnJv
ciBvY2N1cnMgaW52b2tpbmcgdGhlIHNlcnZpY2UuCiAqLwpwdWJsaWMgc3RhdGljIDxUPiBUW10g
bWFwKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJpbmcgaW5w
dXQsIFN0cmluZyBvdXRwdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICAgIGlmIChhcnJh
eSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwIHx8IHNlcnZpY2UgPT0gbnVsbCkgcmV0dXJu
IGFycmF5OwogICAgaWYgKHBpcGVsaW5lID09IG51bGwpIHBpcGVsaW5lID0gSURhdGFGYWN0b3J5
LmNyZWF0ZSgpOwogICAgaWYgKGlucHV0ID09IG51bGwpIGlucHV0ID0gIiRpdGVtIjsKICAgIGlm
IChvdXRwdXQgPT0gbnVsbCkgb3V0cHV0ID0gaW5wdXQ7CgogICAgTGlzdDxUPiBsaXN0ID0gbmV3
IEFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwogICAgSURhdGFDdXJzb3IgY3Vyc29yID0gbnVs
bDsKCiAgICBmb3IgKGludCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAg
Ly8gYWRkICRpdGVtLCAkaW5kZXgsICRpdGVyYXRpb24gYW5kICRsZW5ndGggdmFyaWFibGVzIHRv
IHRoZSBpbnB1dCBwaXBlbGluZQogICAgICAgIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigp
OwogICAgICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCBpbnB1dCwgYXJyYXlbaV0pOwogICAgICAg
IElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGluZGV4IiwgIiIgKyBpKTsKICAgICAgICBJRGF0YVV0
aWwucHV0KGN1cnNvciwgIiRpdGVyYXRpb24iLCAiIiArIChpICsgMSkpOwogICAgICAgIElEYXRh
VXRpbC5wdXQoY3Vyc29yLCAiJGxlbmd0aCIsICIiICsgYXJyYXkubGVuZ3RoKTsKICAgICAgICBj
dXJzb3IuZGVzdHJveSgpOwoKICAgICAgICAvLyBpbnZva2UgdGhlIGl0ZXJhdG9yIHNlcnZpY2UK
ICAgICAgICBwaXBlbGluZSA9IHR1bmRyYS5zZXJ2aWNlLmludm9rZShzZXJ2aWNlLCBwaXBlbGlu
ZSk7CgogICAgICAgIC8vIGNsZWFuIHVwIHRoZSBpbnB1dCBwaXBlbGluZQogICAgICAgIGN1cnNv
ciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwogICAgICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5n
ZXQoY3Vyc29yLCBvdXRwdXQpOwogICAgICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCBpbnB1
dCk7CiAgICAgICAgSURhdGFVdGlsLnJlbW92ZShjdXJzb3IsIG91dHB1dCk7CiAgICAgICAgSURh
dGFVdGlsLnJlbW92ZShjdXJzb3IsICIkaW5kZXgiKTsKICAgICAgICBJRGF0YVV0aWwucmVtb3Zl
KGN1cnNvciwgIiRpdGVyYXRpb24iKTsKICAgICAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNvciwg
IiRsZW5ndGgiKTsKICAgICAgICBjdXJzb3IuZGVzdHJveSgpOwoKICAgICAgICAvLyBjb2xsZWN0
IHRoZSBtYXBwZWQgaXRlbXMKICAgICAgICBsaXN0LmFkZChpdGVtKTsKICAgIH0KCiAgICByZXR1
cm4gbGlzdC50b0FycmF5KEFycmF5cy5jb3B5T2YoYXJyYXksIGxpc3Quc2l6ZSgpKSk7Cn0KCi8q
KgogKiBSZXR1cm5zIGEgbmV3IGFycmF5LCB3aXRoIHRoZSBnaXZlbiBlbGVtZW50IGluc2VydGVk
IGF0IHRoZSBiZWdpbm5pbmcuCiAqIAogKiBAcGFyYW0gcGlwZWxpbmUgIFRoZSBwaXBlbGluZSBj
b250YWluaW5nIHRoZSAkbGlzdCBhbmQgJGl0ZW0gdmFyaWFibGVzLgogKiBAcGFyYW0ga2xhc3Mg
ICAgIFRoZSBhcnJheSBjb21wb25lbnQgY2xhc3MuCiAqIEBwYXJhbSA8VD4gICAgICAgVGhlIGFy
cmF5IGNvbXBvbmVudCBjbGFzcy4KICovCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgcHJlcGVuZChJ
RGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICAgIElEYXRhQ3Vyc29yIGN1cnNvciA9
IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICAgIHRyeSB7CiAgICAgICAgVFtdIGxpc3QgPSAoVFtd
KUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgICAgIFQgaXRl
bSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKCiAgICAgICAgbGlzdCA9IEFy
cmF5SGVscGVyLnByZXBlbmQobGlzdCwgaXRlbSwga2xhc3MpOwoKICAgICAgICBpZiAobGlzdCAh
PSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgbGlzdCk7CiAgICB9IGZpbmFs
bHkgewogICAgICAgIGN1cnNvci5kZXN0cm95KCk7CiAgICB9Cn0KCi8qKgogKiBTZXRzIHRoZSBl
bGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3VwcG9ydHMg
cnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKS4KICoKICogQHBhcmFtIHBpcGVsaW5lICBUaGUg
cGlwZWxpbmUgY29udGFpbmluZyB0aGUgJGxpc3QsICRpdGVtLCBhbmQgJGluZGV4IHZhcmlhYmxl
cy4KICogQHBhcmFtIGtsYXNzICAgICBUaGUgYXJyYXkgY29tcG9uZW50IGNsYXNzLgogKiBAcGFy
YW0gPFQ+ICAgICAgIFRoZSBhcnJheSBjb21wb25lbnQgY2xhc3MuCiAqLwpwdWJsaWMgc3RhdGlj
IDxUPiB2b2lkIHB1dChJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICAgIElEYXRh
Q3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICAgIHRyeSB7CiAgICAgICAg
VFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIp
OwogICAgICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKICAg
ICAgICBpbnQgaW5kZXggPSBJbnRlZ2VySGVscGVyLnBhcnNlKElEYXRhVXRpbC5nZXRTdHJpbmco
Y3Vyc29yLCAiJGluZGV4IikpOwoKICAgICAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0
IiwgQXJyYXlIZWxwZXIucHV0KGxpc3QgPT0gbnVsbCA/IG51bGwgOiBBcnJheXMuY29weU9mKGxp
c3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilBcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCku
Z2V0Q2xhc3MoKSksIGl0ZW0sIGluZGV4LCBrbGFzcykpOwogICAgfSBmaW5hbGx5IHsKICAgICAg
ICBjdXJzb3IuZGVzdHJveSgpOwogICAgfQp9CgovKioKICogRmlsdGVycyB0aGUgZ2l2ZW4gbGlz
dCB0byBub3QgaW5jbHVkZSBpdGVtcyB3aGVyZSB0aGUgZ2l2ZW4gY29uZGl0aW9uIGV2YWx1YXRl
cyB0byB0cnVlLgogKgogKiBAcGFyYW0gYXJyYXkgICAgIFRoZSBhcnJheSB0byBiZSBmaWx0ZXJl
ZC4KICogQHBhcmFtIGNvbmRpdGlvbiBUaGUgZmlsdGVyIGNvbmRpdGlvbi4KICogQHBhcmFtIHBp
cGVsaW5lICBUaGUgcGlwZWxpbmUgYWdhaW5zdCB3aGljaCB0aGUgY29uZGl0aW9uIGlzIGV2YWx1
YXRlZC4KICogQHBhcmFtIDxUPiAgICAgICBUaGUgYXJyYXkgY29tcG9uZW50IGNsYXNzLgogKiBA
cmV0dXJuICAgICAgICAgIEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgb25seSB0aGUgaXRlbXMgZnJv
bSB0aGUgZ2l2ZW4gYXJyYXkgd2hlcmUgdGhlIGNvbmRpdGlvbiB3YXMgZmFsc2UuCiAqIEB0aHJv
d3MgU2VydmljZUV4Y2VwdGlvbiBJZiBhbiBlcnJvciBvY2N1cnMgZXZhbHVhdGluZyB0aGUgY29u
ZGl0aW9uLgogKi8KcHVibGljIHN0YXRpYyA8VD4gVFtdIHJlamVjdChUW10gYXJyYXksIFN0cmlu
ZyBjb25kaXRpb24sIElEYXRhIHBpcGVsaW5lKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAg
ICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBjb25kaXRpb24gPT0g
bnVsbCB8fCBjb25kaXRpb24uZXF1YWxzKCIiKSkgcmV0dXJuIGFycmF5OwogICAgaWYgKHBpcGVs
aW5lID09IG51bGwpIHBpcGVsaW5lID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoKICAgIExpc3Q8
VD4gbGlzdCA9IG5ldyBBcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgICBmb3IgKGludCBp
ID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgSURhdGFDdXJzb3IgY3Vyc29y
ID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICAgICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIk
aXRlbSIsIGFycmF5W2ldKTsKCiAgICAgICAgaWYgKCFDb25kaXRpb25FdmFsdWF0b3IuZXZhbHVh
dGUoY29uZGl0aW9uLCBwaXBlbGluZSkpIGxpc3QuYWRkKGFycmF5W2ldKTsKCiAgICAgICAgSURh
dGFVdGlsLnJlbW92ZShjdXJzb3IsICIkaXRlbSIpOwogICAgICAgIGN1cnNvci5kZXN0cm95KCk7
CiAgICB9CgogICAgcmV0dXJuIGxpc3QudG9BcnJheShBcnJheXMuY29weU9mKGFycmF5LCBsaXN0
LnNpemUoKSkpOwp9CgovKioKICogUmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIGRlc2ly
ZWQgbGVuZ3RoLCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtLgogKiAKICogQHBhcmFtIHBp
cGVsaW5lIFRoZSBwaXBlbGluZSBjb250YWluaW5nICRsaXN0LCAkbGVuZ3RoLCBhbmQgJGl0ZW0g
dmFyaWFibGVzLgogKiBAcGFyYW0ga2xhc3MgICAgVGhlIGFycmF5IGNvbXBvbmVudCBjbGFzcy4K
ICogQHBhcmFtIDxUPiAgICAgIFRoZSBhcnJheSBjb21wb25lbnQgY2xhc3MuCiAqLwpwdWJsaWMg
c3RhdGljIDxUPiB2b2lkIHJlc2l6ZShJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsK
ICAgIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICAgIHRyeSB7
CiAgICAgICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3Is
ICIkbGlzdCIpOwogICAgICAgIGludCBsZW5ndGggPSBJbnRlZ2VySGVscGVyLnBhcnNlKElEYXRh
VXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGxlbmd0aCIpKTsKICAgICAgICBUIGl0ZW0gPSAoVClJ
RGF0YVV0aWwuZ2V0KGN1cnNvciwgIiRpdGVtIik7CgogICAgICAgIGxpc3QgPSBBcnJheUhlbHBl
ci5yZXNpemUobGlzdCwgbGVuZ3RoLCBpdGVtLCBrbGFzcyk7CgogICAgICAgIGlmIChsaXN0ICE9
IG51bGwpIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBsaXN0KTsKICAgIH0gZmluYWxs
eSB7CiAgICAgICAgY3Vyc29yLmRlc3Ryb3koKTsKICAgIH0KfQ==</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
    <value>java.lang.reflect.Array</value>
    <value>java.util.ArrayList</value>
    <value>java.util.Arrays</value>
    <value>java.util.List</value>
    <value>permafrost.tundra.data.IDataHelper</value>
    <value>permafrost.tundra.data.IDataMap</value>
    <value>permafrost.tundra.flow.ConditionEvaluator</value>
    <value>permafrost.tundra.lang.ArrayHelper</value>
    <value>permafrost.tundra.lang.BooleanHelper</value>
    <value>permafrost.tundra.lang.ExceptionHelper</value>
    <value>permafrost.tundra.math.IntegerHelper</value>
  </array>
</Values>
