<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBhcHBlbmQoVFtdIGFycmF5LCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgLTEsIGtsYXNz
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNl
cnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgYXBwZW5kKElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBhcHBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6
IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilq
YXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSks
IGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNv
ciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIG51bGwgZWxlbWVudHMgcmVtb3Zl
ZApwdWJsaWMgc3RhdGljIDxUPiBUW10gY29tcGFjdChUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwoKICBmb3IgKGludCBpID0gMDsg
aSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkgbGlzdC5h
ZGQoYXJyYXlbaV0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggY29u
dGFpbnMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheXMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIGNvbmNhdGVuYXRlKFRbXSBhcnJheSwgVFtdIGl0ZW1zKSB7CiAgaWYgKGFycmF5
ID09IG51bGwpIHJldHVybiBpdGVtczsKICBpZiAoaXRlbXMgPT0gbnVsbCkgcmV0dXJuIGFycmF5
OwoKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
YXJyYXkubGVuZ3RoICsgaXRlbXMubGVuZ3RoKTsKICAKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMu
YWRkQWxsKGxpc3QsIGFycmF5KTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMuYWRkQWxsKGxpc3Qs
IGl0ZW1zKTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9m
KGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBu
b3QgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkaWZmZXJlbmNlKFRbXSB4LCBUW10g
eSkgewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4geDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZW1vdmVBbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZW1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBp
bmRleCBmcm9tIHRoZSBnaXZlbiBsaXN0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkcm9wKFRbXSBh
cnJheSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGRyb3AoYXJyYXksIEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpKTsKfQoKLy8gcmVtb3ZlcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXgg
ZnJvbSB0aGUgZ2l2ZW4gbGlzdApwdWJsaWMgc3RhdGljIDxUPiBUW10gZHJvcChUW10gYXJyYXks
IGludCBpbmRleCkgewogIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3Ro
OwogICAgaWYgKGluZGV4IDwgMCB8fCBhcnJheS5sZW5ndGggPD0gaW5kZXgpIHRocm93IG5ldyBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24oaW5kZXgpOwoKICAgIFRbXSBoZWFkID0gc2xp
Y2UoYXJyYXksIDAsIGluZGV4KTsKICAgIFRbXSB0YWlsID0gc2xpY2UoYXJyYXksIGluZGV4ICsg
MSwgYXJyYXkubGVuZ3RoIC0gaW5kZXgpOwoKICAgIGFycmF5ID0gY29uY2F0ZW5hdGUoaGVhZCwg
dGFpbCk7ICAgICAgCiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVu
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBlYWNoKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBtYXAoYXJyYXksIHNlcnZpY2Us
IHBpcGVsaW5lLCBpbnB1dCwgbnVsbCk7Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4g
YXJyYXlzIGFyZSBlcXVhbApwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGVxdWFsKFRbXSB4LCBU
W10geSkgewogIGJvb2xlYW4gcmVzdWx0ID0gdHJ1ZTsKCiAgaWYgKHggIT0gbnVsbCAmJiB5ICE9
IG51bGwpIHsKICAgIHJlc3VsdCA9ICh4Lmxlbmd0aCA9PSB5Lmxlbmd0aCk7CgogICAgaWYgKHJl
c3VsdCkgewogICAgICBmb3IgKGludCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHsKICAgICAg
ICByZXN1bHQgPSByZXN1bHQgJiYgdHVuZHJhLm9iamVjdC5lcXVhbCh4W2ldLCB5W2ldKTsKICAg
ICAgICBpZiAoIXJlc3VsdCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgcmVz
dWx0ID0gKHggPT0gbnVsbCAmJiB5ID09IG51bGwpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoK
Ly8gZmlsdGVycyB0aGUgZ2l2ZW4gYXJyYXkgYnkgZXZhbHVhdGluZyB0aGUgY29uZGl0aW9uYWwg
c3RhdGVtZW50IGFnYWluc3QgdGhlIAovLyBnaXZlbiBwaXBlbGluZSBhbmQgZWFjaCBpdGVtIGlu
IHRoZSBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUW10gZmlsdGVyKFRbXSBhcnJheSwgU3RyaW5n
IGNvbmRpdGlvbiwgSURhdGEgcGlwZWxpbmUpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBp
ZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBjb25kaXRpb24gPT0gbnVs
bCB8fCBjb25kaXRpb24uZXF1YWxzKCIiKSkgcmV0dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9
PSBudWxsKSBwaXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCiAgamF2YS51dGlsLkFy
cmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3Ro
KTsKCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgSURhdGFD
dXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1
cnNvciwgIiRpdGVtIiwgYXJyYXlbaV0pOwoKICAgIGlmICh0dW5kcmEuY29uZGl0aW9uLmV2YWx1
YXRlKGNvbmRpdGlvbiwgcGlwZWxpbmUpKSBsaXN0LmFkZChhcnJheVtpXSk7CiAgICAKICAgIElE
YXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGl0ZW0iKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQoKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAw
KSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIG9uZS1kaW1lbnNpb25h
bCByZWN1cnNpdmUgZmxhdHRlbmluZyBvZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8
VD4gVFtdIGZsYXR0ZW4oVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXku
bGVuZ3RoID09IDApIHJldHVybiBhcnJheTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0
ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgZm9yIChpbnQg
aSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldICE9IG51bGwg
JiYgYXJyYXlbaV0uZ2V0Q2xhc3MoKS5pc0FycmF5KCkpIHsKICAgICAgbGlzdC5lbnN1cmVDYXBh
Y2l0eShsaXN0LnNpemUoKSArICgoVFtdKWFycmF5W2ldKS5sZW5ndGgpOwogICAgICBsaXN0LmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdChmbGF0dGVuKChUW10pYXJyYXlbaV0pKSk7CiAg
ICB9IGVsc2UgewogICAgICBsaXN0LmFkZChhcnJheVtpXSk7CiAgICB9CiAgfQogIAogIHJldHVy
biBsaXN0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIFN0cmluZyBpbmRleCwgU3RyaW5nIGl0ZXJhdGlvbikgewog
IGludCBpID0gMDsKICBpZiAoaW5kZXggIT0gbnVsbCkgewogICAgaSA9IEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpOwogIH0gZWxzZSB7CiAgICBpID0gSW50ZWdlci5wYXJzZUludChpdGVyYXRpb24p
IC0gMTsKICB9CiAgcmV0dXJuIGdldChhcnJheSwgaSk7Cn0KCi8vIHJldHVybnMgdGhlIGVsZW1l
bnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5
LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFQgZ2V0KFRbXSBhcnJh
eSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGdldChhcnJheSwgaW5kZXgsIG51bGwpOwp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIGludCBpbmRleCkgewogIFQgaXRlbSA9IG51bGw7CiAgCiAg
aWYgKGFycmF5ICE9IG51bGwpIHsKICAgIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5n
CiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCArPSBhcnJheS5sZW5ndGg7CiAgICAKICAgIGl0ZW0g
PSBhcnJheVtpbmRleF07CiAgfQogIAogIHJldHVybiBpdGVtOwp9CgovLyByZXR1cm5zIHRoZSBm
aXJzdCBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMgPFQ+IFQgZmly
c3QoVFtdIGFycmF5KSB7CiAgcmV0dXJuIGdldChhcnJheSwgMCk7Cn0KCi8vIHJldHVybnMgdGhl
IGxhc3QgZWxlbWVudCBmcm9tIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUIGxh
c3QoVFtdIGFycmF5KSB7CiAgcmV0dXJuIGdldChhcnJheSwgLTEpOwp9CgovLyByZXNpemVzIHRo
ZSBnaXZlbiBhcnJheSAob3IgaW5zdGFudGlhdGVzIGEgbmV3IGFycmF5LCBpZiBudWxsKSB0byB0
aGUgZGVzaXJlZCBsZW5ndGgsIAovLyBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1Ymxp
YyBzdGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZh
LmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CiAgcmV0dXJuIHJlc2l6
ZShhcnJheSwgbmV3TGVuZ3RoLCBpdGVtKTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkg
dG8gdGhlIGRlc2lyZWQgbGVuZ3RoLCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1Ymxp
YyBzdGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0p
IHsKICBpZiAobmV3TGVuZ3RoIDwgMCkgbmV3TGVuZ3RoID0gYXJyYXkubGVuZ3RoICsgbmV3TGVu
Z3RoOwogIGlmIChuZXdMZW5ndGggPCAwKSBuZXdMZW5ndGggPSAwOwoKICBpbnQgb3JpZ2luYWxM
ZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgaWYgKG5ld0xlbmd0aCA9PSBvcmlnaW5hbExlbmd0aCkg
cmV0dXJuIGFycmF5OwoKICBhcnJheSA9IGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCBu
ZXdMZW5ndGgpOwogIGlmIChpdGVtICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkgPSBvcmlnaW5h
bExlbmd0aDsgaSA8IG5ld0xlbmd0aDsgaSsrKSBhcnJheVtpXSA9IGl0ZW07CiAgfQogIHJldHVy
biBhcnJheTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIGRlc2lyZWQgbGVu
Z3RoLCBhbmQgcGFkcyB3aXRoIG51bGxzCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSByZXNpemUoVFtd
IGFycmF5LCBpbnQgbmV3TGVuZ3RoKSB7CiAgcmV0dXJuIHJlc2l6ZShhcnJheSwgbmV3TGVuZ3Ro
LCBudWxsKTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIGRlc2lyZWQgbGVu
Z3RoLCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQg
cmVzaXplKElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1
cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtd
KUlEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgaW50IGxlbmd0
aCA9IEludGVnZXIucGFyc2VJbnQoSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkbGVuZ3Ro
IikpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAg
IGxpc3QgPSByZXNpemUobGlzdCwgbGVuZ3RoLCBpdGVtLCBrbGFzcyk7CgogICAgaWYgKGxpc3Qg
IT0gbnVsbCkgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGxpc3QpOwogIH0gZmluYWxs
eSB7CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gZ3Jvd3MgdGhlIHNpemUgb2YgdGhl
IGdpdmVuIGFycmF5IGJ5IHRoZSBnaXZlbiBjb3VudCwgYW5kIHBhZHMgd2l0aCB0aGUgZ2l2ZW4g
aXRlbQpwdWJsaWMgc3RhdGljIDxUPiBUW10gZ3JvdyhUW10gYXJyYXksIGludCBjb3VudCwgVCBp
dGVtLCBDbGFzczxUPiBrbGFzcykgewogIHJldHVybiByZXNpemUoYXJyYXksIGFycmF5ID09IG51
bGwgPyBjb3VudCA6IGFycmF5Lmxlbmd0aCArIGNvdW50LCBpdGVtLCBrbGFzcyk7Cn0KCi8vIGdy
b3dzIHRoZSBnaXZlbiBhcnJheSB0byB0aGUgZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGgg
dGhlIGdpdmVuIGl0ZW0KcHVibGljIHN0YXRpYyA8VD4gdm9pZCBncm93KElEYXRhIHBpcGVsaW5l
LCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1
cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RB
cnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgaW50IGNvdW50ID0gSW50ZWdlci5wYXJzZUludChJ
RGF0YVV0aWwuZ2V0U3RyaW5nKGN1cnNvciwgIiRjb3VudCIpKTsKICAgIFQgaXRlbSA9IChUKUlE
YXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKCiAgICBsaXN0ID0gZ3JvdyhsaXN0LCBjb3Vu
dCwgaXRlbSwga2xhc3MpOwoKICAgIGlmIChsaXN0ICE9IG51bGwpIElEYXRhVXRpbC5wdXQoY3Vy
c29yLCAiJGxpc3QiLCBsaXN0KTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ryb3koKTsK
ICB9Cn0KCi8vIHNocmlua3MgdGhlIHNpemUgb2YgdGhlIGdpdmVuIGFycmF5IGJ5IHRoZSBnaXZl
biBjb3VudApwdWJsaWMgc3RhdGljIDxUPiBUW10gc2hyaW5rKFRbXSBhcnJheSwgaW50IGNvdW50
KSB7CiAgaWYgKGFycmF5ICE9IG51bGwpIHsKICAgIGludCBsZW5ndGggPSBhcnJheS5sZW5ndGgg
LSBjb3VudDsKICAgIGFycmF5ID0gcmVzaXplKGFycmF5LCBsZW5ndGggPCAwID8gMCA6IGxlbmd0
aCk7CiAgfQogIHJldHVybiBhcnJheTsKfQoKLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBp
dGVtIGlzIGZvdW5kIGluIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBib29sZWFu
IGluY2x1ZGUoVFtdIGFycmF5LCBUIGl0ZW0pIHsKICBib29sZWFuIGZvdW5kID0gZmFsc2U7Cgog
IGlmIChhcnJheSAhPSBudWxsKSB7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0
aDsgaSsrKSB7CiAgICAgIGZvdW5kID0gdHVuZHJhLm9iamVjdC5lcXVhbChhcnJheVtpXSwgaXRl
bSk7CiAgICAgIGlmIChmb3VuZCkgYnJlYWs7CiAgICB9CiAgfQoKICByZXR1cm4gZm91bmQ7Cn0K
Ci8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCB0aGUgZ2l2ZW4gaXRlbSBpbnNlcnRlZCBhdCB0
aGUgZ2l2ZW4gaW5kZXgKcHVibGljIHN0YXRpYyA8VD4gVFtdIGluc2VydChUW10gYXJyYXksIFQg
aXRlbSwgU3RyaW5nIGluZGV4LCBDbGFzczxUPiBrbGFzcykgewogIGlmIChpbmRleCA9PSBudWxs
KSBpbmRleCA9ICItMSI7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgSW50ZWdlci5wYXJz
ZUludChpbmRleCksIGtsYXNzKTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHRoZSBn
aXZlbiBpdGVtIGluc2VydGVkIGF0IHRoZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiBU
W10gaW5zZXJ0KFRbXSBhcnJheSwgVCBpdGVtLCBpbnQgaW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7
CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZhLmxhbmcucmVmbGVjdC5BcnJh
eS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CgogIGphdmEudXRpbC5BcnJheUxpc3Q8VD4gbGlzdCA9
IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KGphdmEudXRpbC5BcnJheXMuYXNMaXN0KGFycmF5
KSk7CgogIGludCBjYXBhY2l0eSA9IDA7CiAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gbGlzdC5z
aXplKCkgKyAxOwogIGlmIChpbmRleCA8IDApIHsKICAgIGNhcGFjaXR5ID0gKGluZGV4ICogLTEp
ICsgbGlzdC5zaXplKCk7CiAgICBpbmRleCA9IDA7CiAgfSBlbHNlIHsKICAgIGNhcGFjaXR5ID0g
aW5kZXg7CiAgfQoKICBsaXN0LmVuc3VyZUNhcGFjaXR5KGNhcGFjaXR5KTsKICBpZiAoY2FwYWNp
dHkgPj0gbGlzdC5zaXplKCkpIHsKICAgIC8vIGZpbGwgdGhlIGxpc3Qgd2l0aCBudWxscyBpZiBp
dCBuZWVkcyB0byBiZSBleHRlbmRlZAogICAgZm9yIChpbnQgaSA9IGxpc3Quc2l6ZSgpOyBpIDwg
Y2FwYWNpdHk7IGkrKykgewogICAgICBsaXN0LmFkZChpLCBudWxsKTsKICAgIH0KICB9CiAgbGlz
dC5hZGQoaW5kZXgsIGl0ZW0pOwogIAogIHJldHVybiBsaXN0LnRvQXJyYXkoYXJyYXkpOwp9Cgov
LyByZXR1cm5zIGEgbmV3IGFycmF5LCB3aXRoIHRoZSBnaXZlbiBlbGVtZW50IGluc2VydGVkIGF0
IHRoZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGluc2VydChJRGF0YSBwaXBl
bGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJzb3IgPSBwaXBlbGluZS5n
ZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJRGF0YVV0aWwuZ2V0T2Jq
ZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQo
Y3Vyc29yLCAiJGl0ZW0iKTsKICAgIFN0cmluZyBpbmRleCA9IElEYXRhVXRpbC5nZXRTdHJpbmco
Y3Vyc29yLCAiJGluZGV4Iik7CgogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGlu
c2VydChsaXN0ID09IG51bGwgPyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwg
bGlzdC5sZW5ndGgsIChDbGFzczxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3Rh
bmNlKGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgaXRlbSwgaW5kZXgsIGtsYXNzKSk7CiAgfSBmaW5h
bGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyByZXR1cm5zIG9ubHkgdGhlIGl0
ZW1zIGluIHggdGhhdCBhcmUgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBpbnRlcnNl
Y3Rpb24oVFtdIHgsIFRbXSB5KSB7CiAgaWYgKHggPT0gbnVsbCB8fCB5ID09IG51bGwpIHJldHVy
biBudWxsOwoKICBqYXZhLnV0aWwuTGlzdDxUPiBkID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8
VD4oeC5sZW5ndGgpOwogIGQuYWRkQWxsKGphdmEudXRpbC5BcnJheXMuYXNMaXN0KHgpKTsKICBk
LnJldGFpbkFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh5KSk7CiAgCiAgcmV0dXJuIGQudG9B
cnJheShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZih4LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBzdHJp
bmcgY3JlYXRlZCBieSBjb25jYXRlbmF0aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gYXJy
YXksIHNlcGFyYXRlZCBieSB0aGUgZ2l2ZW4gc2VwYXJhdG9yIHN0cmluZwpwdWJsaWMgc3RhdGlj
IDxUPiBTdHJpbmcgam9pbihUW10gYXJyYXksIFN0cmluZyBzZXBhcmF0b3IpIHsKICBTdHJpbmdC
dWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpOwogIAogIGlmIChhcnJheSAhPSBu
dWxsKSB7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAg
IFQgdmFsdWUgPSBhcnJheVtpXTsKICAgICAgaWYgKHZhbHVlICE9IG51bGwpIGJ1aWxkZXIuYXBw
ZW5kKHZhbHVlLnRvU3RyaW5nKCkpOwogICAgICBpZiAoc2VwYXJhdG9yICE9IG51bGwgJiYgaSA8
IGFycmF5Lmxlbmd0aCAtIDEpIGJ1aWxkZXIuYXBwZW5kKHNlcGFyYXRvcik7CiAgICB9CiAgfQog
IAogIHJldHVybiBidWlsZGVyLnRvU3RyaW5nKCk7Cn0KCi8vIHJldHVybnMgdGhlIGxlbmd0aCBv
ZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gaW50IGxlbmd0aChUW10gYXJyYXkp
IHsKICByZXR1cm4gKGFycmF5ID09IG51bGw/IDAgOiBhcnJheS5sZW5ndGgpOwp9CgovLyBtYXBz
IHRoZSBnaXZlbiBhcnJheSB0byBhIG5ldyBhcnJheSBieSBpbnZva2luZyBhIHNlcnZpY2UgZm9y
IGVhY2ggZWxlbWVudCBhbmQgY29sbGVjdGluZyB0aGUgb3V0cHV0CnB1YmxpYyBzdGF0aWMgPFQ+
IHZvaWQgbWFwKElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgdGhyb3dzIFNlcnZpY2VF
eGNlcHRpb24gewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoK
ICB0cnkgewogICAgT2JqZWN0W10gbGlzdCA9IElEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJz
b3IsICIkbGlzdCIpOwogICAgU3RyaW5nIHNlcnZpY2UgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1
cnNvciwgIiRzZXJ2aWNlIik7CiAgICBJRGF0YSBzY29wZSA9IElEYXRhVXRpbC5nZXRJRGF0YShj
dXJzb3IsICIkcGlwZWxpbmUiKTsKICAgIFN0cmluZyBpbnB1dCA9IElEYXRhVXRpbC5nZXRTdHJp
bmcoY3Vyc29yLCAiJGl0ZW0uaW5wdXQiKTsKICAgIFN0cmluZyBvdXRwdXQgPSBJRGF0YVV0aWwu
Z2V0U3RyaW5nKGN1cnNvciwgIiRpdGVtLm91dHB1dCIpOwoKICAgIGJvb2xlYW4gc2NvcGVkID0g
c2NvcGUgIT0gbnVsbDsKCiAgICAvLyBpbnZva2UgdGhlIHNlcnZpY2UgZm9yIGVhY2ggaXRlbSBp
biB0aGUgbGlzdCwgcGFzc2luZyAkaXRlbSBhbmQgJGluZGV4IHZhcmlhYmxlcyBvbiBlYWNoIGlu
dm9jYXRpb24KICAgIC8vIGFuZCBjb2xsZWN0IHRoZSByZXR1cm5lZCAkaXRlbSdzIGludG8gYSBu
ZXcgbGlzdAogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIG1hcChsaXN0ID09IG51
bGwgPyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5ndGgsIChD
bGFzczxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5n
ZXRDbGFzcygpKSwgc2VydmljZSwgc2NvcGVkID8gc2NvcGUgOiBwaXBlbGluZSwgaW5wdXQsIG91
dHB1dCkpOwogIH0gZmluYWxseSB7CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gbWFw
cyB0aGUgZ2l2ZW4gYXJyYXkgdG8gYSBuZXcgYXJyYXkgYnkgaW52b2tpbmcgYSBzZXJ2aWNlIGZv
ciBlYWNoIGVsZW1lbnQgYW5kIGNvbGxlY3RpbmcgdGhlIG91dHB1dApwdWJsaWMgc3RhdGljIDxU
PiBUW10gbWFwKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQsIFN0cmluZyBvdXRwdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBpZiAo
YXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBzZXJ2aWNlID09IG51bGwpIHJl
dHVybiBhcnJheTsKICBpZiAocGlwZWxpbmUgPT0gbnVsbCkgcGlwZWxpbmUgPSBJRGF0YUZhY3Rv
cnkuY3JlYXRlKCk7CiAgaWYgKGlucHV0ID09IG51bGwpIGlucHV0ID0gIiRpdGVtIjsKICBpZiAo
b3V0cHV0ID09IG51bGwpIG91dHB1dCA9IGlucHV0OwogICAKICBqYXZhLnV0aWwuTGlzdDxUPiBs
aXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKICBJRGF0YUN1
cnNvciBjdXJzb3IgPSBudWxsOwogIAogIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3Ro
OyBpKyspIHsKICAgIC8vIGFkZCAkaXRlbSwgJGluZGV4LCAkaXRlcmF0aW9uIGFuZCAkbGVuZ3Ro
IHZhcmlhYmxlcyB0byB0aGUgaW5wdXQgcGlwZWxpbmUKICAgIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsIGlucHV0LCBhcnJheVtpXSk7CiAg
ICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRpbmRleCIsICIiICsgaSk7CiAgICBJRGF0YVV0aWwu
cHV0KGN1cnNvciwgIiRpdGVyYXRpb24iLCAiIiArIChpICsgMSkpOwogICAgSURhdGFVdGlsLnB1
dChjdXJzb3IsICIkbGVuZ3RoIiwgIiIgKyBhcnJheS5sZW5ndGgpOwogICAgY3Vyc29yLmRlc3Ry
b3koKTsKCiAgICAvLyBpbnZva2UgdGhlIGl0ZXJhdG9yIHNlcnZpY2UKICAgIHBpcGVsaW5lID0g
dHVuZHJhLnNlcnZpY2UuaW52b2tlKHNlcnZpY2UsIHBpcGVsaW5lKTsKCiAgICAvLyBjbGVhbiB1
cCB0aGUgaW5wdXQgcGlwZWxpbmUKICAgIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwog
ICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsIG91dHB1dCk7CiAgICBJRGF0YVV0
aWwucmVtb3ZlKGN1cnNvciwgaW5wdXQpOwogICAgSURhdGFVdGlsLnJlbW92ZShjdXJzb3IsIG91
dHB1dCk7CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNvciwgIiRpbmRleCIpOwogICAgSURhdGFV
dGlsLnJlbW92ZShjdXJzb3IsICIkaXRlcmF0aW9uIik7CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1
cnNvciwgIiRsZW5ndGgiKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgICAKICAgIC8vIGNvbGxl
Y3QgdGhlIG1hcHBlZCBpdGVtcwogICAgbGlzdC5hZGQoaXRlbSk7CiAgfQogIAogIHJldHVybiBs
aXN0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsKfQoKLy8gcmV0
dXJucyBhIG5ldyBhcnJheSB3aXRoIGEgbmV3IGVsZW1lbnQgaW5zZXJ0ZWQgYXQgdGhlIGJlZ2lu
bmluZwpwdWJsaWMgc3RhdGljIDxUPiBUW10gcHJlcGVuZChUW10gYXJyYXksIFQgaXRlbSwgQ2xh
c3M8VD4ga2xhc3MpIHsKICByZXR1cm4gaW5zZXJ0KGFycmF5LCBpdGVtLCAwLCBrbGFzcyk7Cn0K
Ci8vIHJldHVybnMgYSBuZXcgYXJyYXksIHdpdGggdGhlIGdpdmVuIGVsZW1lbnQgaW5zZXJ0ZWQg
YXQgdGhlIGVuZApwdWJsaWMgc3RhdGljIDxUPiB2b2lkIHByZXBlbmQoSURhdGEgcGlwZWxpbmUs
IENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vy
c29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVjdEFy
cmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNv
ciwgIiRpdGVtIik7CgogICAgbGlzdCA9IHByZXBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6IGph
dmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilqYXZh
LmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSksIGl0
ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwg
IiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9
CgovLyBzZXRzIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUW10gcHV0KFRbXSBhcnJheSwgVCBpdGVtLCBTdHJpbmcgaW5kZXgsIENsYXNzPFQ+IGts
YXNzKSB7CiAgcmV0dXJuIHB1dChhcnJheSwgaXRlbSwgSW50ZWdlci5wYXJzZUludChpbmRleCks
IGtsYXNzKTsKfQoKLy8gc2V0cyB0aGUgZWxlbWVudCBmcm9tIHRoZSBnaXZlbiBhcnJheSBhdCB0
aGUgZ2l2ZW4gaW5kZXggKHN1cHBvcnRzIHJ1Ynktc3R5bGUgcmV2ZXJzZSBpbmRleGluZykKcHVi
bGljIHN0YXRpYyA8VD4gVFtdIHB1dChUW10gYXJyYXksIFQgaXRlbSwgaW50IGluZGV4LCBDbGFz
czxUPiBrbGFzcykgewogIGlmIChhcnJheSA9PSBudWxsKSBhcnJheSA9IChUW10pamF2YS5sYW5n
LnJlZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uoa2xhc3MsIDApOwoKICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogIGlmIChpbmRleCA8IDApIGluZGV4ICs9IGFycmF5Lmxlbmd0aDsK
ICBpbnQgY2FwYWNpdHkgPSAwOwogIGlmIChpbmRleCA8IDApIHsKICAgIGNhcGFjaXR5ID0gKGlu
ZGV4ICogLTEpICsgYXJyYXkubGVuZ3RoOwogICAgaW5kZXggPSAwOwogIH0gZWxzZSB7CiAgICBj
YXBhY2l0eSA9IGluZGV4ICsgMTsKICB9CiAgaWYgKGNhcGFjaXR5ID4gYXJyYXkubGVuZ3RoKSBh
cnJheSA9IGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCBjYXBhY2l0eSk7CgogIGFycmF5
W2luZGV4XSA9IGl0ZW07CgogIHJldHVybiBhcnJheTsKfQoKLy8gc2V0cyB0aGUgZWxlbWVudCBm
cm9tIHRoZSBnaXZlbiBhcnJheSBhdCB0aGUgZ2l2ZW4gaW5kZXggKHN1cHBvcnRzIHJ1Ynktc3R5
bGUgcmV2ZXJzZSBpbmRleGluZykKcHVibGljIHN0YXRpYyA8VD4gdm9pZCBwdXQoSURhdGEgcGlw
ZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUu
Z2V0Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9i
amVjdEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0
KGN1cnNvciwgIiRpdGVtIik7CiAgICBTdHJpbmcgaW5kZXggPSBJRGF0YVV0aWwuZ2V0U3RyaW5n
KGN1cnNvciwgIiRpbmRleCIpOwoKICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBw
dXQobGlzdCA9PSBudWxsID8gbnVsbCA6IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxp
c3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5j
ZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSksIGl0ZW0sIGluZGV4LCBrbGFzcykpOwogIH0gZmluYWxs
eSB7CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3
aXRoIGFsbCBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheSBidXQgaW4gcmV2ZXJzZSBvcmRl
cgpwdWJsaWMgc3RhdGljIDxUPiBUW10gcmV2ZXJzZShUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPD0gMSkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRp
bC5BcnJheUxpc3Q8VD4gbGlzdCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KGphdmEudXRp
bC5BcnJheXMuYXNMaXN0KGFycmF5KSk7CiAgamF2YS51dGlsLkNvbGxlY3Rpb25zLnJldmVyc2Uo
bGlzdCk7CiAgCiAgcmV0dXJuIGxpc3QudG9BcnJheShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihh
cnJheSwgMCkpOyAgCn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggaXMgYSBzdWJzZXQg
b2YgZWxlbWVudHMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gVFtdIHNs
aWNlKFRbXSBhcnJheSwgU3RyaW5nIGluZGV4LCBTdHJpbmcgbGVuZ3RoKSB7CiAgcmV0dXJuIHNs
aWNlKGFycmF5LCBpbmRleCA9PSBudWxsID8gMCA6IEludGVnZXIucGFyc2VJbnQoaW5kZXgpLCBs
ZW5ndGggPT0gbnVsbCA/IChhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCkgOiBJbnRl
Z2VyLnBhcnNlSW50KGxlbmd0aCkpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdoaWNoIGlz
IGEgc3Vic2V0IG9mIGVsZW1lbnRzIGZyb20gdGhlIGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMg
PFQ+IFRbXSBzbGljZShUW10gYXJyYXksIGludCBpbmRleCwgaW50IGxlbmd0aCkgewogIGlmIChh
cnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm4gYXJyYXk7CiAgLy8gc3Vw
cG9ydCByZXZlcnNlL3RhaWwgbGVuZ3RoCiAgaWYgKGxlbmd0aCA8IDApIGxlbmd0aCA9IGFycmF5
Lmxlbmd0aCArIGxlbmd0aDsKICAvLyBzdXBwb3J0IHJldmVyc2UvdGFpbCBpbmRleGluZwogIGlm
IChpbmRleCA8IDApIGluZGV4ICs9IGFycmF5Lmxlbmd0aDsKICAvLyBkb24ndCBzbGljZSBwYXN0
IHRoZSBlbmQgb2YgdGhlIGFycmF5CiAgaWYgKChsZW5ndGggKz0gaW5kZXgpID4gYXJyYXkubGVu
Z3RoKSBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgCiAgcmV0dXJuIGphdmEudXRpbC5BcnJheXMu
Y29weU9mUmFuZ2UoYXJyYXksIGluZGV4LCBsZW5ndGgpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFy
cmF5IHdpdGggYWxsIGVsZW1lbnRzIHNvcnRlZApwdWJsaWMgc3RhdGljIDxUPiBUW10gc29ydChU
W10gYXJyYXkpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPD0gMSkgcmV0
dXJuIGFycmF5OwogIAogIFRbXSBjb3B5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXks
IGFycmF5Lmxlbmd0aCk7CiAgamF2YS51dGlsLkFycmF5cy5zb3J0KGNvcHkpOwogIHJldHVybiBj
b3B5Owp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIHN0cmluZyBpdGVtcyB0cmlt
bWVkLCBhbGwKLy8gZW1wdHkgc3RyaW5nIGl0ZW1zIHJlbW92ZWQsIGFuZCBhbGwgbnVsbCBpdGVt
cyByZW1vdmVkCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzcXVlZXplKFRbXSBhcnJheSkgewogIGlm
IChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm4gbnVsbDsKCiAgamF2
YS51dGlsLkxpc3Q8VD4gbGlzdCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KGFycmF5Lmxl
bmd0aCk7CgogIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIGlm
IChhcnJheVtpXSAhPSBudWxsICYmIGFycmF5W2ldIGluc3RhbmNlb2YgU3RyaW5nKSB7CiAgICAg
IFQgaXRlbSA9IChUKSgoU3RyaW5nKWFycmF5W2ldKS50cmltKCk7CiAgICAgIGlmIChpdGVtLmVx
dWFscygiIikpIHsKICAgICAgICBhcnJheVtpXSA9IG51bGw7CiAgICAgIH0gZWxzZSB7CiAgICAg
ICAgYXJyYXlbaV0gPSBpdGVtOwogICAgICB9CiAgICB9CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVs
bCkgbGlzdC5hZGQoYXJyYXlbaV0pOwogIH0KCiAgYXJyYXkgPSBsaXN0LnRvQXJyYXkoamF2YS51
dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsKICBpZiAoYXJyYXkubGVuZ3RoID09IDApIGFy
cmF5ID0gbnVsbDsKICAKICByZXR1cm4gYXJyYXk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkg
d2l0aCBhbGwgZHVwbGljYXRlIGVsZW1lbnRzIHJlbW92ZWQKcHVibGljIHN0YXRpYyA8VD4gVFtd
IHVuaXF1ZShUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGgg
PD0gMSkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5TZXQ8VD4gc2V0ID0gbmV3IGphdmEu
dXRpbC5UcmVlU2V0PFQ+KGphdmEudXRpbC5BcnJheXMuYXNMaXN0KGFycmF5KSk7CiAgCiAgcmV0
dXJuIHNldC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAwKSk7Cn0=</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
