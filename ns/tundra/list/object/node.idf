<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBhcHBlbmQoVFtdIGFycmF5LCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgLTEsIGtsYXNz
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNl
cnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgYXBwZW5kKElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBhcHBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6
IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilq
YXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSks
IGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNv
ciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIG51bGwgZWxlbWVudHMgcmVtb3Zl
ZApwdWJsaWMgc3RhdGljIDxUPiBUW10gY29tcGFjdChUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwoKICBmb3IgKGludCBpID0gMDsg
aSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkgbGlzdC5h
ZGQoYXJyYXlbaV0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggY29u
dGFpbnMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheXMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIGNvbmNhdGVuYXRlKFRbXSBhcnJheSwgVFtdIGl0ZW1zKSB7CiAgaWYgKGFycmF5
ID09IG51bGwpIHJldHVybiBpdGVtczsKICBpZiAoaXRlbXMgPT0gbnVsbCkgcmV0dXJuIGFycmF5
OwoKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
YXJyYXkubGVuZ3RoICsgaXRlbXMubGVuZ3RoKTsKICAKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMu
YWRkQWxsKGxpc3QsIGFycmF5KTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMuYWRkQWxsKGxpc3Qs
IGl0ZW1zKTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9m
KGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBu
b3QgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkaWZmZXJlbmNlKFRbXSB4LCBUW10g
eSkgewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4geDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZW1vdmVBbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZW1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBp
bmRleCBmcm9tIHRoZSBnaXZlbiBsaXN0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkcm9wKFRbXSBh
cnJheSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGRyb3AoYXJyYXksIEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpKTsKfQoKLy8gcmVtb3ZlcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXgg
ZnJvbSB0aGUgZ2l2ZW4gbGlzdApwdWJsaWMgc3RhdGljIDxUPiBUW10gZHJvcChUW10gYXJyYXks
IGludCBpbmRleCkgewogIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3Ro
OwogICAgaWYgKGluZGV4IDwgMCB8fCBhcnJheS5sZW5ndGggPD0gaW5kZXgpIHRocm93IG5ldyBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24oaW5kZXgpOwoKICAgIFRbXSBoZWFkID0gc2xp
Y2UoYXJyYXksIDAsIGluZGV4KTsKICAgIFRbXSB0YWlsID0gc2xpY2UoYXJyYXksIGluZGV4ICsg
MSwgYXJyYXkubGVuZ3RoIC0gaW5kZXgpOwoKICAgIGFycmF5ID0gY29uY2F0ZW5hdGUoaGVhZCwg
dGFpbCk7ICAgICAgCiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVu
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBlYWNoKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBtYXAoYXJyYXksIHNlcnZpY2Us
IHBpcGVsaW5lLCBpbnB1dCwgbnVsbCk7Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4g
YXJyYXlzIGFyZSBlcXVhbApwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGVxdWFsKFRbXSB4LCBU
W10geSkgewogIGJvb2xlYW4gcmVzdWx0ID0gdHJ1ZTsKCiAgaWYgKHggIT0gbnVsbCAmJiB5ICE9
IG51bGwpIHsKICAgIHJlc3VsdCA9ICh4Lmxlbmd0aCA9PSB5Lmxlbmd0aCk7CgogICAgaWYgKHJl
c3VsdCkgewogICAgICBmb3IgKGludCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHsKICAgICAg
ICByZXN1bHQgPSByZXN1bHQgJiYgdHVuZHJhLm9iamVjdC5lcXVhbCh4W2ldLCB5W2ldKTsKICAg
ICAgICBpZiAoIXJlc3VsdCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgcmVz
dWx0ID0gKHggPT0gbnVsbCAmJiB5ID09IG51bGwpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoK
Ly8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIG9uZS1kaW1lbnNpb25hbCByZWN1cnNp
dmUgZmxhdHRlbmluZyBvZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gVFtdIGZs
YXR0ZW4oVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09
IDApIHJldHVybiBhcnJheTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0ID0gbmV3IGph
dmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgZm9yIChpbnQgaSA9IDA7IGkg
PCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldICE9IG51bGwgJiYgYXJyYXlb
aV0uZ2V0Q2xhc3MoKS5pc0FycmF5KCkpIHsKICAgICAgbGlzdC5lbnN1cmVDYXBhY2l0eShsaXN0
LnNpemUoKSArICgoVFtdKWFycmF5W2ldKS5sZW5ndGgpOwogICAgICBsaXN0LmFkZEFsbChqYXZh
LnV0aWwuQXJyYXlzLmFzTGlzdChmbGF0dGVuKChUW10pYXJyYXlbaV0pKSk7CiAgICB9IGVsc2Ug
ewogICAgICBsaXN0LmFkZChhcnJheVtpXSk7CiAgICB9CiAgfQogIAogIHJldHVybiBsaXN0LnRv
QXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9CgovLyByZXR1cm5z
IHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3Vw
cG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxUPiBUIGdl
dChUW10gYXJyYXksIFN0cmluZyBpbmRleCwgU3RyaW5nIGl0ZXJhdGlvbikgewogIGludCBpID0g
MDsKICBpZiAoaW5kZXggIT0gbnVsbCkgewogICAgaSA9IEludGVnZXIucGFyc2VJbnQoaW5kZXgp
OwogIH0gZWxzZSB7CiAgICBpID0gSW50ZWdlci5wYXJzZUludChpdGVyYXRpb24pIC0gMTsKICB9
CiAgcmV0dXJuIGdldChhcnJheSwgaSk7Cn0KCi8vIHJldHVybnMgdGhlIGVsZW1lbnQgZnJvbSB0
aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5LXN0eWxlIHJl
dmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFQgZ2V0KFRbXSBhcnJheSwgU3RyaW5n
IGluZGV4KSB7CiAgcmV0dXJuIGdldChhcnJheSwgaW5kZXgsIG51bGwpOwp9CgovLyByZXR1cm5z
IHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3Vw
cG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxUPiBUIGdl
dChUW10gYXJyYXksIGludCBpbmRleCkgewogIFQgaXRlbSA9IG51bGw7CiAgCiAgaWYgKGFycmF5
ICE9IG51bGwpIHsKICAgIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5nCiAgICBpZiAo
aW5kZXggPCAwKSBpbmRleCArPSBhcnJheS5sZW5ndGg7CiAgICAKICAgIGl0ZW0gPSBhcnJheVtp
bmRleF07CiAgfQogIAogIHJldHVybiBpdGVtOwp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJh
eSAob3IgaW5zdGFudGlhdGVzIGEgbmV3IGFycmF5LCBpZiBudWxsKSB0byB0aGUgZGVzaXJlZCBs
ZW5ndGgsIAovLyBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBzdGF0aWMgPFQ+
IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0sIENsYXNzPFQ+IGts
YXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZhLmxhbmcucmVmbGVj
dC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CiAgcmV0dXJuIHJlc2l6ZShhcnJheSwgbmV3
TGVuZ3RoLCBpdGVtKTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIGRlc2ly
ZWQgbGVuZ3RoLCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBzdGF0aWMgPFQ+
IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0pIHsKICBpZiAobmV3
TGVuZ3RoIDwgMCkgdGhyb3cgbmV3IE5lZ2F0aXZlQXJyYXlTaXplRXhjZXB0aW9uKCk7CgogIGlu
dCBvcmlnaW5hbExlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICBpZiAobmV3TGVuZ3RoID09IG9yaWdp
bmFsTGVuZ3RoKSByZXR1cm4gYXJyYXk7CgogIGFycmF5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5
T2YoYXJyYXksIG5ld0xlbmd0aCk7CiAgaWYgKGl0ZW0gIT0gbnVsbCkgewogICAgZm9yIChpbnQg
aSA9IG9yaWdpbmFsTGVuZ3RoOyBpIDwgbmV3TGVuZ3RoOyBpKyspIGFycmF5W2ldID0gaXRlbTsK
ICB9CiAgcmV0dXJuIGFycmF5Owp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJheSB0byB0aGUg
ZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGggbnVsbHMKcHVibGljIHN0YXRpYyA8VD4gVFtd
IHJlc2l6ZShUW10gYXJyYXksIGludCBuZXdMZW5ndGgpIHsKICByZXR1cm4gcmVzaXplKGFycmF5
LCBuZXdMZW5ndGgsIG51bGwpOwp9CgovLyByZXNpemVzIHRoZSBnaXZlbiBhcnJheSB0byB0aGUg
ZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGggdGhlIGdpdmVuIGl0ZW0KcHVibGljIHN0YXRp
YyA8VD4gdm9pZCByZXNpemUoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB7CiAgSURh
dGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBUW10g
bGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAg
ICBpbnQgbGVuZ3RoID0gSW50ZWdlci5wYXJzZUludChJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1cnNv
ciwgIiRsZW5ndGgiKSk7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwgIiRp
dGVtIik7CgogICAgbGlzdCA9IHJlc2l6ZShsaXN0LCBsZW5ndGgsIGl0ZW0sIGtsYXNzKTsKCiAg
ICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgbGlzdCk7
CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyBncm93cyB0aGUg
c2l6ZSBvZiB0aGUgZ2l2ZW4gYXJyYXkgYnkgdGhlIGdpdmVuIGNvdW50LCBhbmQgcGFkcyB3aXRo
IHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBncm93KFRbXSBhcnJheSwgaW50
IGNvdW50LCBUIGl0ZW0sIENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIHJlc2l6ZShhcnJheSwg
YXJyYXkgPT0gbnVsbCA/IGNvdW50IDogYXJyYXkubGVuZ3RoICsgY291bnQsIGl0ZW0sIGtsYXNz
KTsKfQoKLy8gZ3Jvd3MgdGhlIGdpdmVuIGFycmF5IHRvIHRoZSBkZXNpcmVkIGxlbmd0aCwgYW5k
IHBhZHMgd2l0aCB0aGUgZ2l2ZW4gaXRlbQpwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGdyb3coSURh
dGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlw
ZWxpbmUuZ2V0Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGls
LmdldE9iamVjdEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBpbnQgY291bnQgPSBJbnRlZ2Vy
LnBhcnNlSW50KElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGNvdW50IikpOwogICAgVCBp
dGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBncm93
KGxpc3QsIGNvdW50LCBpdGVtLCBrbGFzcyk7CgogICAgaWYgKGxpc3QgIT0gbnVsbCkgSURhdGFV
dGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGxpc3QpOwogIH0gZmluYWxseSB7CiAgICBjdXJzb3Iu
ZGVzdHJveSgpOwogIH0KfQoKLy8gc2hyaW5rcyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXJyYXkg
YnkgdGhlIGdpdmVuIGNvdW50CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzaHJpbmsoVFtdIGFycmF5
LCBpbnQgY291bnQpIHsKICBpZiAoYXJyYXkgIT0gbnVsbCkgewogICAgaW50IGxlbmd0aCA9IGFy
cmF5Lmxlbmd0aCAtIGNvdW50OwogICAgYXJyYXkgPSByZXNpemUoYXJyYXksIGxlbmd0aCA8IDAg
PyAwIDogbGVuZ3RoKTsKICB9CiAgcmV0dXJuIGFycmF5Owp9CgovLyByZXR1cm5zIHRydWUgaWYg
dGhlIGdpdmVuIGl0ZW0gaXMgZm91bmQgaW4gdGhlIGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMg
PFQ+IGJvb2xlYW4gaW5jbHVkZShUW10gYXJyYXksIFQgaXRlbSkgewogIGJvb2xlYW4gZm91bmQg
PSBmYWxzZTsKCiAgaWYgKGFycmF5ICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwg
YXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgZm91bmQgPSB0dW5kcmEub2JqZWN0LmVxdWFsKGFy
cmF5W2ldLCBpdGVtKTsKICAgICAgaWYgKGZvdW5kKSBicmVhazsKICAgIH0KICB9CgogIHJldHVy
biBmb3VuZDsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZlbiBpdGVtIGlu
c2VydGVkIGF0IHRoZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiBUW10gaW5zZXJ0KFRb
XSBhcnJheSwgVCBpdGVtLCBTdHJpbmcgaW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGlu
ZGV4ID09IG51bGwpIGluZGV4ID0gIi0xIjsKICByZXR1cm4gaW5zZXJ0KGFycmF5LCBpdGVtLCBJ
bnRlZ2VyLnBhcnNlSW50KGluZGV4KSwga2xhc3MpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5
IHdpdGggdGhlIGdpdmVuIGl0ZW0gaW5zZXJ0ZWQgYXQgdGhlIGdpdmVuIGluZGV4CnB1YmxpYyBz
dGF0aWMgPFQ+IFRbXSBpbnNlcnQoVFtdIGFycmF5LCBUIGl0ZW0sIGludCBpbmRleCwgQ2xhc3M8
VD4ga2xhc3MpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCkgYXJyYXkgPSAoVFtdKWphdmEubGFuZy5y
ZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKTsKCiAgamF2YS51dGlsLkFycmF5TGlz
dDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oamF2YS51dGlsLkFycmF5cy5h
c0xpc3QoYXJyYXkpKTsKCiAgaW50IGNhcGFjaXR5ID0gMDsKICBpZiAoaW5kZXggPCAwKSBpbmRl
eCArPSBsaXN0LnNpemUoKSArIDE7CiAgaWYgKGluZGV4IDwgMCkgewogICAgY2FwYWNpdHkgPSAo
aW5kZXggKiAtMSkgKyBsaXN0LnNpemUoKTsKICAgIGluZGV4ID0gMDsKICB9IGVsc2UgewogICAg
Y2FwYWNpdHkgPSBpbmRleDsKICB9CgogIGxpc3QuZW5zdXJlQ2FwYWNpdHkoY2FwYWNpdHkpOwog
IGlmIChjYXBhY2l0eSA+PSBsaXN0LnNpemUoKSkgewogICAgLy8gZmlsbCB0aGUgbGlzdCB3aXRo
IG51bGxzIGlmIGl0IG5lZWRzIHRvIGJlIGV4dGVuZGVkCiAgICBmb3IgKGludCBpID0gbGlzdC5z
aXplKCk7IGkgPCBjYXBhY2l0eTsgaSsrKSB7CiAgICAgIGxpc3QuYWRkKGksIG51bGwpOwogICAg
fQogIH0KICBsaXN0LmFkZChpbmRleCwgaXRlbSk7CiAgCiAgcmV0dXJuIGxpc3QudG9BcnJheShh
cnJheSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXksIHdpdGggdGhlIGdpdmVuIGVsZW1lbnQg
aW5zZXJ0ZWQgYXQgdGhlIGdpdmVuIGluZGV4CnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgaW5zZXJ0
KElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9
IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRh
VXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURh
dGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwogICAgU3RyaW5nIGluZGV4ID0gSURhdGFVdGls
LmdldFN0cmluZyhjdXJzb3IsICIkaW5kZXgiKTsKCiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwg
IiRsaXN0IiwgaW5zZXJ0KGxpc3QgPT0gbnVsbCA/IG51bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNv
cHlPZihsaXN0LCBsaXN0Lmxlbmd0aCwgKENsYXNzPFRbXT4pamF2YS5sYW5nLnJlZmxlY3QuQXJy
YXkubmV3SW5zdGFuY2Uoa2xhc3MsIDApLmdldENsYXNzKCkpLCBpdGVtLCBpbmRleCwga2xhc3Mp
KTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ryb3koKTsKICB9Cn0KCi8vIHJldHVybnMg
b25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBhbHNvIGluIHkKcHVibGljIHN0YXRpYyA8VD4g
VFtdIGludGVyc2VjdGlvbihUW10geCwgVFtdIHkpIHsKICBpZiAoeCA9PSBudWxsIHx8IHkgPT0g
bnVsbCkgcmV0dXJuIG51bGw7CgogIGphdmEudXRpbC5MaXN0PFQ+IGQgPSBuZXcgamF2YS51dGls
LkFycmF5TGlzdDxUPih4Lmxlbmd0aCk7CiAgZC5hZGRBbGwoamF2YS51dGlsLkFycmF5cy5hc0xp
c3QoeCkpOwogIGQucmV0YWluQWxsKGphdmEudXRpbC5BcnJheXMuYXNMaXN0KHkpKTsKICAKICBy
ZXR1cm4gZC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKHgsIDApKTsKfQoKLy8gcmV0
dXJucyBhIHN0cmluZyBjcmVhdGVkIGJ5IGNvbmNhdGVuYXRpbmcgZWFjaCBlbGVtZW50IG9mIHRo
ZSBnaXZlbiBhcnJheSwgc2VwYXJhdGVkIGJ5IHRoZSBnaXZlbiBzZXBhcmF0b3Igc3RyaW5nCnB1
YmxpYyBzdGF0aWMgPFQ+IFN0cmluZyBqb2luKFRbXSBhcnJheSwgU3RyaW5nIHNlcGFyYXRvcikg
ewogIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7CiAgCiAgaWYg
KGFycmF5ICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBp
KyspIHsKICAgICAgVCB2YWx1ZSA9IGFycmF5W2ldOwogICAgICBpZiAodmFsdWUgIT0gbnVsbCkg
YnVpbGRlci5hcHBlbmQodmFsdWUudG9TdHJpbmcoKSk7CiAgICAgIGlmIChzZXBhcmF0b3IgIT0g
bnVsbCAmJiBpIDwgYXJyYXkubGVuZ3RoIC0gMSkgYnVpbGRlci5hcHBlbmQoc2VwYXJhdG9yKTsK
ICAgIH0KICB9CiAgCiAgcmV0dXJuIGJ1aWxkZXIudG9TdHJpbmcoKTsKfQoKLy8gcmV0dXJucyB0
aGUgbGVuZ3RoIG9mIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBpbnQgbGVuZ3Ro
KFRbXSBhcnJheSkgewogIHJldHVybiAoYXJyYXkgPT0gbnVsbD8gMCA6IGFycmF5Lmxlbmd0aCk7
Cn0KCi8vIG1hcHMgdGhlIGdpdmVuIGFycmF5IHRvIGEgbmV3IGFycmF5IGJ5IGludm9raW5nIGEg
c2VydmljZSBmb3IgZWFjaCBlbGVtZW50IGFuZCBjb2xsZWN0aW5nIHRoZSBvdXRwdXQKcHVibGlj
IHN0YXRpYyA8VD4gdm9pZCBtYXAoSURhdGEgcGlwZWxpbmUsIENsYXNzPFQ+IGtsYXNzKSB0aHJv
d3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0
Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBPYmplY3RbXSBsaXN0ID0gSURhdGFVdGlsLmdldE9iamVj
dEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBTdHJpbmcgc2VydmljZSA9IElEYXRhVXRpbC5n
ZXRTdHJpbmcoY3Vyc29yLCAiJHNlcnZpY2UiKTsKICAgIElEYXRhIHNjb3BlID0gSURhdGFVdGls
LmdldElEYXRhKGN1cnNvciwgIiRwaXBlbGluZSIpOwogICAgU3RyaW5nIGlucHV0ID0gSURhdGFV
dGlsLmdldFN0cmluZyhjdXJzb3IsICIkaXRlbS5pbnB1dCIpOwogICAgU3RyaW5nIG91dHB1dCA9
IElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vyc29yLCAiJGl0ZW0ub3V0cHV0Iik7CgogICAgYm9vbGVh
biBzY29wZWQgPSBzY29wZSAhPSBudWxsOwoKICAgIC8vIGludm9rZSB0aGUgc2VydmljZSBmb3Ig
ZWFjaCBpdGVtIGluIHRoZSBsaXN0LCBwYXNzaW5nICRpdGVtIGFuZCAkaW5kZXggdmFyaWFibGVz
IG9uIGVhY2ggaW52b2NhdGlvbgogICAgLy8gYW5kIGNvbGxlY3QgdGhlIHJldHVybmVkICRpdGVt
J3MgaW50byBhIG5ldyBsaXN0CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRsaXN0IiwgbWFw
KGxpc3QgPT0gbnVsbCA/IG51bGwgOiBqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihsaXN0LCBsaXN0
Lmxlbmd0aCwgKENsYXNzPFRbXT4pamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uo
a2xhc3MsIDApLmdldENsYXNzKCkpLCBzZXJ2aWNlLCBzY29wZWQgPyBzY29wZSA6IHBpcGVsaW5l
LCBpbnB1dCwgb3V0cHV0KSk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyBtYXBzIHRoZSBnaXZlbiBhcnJheSB0byBhIG5ldyBhcnJheSBieSBpbnZva2luZyBh
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBhbmQgY29sbGVjdGluZyB0aGUgb3V0cHV0CnB1Ymxp
YyBzdGF0aWMgPFQ+IFRbXSBtYXAoVFtdIGFycmF5LCBTdHJpbmcgc2VydmljZSwgSURhdGEgcGlw
ZWxpbmUsIFN0cmluZyBpbnB1dCwgU3RyaW5nIG91dHB1dCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRp
b24gewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwIHx8IHNlcnZpY2Ug
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9PSBudWxsKSBwaXBlbGluZSA9
IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKICBpZiAoaW5wdXQgPT0gbnVsbCkgaW5wdXQgPSAiJGl0
ZW0iOwogIGlmIChvdXRwdXQgPT0gbnVsbCkgb3V0cHV0ID0gaW5wdXQ7CiAgIAogIGphdmEudXRp
bC5MaXN0PFQ+IGxpc3QgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgp
OwogIElEYXRhQ3Vyc29yIGN1cnNvciA9IG51bGw7CiAgCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBh
cnJheS5sZW5ndGg7IGkrKykgewogICAgLy8gYWRkICRpdGVtLCAkaW5kZXgsICRpdGVyYXRpb24g
YW5kICRsZW5ndGggdmFyaWFibGVzIHRvIHRoZSBpbnB1dCBwaXBlbGluZQogICAgY3Vyc29yID0g
cGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1cnNvciwgaW5wdXQsIGFy
cmF5W2ldKTsKICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGluZGV4IiwgIiIgKyBpKTsKICAg
IElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGl0ZXJhdGlvbiIsICIiICsgKGkgKyAxKSk7CiAgICBJ
RGF0YVV0aWwucHV0KGN1cnNvciwgIiRsZW5ndGgiLCAiIiArIGFycmF5Lmxlbmd0aCk7CiAgICBj
dXJzb3IuZGVzdHJveSgpOwoKICAgIC8vIGludm9rZSB0aGUgaXRlcmF0b3Igc2VydmljZQogICAg
cGlwZWxpbmUgPSB0dW5kcmEuc2VydmljZS5pbnZva2Uoc2VydmljZSwgcGlwZWxpbmUpOwoKICAg
IC8vIGNsZWFuIHVwIHRoZSBpbnB1dCBwaXBlbGluZQogICAgY3Vyc29yID0gcGlwZWxpbmUuZ2V0
Q3Vyc29yKCk7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwgb3V0cHV0KTsK
ICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCBpbnB1dCk7CiAgICBJRGF0YVV0aWwucmVtb3Zl
KGN1cnNvciwgb3V0cHV0KTsKICAgIElEYXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGluZGV4Iik7
CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNvciwgIiRpdGVyYXRpb24iKTsKICAgIElEYXRhVXRp
bC5yZW1vdmUoY3Vyc29yLCAiJGxlbmd0aCIpOwogICAgY3Vyc29yLmRlc3Ryb3koKTsKICAgIAog
ICAgLy8gY29sbGVjdCB0aGUgbWFwcGVkIGl0ZW1zCiAgICBsaXN0LmFkZChpdGVtKTsKICB9CiAg
CiAgcmV0dXJuIGxpc3QudG9BcnJheShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihhcnJheSwgMCkp
Owp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYSBuZXcgZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgYmVnaW5uaW5nCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBwcmVwZW5kKFRbXSBhcnJheSwg
VCBpdGVtLCBDbGFzczxUPiBrbGFzcykgewogIHJldHVybiBpbnNlcnQoYXJyYXksIGl0ZW0sIDAs
IGtsYXNzKTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVu
dCBpbnNlcnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgcHJlcGVuZChJRGF0
YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJzb3IgPSBwaXBl
bGluZS5nZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJRGF0YVV0aWwu
Z2V0T2JqZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChUKUlEYXRhVXRp
bC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKCiAgICBsaXN0ID0gcHJlcGVuZChsaXN0ID09IG51bGwg
PyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5ndGgsIChDbGFz
czxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5nZXRD
bGFzcygpKSwgaXRlbSwga2xhc3MpOwoKICAgIGlmIChsaXN0ICE9IG51bGwpIElEYXRhVXRpbC5w
dXQoY3Vyc29yLCAiJGxpc3QiLCBsaXN0KTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ry
b3koKTsKICB9Cn0KCi8vIHNldHMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQg
dGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1
YmxpYyBzdGF0aWMgPFQ+IFRbXSBwdXQoVFtdIGFycmF5LCBUIGl0ZW0sIFN0cmluZyBpbmRleCwg
Q2xhc3M8VD4ga2xhc3MpIHsKICByZXR1cm4gcHV0KGFycmF5LCBpdGVtLCBJbnRlZ2VyLnBhcnNl
SW50KGluZGV4KSwga2xhc3MpOwp9CgovLyBzZXRzIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVu
IGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGlu
ZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxUPiBUW10gcHV0KFRbXSBhcnJheSwgVCBpdGVtLCBpbnQg
aW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRb
XSlqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CgogIC8vIHN1
cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5nCiAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJy
YXkubGVuZ3RoOwogIGludCBjYXBhY2l0eSA9IDA7CiAgaWYgKGluZGV4IDwgMCkgewogICAgY2Fw
YWNpdHkgPSAoaW5kZXggKiAtMSkgKyBhcnJheS5sZW5ndGg7CiAgICBpbmRleCA9IDA7CiAgfSBl
bHNlIHsKICAgIGNhcGFjaXR5ID0gaW5kZXggKyAxOwogIH0KICBpZiAoY2FwYWNpdHkgPiBhcnJh
eS5sZW5ndGgpIGFycmF5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIGNhcGFjaXR5
KTsKCiAgYXJyYXlbaW5kZXhdID0gaXRlbTsKCiAgcmV0dXJuIGFycmF5Owp9CgovLyBzZXRzIHRo
ZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRleCAoc3VwcG9y
dHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxUPiB2b2lkIHB1
dChJRGF0YSBwaXBlbGluZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJzb3Ig
PSBwaXBlbGluZS5nZXRDdXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJRGF0
YVV0aWwuZ2V0T2JqZWN0QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChUKUlE
YXRhVXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKICAgIFN0cmluZyBpbmRleCA9IElEYXRhVXRp
bC5nZXRTdHJpbmcoY3Vyc29yLCAiJGluZGV4Iik7CgogICAgSURhdGFVdGlsLnB1dChjdXJzb3Is
ICIkbGlzdCIsIHB1dChsaXN0ID09IG51bGwgPyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5
T2YobGlzdCwgbGlzdC5sZW5ndGgsIChDbGFzczxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5
Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgaXRlbSwgaW5kZXgsIGtsYXNzKSk7
CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyByZXR1cm5zIGEg
bmV3IGFycmF5IHdpdGggYWxsIGVsZW1lbnRzIGZyb20gdGhlIGdpdmVuIGFycmF5IGJ1dCBpbiBy
ZXZlcnNlIG9yZGVyCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSByZXZlcnNlKFRbXSBhcnJheSkgewog
IGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8PSAxKSByZXR1cm4gYXJyYXk7CiAg
CiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8
VD4oamF2YS51dGlsLkFycmF5cy5hc0xpc3QoYXJyYXkpKTsKICBqYXZhLnV0aWwuQ29sbGVjdGlv
bnMucmV2ZXJzZShsaXN0KTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBp
cyBhIHN1YnNldCBvZiBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGlj
IDxUPiBUW10gc2xpY2UoVFtdIGFycmF5LCBTdHJpbmcgaW5kZXgsIFN0cmluZyBsZW5ndGgpIHsK
ICByZXR1cm4gc2xpY2UoYXJyYXksIGluZGV4ID09IG51bGwgPyAwIDogSW50ZWdlci5wYXJzZUlu
dChpbmRleCksIGxlbmd0aCA9PSBudWxsID8gKGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVu
Z3RoKSA6IEludGVnZXIucGFyc2VJbnQobGVuZ3RoKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJy
YXkgd2hpY2ggaXMgYSBzdWJzZXQgb2YgZWxlbWVudHMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkKcHVi
bGljIHN0YXRpYyA8VD4gVFtdIHNsaWNlKFRbXSBhcnJheSwgaW50IGluZGV4LCBpbnQgbGVuZ3Ro
KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09IDApIHJldHVybiBhcnJh
eTsKICAvLyBzdXBwb3J0IHJldmVyc2UvdGFpbCBsZW5ndGgKICBpZiAobGVuZ3RoIDwgMCkgbGVu
Z3RoID0gYXJyYXkubGVuZ3RoICsgbGVuZ3RoOwogIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGlu
ZGV4aW5nCiAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3RoOwogIC8vIGRvbid0
IHNsaWNlIHBhc3QgdGhlIGVuZCBvZiB0aGUgYXJyYXkKICBpZiAoKGxlbmd0aCArPSBpbmRleCkg
PiBhcnJheS5sZW5ndGgpIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAKICByZXR1cm4gamF2YS51
dGlsLkFycmF5cy5jb3B5T2ZSYW5nZShhcnJheSwgaW5kZXgsIGxlbmd0aCk7Cn0KCi8vIHJldHVy
bnMgYSBuZXcgYXJyYXkgd2l0aCBhbGwgZWxlbWVudHMgc29ydGVkCnB1YmxpYyBzdGF0aWMgPFQ+
IFRbXSBzb3J0KFRbXSBhcnJheSkgewogIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0
aCA8PSAxKSByZXR1cm4gYXJyYXk7CiAgCiAgVFtdIGNvcHkgPSBqYXZhLnV0aWwuQXJyYXlzLmNv
cHlPZihhcnJheSwgYXJyYXkubGVuZ3RoKTsKICBqYXZhLnV0aWwuQXJyYXlzLnNvcnQoY29weSk7
CiAgcmV0dXJuIGNvcHk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCBhbGwgZHVwbGlj
YXRlIGVsZW1lbnRzIHJlbW92ZWQKcHVibGljIHN0YXRpYyA8VD4gVFtdIHVuaXF1ZShUW10gYXJy
YXkpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPD0gMSkgcmV0dXJuIGFy
cmF5OwogIAogIGphdmEudXRpbC5TZXQ8VD4gc2V0ID0gbmV3IGphdmEudXRpbC5UcmVlU2V0PFQ+
KGphdmEudXRpbC5BcnJheXMuYXNMaXN0KGFycmF5KSk7CiAgCiAgcmV0dXJuIHNldC50b0FycmF5
KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAwKSk7Cn0=</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
