<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.object</value>
  <value name="shared">Ly8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNlcnRlZCBh
dCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBhcHBlbmQoVFtdIGFycmF5LCBUIGl0ZW0s
IENsYXNzPFQ+IGtsYXNzKSB7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgLTEsIGtsYXNz
KTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSwgd2l0aCB0aGUgZ2l2ZW4gZWxlbWVudCBpbnNl
cnRlZCBhdCB0aGUgZW5kCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgYXBwZW5kKElEYXRhIHBpcGVs
aW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdl
dEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmpl
Y3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChj
dXJzb3IsICIkaXRlbSIpOwoKICAgIGxpc3QgPSBhcHBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6
IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilq
YXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSks
IGl0ZW0sIGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNv
ciwgIiRsaXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIG51bGwgZWxlbWVudHMgcmVtb3Zl
ZApwdWJsaWMgc3RhdGljIDxUPiBUW10gY29tcGFjdChUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkg
PT0gbnVsbCkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5MaXN0PFQ+IGxpc3QgPSBuZXcg
amF2YS51dGlsLkFycmF5TGlzdDxUPihhcnJheS5sZW5ndGgpOwoKICBmb3IgKGludCBpID0gMDsg
aSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkgbGlzdC5h
ZGQoYXJyYXlbaV0pOwogIH0KICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJh
eXMuY29weU9mKGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggY29u
dGFpbnMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheXMKcHVibGljIHN0YXRp
YyA8VD4gVFtdIGNvbmNhdGVuYXRlKFRbXSBhcnJheSwgVFtdIGl0ZW1zKSB7CiAgaWYgKGFycmF5
ID09IG51bGwpIHJldHVybiBpdGVtczsKICBpZiAoaXRlbXMgPT0gbnVsbCkgcmV0dXJuIGFycmF5
OwoKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
YXJyYXkubGVuZ3RoICsgaXRlbXMubGVuZ3RoKTsKICAKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMu
YWRkQWxsKGxpc3QsIGFycmF5KTsKICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMuYWRkQWxsKGxpc3Qs
IGl0ZW1zKTsKICAKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9m
KGFycmF5LCAwKSk7Cn0KCi8vIHJldHVybnMgb25seSB0aGUgaXRlbXMgaW4geCB0aGF0IGFyZSBu
b3QgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkaWZmZXJlbmNlKFRbXSB4LCBUW10g
eSkgewogIGlmICh4ID09IG51bGwgfHwgeSA9PSBudWxsKSByZXR1cm4geDsKCiAgamF2YS51dGls
Lkxpc3Q8VD4gZCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KHgubGVuZ3RoKTsKICBkLmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh4KSk7CiAgZC5yZW1vdmVBbGwoamF2YS51dGls
LkFycmF5cy5hc0xpc3QoeSkpOwogIAogIHJldHVybiBkLnRvQXJyYXkoamF2YS51dGlsLkFycmF5
cy5jb3B5T2YoeCwgMCkpOwp9CgovLyByZW1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBp
bmRleCBmcm9tIHRoZSBnaXZlbiBsaXN0CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBkcm9wKFRbXSBh
cnJheSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGRyb3AoYXJyYXksIEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpKTsKfQoKLy8gcmVtb3ZlcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXgg
ZnJvbSB0aGUgZ2l2ZW4gbGlzdApwdWJsaWMgc3RhdGljIDxUPiBUW10gZHJvcChUW10gYXJyYXks
IGludCBpbmRleCkgewogIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAvLyBzdXBwb3J0IHJldmVy
c2UvdGFpbCBpbmRleGluZwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gYXJyYXkubGVuZ3Ro
OwogICAgaWYgKGluZGV4IDwgMCB8fCBhcnJheS5sZW5ndGggPD0gaW5kZXgpIHRocm93IG5ldyBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24oaW5kZXgpOwoKICAgIFRbXSBoZWFkID0gc2xp
Y2UoYXJyYXksIDAsIGluZGV4KTsKICAgIFRbXSB0YWlsID0gc2xpY2UoYXJyYXksIGluZGV4ICsg
MSwgYXJyYXkubGVuZ3RoIC0gaW5kZXgpOwoKICAgIGFycmF5ID0gY29uY2F0ZW5hdGUoaGVhZCwg
dGFpbCk7ICAgICAgCiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KCi8vIGludm9rZXMgdGhlIGdpdmVu
IHNlcnZpY2UgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkKcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBlYWNoKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJp
bmcgaW5wdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBtYXAoYXJyYXksIHNlcnZpY2Us
IHBpcGVsaW5lLCBpbnB1dCwgbnVsbCk7Cn0KCi8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4g
YXJyYXlzIGFyZSBlcXVhbApwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGVxdWFsKFRbXSB4LCBU
W10geSkgewogIGJvb2xlYW4gcmVzdWx0ID0gdHJ1ZTsKCiAgaWYgKHggIT0gbnVsbCAmJiB5ICE9
IG51bGwpIHsKICAgIHJlc3VsdCA9ICh4Lmxlbmd0aCA9PSB5Lmxlbmd0aCk7CgogICAgaWYgKHJl
c3VsdCkgewogICAgICBmb3IgKGludCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHsKICAgICAg
ICByZXN1bHQgPSByZXN1bHQgJiYgdHVuZHJhLm9iamVjdC5lcXVhbCh4W2ldLCB5W2ldKTsKICAg
ICAgICBpZiAoIXJlc3VsdCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgcmVz
dWx0ID0gKHggPT0gbnVsbCAmJiB5ID09IG51bGwpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoK
Ly8gZmlsdGVycyB0aGUgZ2l2ZW4gYXJyYXkgYnkgZXZhbHVhdGluZyB0aGUgY29uZGl0aW9uYWwg
c3RhdGVtZW50IGFnYWluc3QgdGhlIAovLyBnaXZlbiBwaXBlbGluZSBhbmQgZWFjaCBpdGVtIGlu
IHRoZSBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBUW10gZmlsdGVyKFRbXSBhcnJheSwgU3RyaW5n
IGNvbmRpdGlvbiwgSURhdGEgcGlwZWxpbmUpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBp
ZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBjb25kaXRpb24gPT0gbnVs
bCB8fCBjb25kaXRpb24uZXF1YWxzKCIiKSkgcmV0dXJuIGFycmF5OwogIGlmIChwaXBlbGluZSA9
PSBudWxsKSBwaXBlbGluZSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCiAgamF2YS51dGlsLkFy
cmF5TGlzdDxUPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3Ro
KTsKCiAgZm9yIChpbnQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgSURhdGFD
dXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29yKCk7CiAgICBJRGF0YVV0aWwucHV0KGN1
cnNvciwgIiRpdGVtIiwgYXJyYXlbaV0pOwoKICAgIGlmICh0dW5kcmEuY29uZGl0aW9uLmV2YWx1
YXRlKGNvbmRpdGlvbiwgcGlwZWxpbmUpKSBsaXN0LmFkZChhcnJheVtpXSk7CiAgICAKICAgIElE
YXRhVXRpbC5yZW1vdmUoY3Vyc29yLCAiJGl0ZW0iKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAg
fQoKICByZXR1cm4gbGlzdC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAw
KSk7ICAKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBpcyBhIG9uZS1kaW1lbnNpb25h
bCByZWN1cnNpdmUgZmxhdHRlbmluZyBvZiB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8
VD4gVFtdIGZsYXR0ZW4oVFtdIGFycmF5KSB7CiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXku
bGVuZ3RoID09IDApIHJldHVybiBhcnJheTsKCiAgamF2YS51dGlsLkFycmF5TGlzdDxUPiBsaXN0
ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKCiAgZm9yIChpbnQg
aSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldICE9IG51bGwg
JiYgYXJyYXlbaV0uZ2V0Q2xhc3MoKS5pc0FycmF5KCkpIHsKICAgICAgbGlzdC5lbnN1cmVDYXBh
Y2l0eShsaXN0LnNpemUoKSArICgoVFtdKWFycmF5W2ldKS5sZW5ndGgpOwogICAgICBsaXN0LmFk
ZEFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdChmbGF0dGVuKChUW10pYXJyYXlbaV0pKSk7CiAg
ICB9IGVsc2UgewogICAgICBsaXN0LmFkZChhcnJheVtpXSk7CiAgICB9CiAgfQogIAogIHJldHVy
biBsaXN0LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsgIAp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIFN0cmluZyBpbmRleCwgU3RyaW5nIGl0ZXJhdGlvbikgewog
IGludCBpID0gMDsKICBpZiAoaW5kZXggIT0gbnVsbCkgewogICAgaSA9IEludGVnZXIucGFyc2VJ
bnQoaW5kZXgpOwogIH0gZWxzZSB7CiAgICBpID0gSW50ZWdlci5wYXJzZUludChpdGVyYXRpb24p
IC0gMTsKICB9CiAgcmV0dXJuIGdldChhcnJheSwgaSk7Cn0KCi8vIHJldHVybnMgdGhlIGVsZW1l
bnQgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYXQgdGhlIGdpdmVuIGluZGV4IChzdXBwb3J0cyBydWJ5
LXN0eWxlIHJldmVyc2UgaW5kZXhpbmcpCnB1YmxpYyBzdGF0aWMgPFQ+IFQgZ2V0KFRbXSBhcnJh
eSwgU3RyaW5nIGluZGV4KSB7CiAgcmV0dXJuIGdldChhcnJheSwgaW5kZXgsIG51bGwpOwp9Cgov
LyByZXR1cm5zIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBp
bmRleCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGlj
IDxUPiBUIGdldChUW10gYXJyYXksIGludCBpbmRleCkgewogIFQgaXRlbSA9IG51bGw7CiAgCiAg
aWYgKGFycmF5ICE9IG51bGwpIHsKICAgIC8vIHN1cHBvcnQgcmV2ZXJzZS90YWlsIGluZGV4aW5n
CiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCArPSBhcnJheS5sZW5ndGg7CiAgICAKICAgIGl0ZW0g
PSBhcnJheVtpbmRleF07CiAgfQogIAogIHJldHVybiBpdGVtOwp9CgovLyByZXNpemVzIHRoZSBn
aXZlbiBhcnJheSAob3IgaW5zdGFudGlhdGVzIGEgbmV3IGFycmF5LCBpZiBudWxsKSB0byB0aGUg
ZGVzaXJlZCBsZW5ndGgsIAovLyBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBz
dGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0sIENs
YXNzPFQ+IGtsYXNzKSB7CiAgaWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZhLmxh
bmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCk7CiAgcmV0dXJuIHJlc2l6ZShh
cnJheSwgbmV3TGVuZ3RoLCBpdGVtKTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8g
dGhlIGRlc2lyZWQgbGVuZ3RoLCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBz
dGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFycmF5LCBpbnQgbmV3TGVuZ3RoLCBUIGl0ZW0pIHsK
ICBpZiAobmV3TGVuZ3RoIDwgMCkgbmV3TGVuZ3RoID0gYXJyYXkubGVuZ3RoICsgbmV3TGVuZ3Ro
OwogIGlmIChuZXdMZW5ndGggPCAwKSBuZXdMZW5ndGggPSAwOwoKICBpbnQgb3JpZ2luYWxMZW5n
dGggPSBhcnJheS5sZW5ndGg7CiAgaWYgKG5ld0xlbmd0aCA9PSBvcmlnaW5hbExlbmd0aCkgcmV0
dXJuIGFycmF5OwoKICBhcnJheSA9IGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCBuZXdM
ZW5ndGgpOwogIGlmIChpdGVtICE9IG51bGwpIHsKICAgIGZvciAoaW50IGkgPSBvcmlnaW5hbExl
bmd0aDsgaSA8IG5ld0xlbmd0aDsgaSsrKSBhcnJheVtpXSA9IGl0ZW07CiAgfQogIHJldHVybiBh
cnJheTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIGRlc2lyZWQgbGVuZ3Ro
LCBhbmQgcGFkcyB3aXRoIG51bGxzCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSByZXNpemUoVFtdIGFy
cmF5LCBpbnQgbmV3TGVuZ3RoKSB7CiAgcmV0dXJuIHJlc2l6ZShhcnJheSwgbmV3TGVuZ3RoLCBu
dWxsKTsKfQoKLy8gcmVzaXplcyB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIGRlc2lyZWQgbGVuZ3Ro
LCBhbmQgcGFkcyB3aXRoIHRoZSBnaXZlbiBpdGVtCnB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgcmVz
aXplKElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNv
ciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlE
YXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3IsICIkbGlzdCIpOwogICAgaW50IGxlbmd0aCA9
IEludGVnZXIucGFyc2VJbnQoSURhdGFVdGlsLmdldFN0cmluZyhjdXJzb3IsICIkbGVuZ3RoIikp
OwogICAgVCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsICIkaXRlbSIpOwoKICAgIGxp
c3QgPSByZXNpemUobGlzdCwgbGVuZ3RoLCBpdGVtLCBrbGFzcyk7CgogICAgaWYgKGxpc3QgIT0g
bnVsbCkgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGxpc3QpOwogIH0gZmluYWxseSB7
CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gZ3Jvd3MgdGhlIHNpemUgb2YgdGhlIGdp
dmVuIGFycmF5IGJ5IHRoZSBnaXZlbiBjb3VudCwgYW5kIHBhZHMgd2l0aCB0aGUgZ2l2ZW4gaXRl
bQpwdWJsaWMgc3RhdGljIDxUPiBUW10gZ3JvdyhUW10gYXJyYXksIGludCBjb3VudCwgVCBpdGVt
LCBDbGFzczxUPiBrbGFzcykgewogIHJldHVybiByZXNpemUoYXJyYXksIGFycmF5ID09IG51bGwg
PyBjb3VudCA6IGFycmF5Lmxlbmd0aCArIGNvdW50LCBpdGVtLCBrbGFzcyk7Cn0KCi8vIGdyb3dz
IHRoZSBnaXZlbiBhcnJheSB0byB0aGUgZGVzaXJlZCBsZW5ndGgsIGFuZCBwYWRzIHdpdGggdGhl
IGdpdmVuIGl0ZW0KcHVibGljIHN0YXRpYyA8VD4gdm9pZCBncm93KElEYXRhIHBpcGVsaW5lLCBD
bGFzczxUPiBrbGFzcykgewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNv
cigpOwoKICB0cnkgewogICAgVFtdIGxpc3QgPSAoVFtdKUlEYXRhVXRpbC5nZXRPYmplY3RBcnJh
eShjdXJzb3IsICIkbGlzdCIpOwogICAgaW50IGNvdW50ID0gSW50ZWdlci5wYXJzZUludChJRGF0
YVV0aWwuZ2V0U3RyaW5nKGN1cnNvciwgIiRjb3VudCIpKTsKICAgIFQgaXRlbSA9IChUKUlEYXRh
VXRpbC5nZXQoY3Vyc29yLCAiJGl0ZW0iKTsKCiAgICBsaXN0ID0gZ3JvdyhsaXN0LCBjb3VudCwg
aXRlbSwga2xhc3MpOwoKICAgIGlmIChsaXN0ICE9IG51bGwpIElEYXRhVXRpbC5wdXQoY3Vyc29y
LCAiJGxpc3QiLCBsaXN0KTsKICB9IGZpbmFsbHkgewogICAgY3Vyc29yLmRlc3Ryb3koKTsKICB9
Cn0KCi8vIHNocmlua3MgdGhlIHNpemUgb2YgdGhlIGdpdmVuIGFycmF5IGJ5IHRoZSBnaXZlbiBj
b3VudApwdWJsaWMgc3RhdGljIDxUPiBUW10gc2hyaW5rKFRbXSBhcnJheSwgaW50IGNvdW50KSB7
CiAgaWYgKGFycmF5ICE9IG51bGwpIHsKICAgIGludCBsZW5ndGggPSBhcnJheS5sZW5ndGggLSBj
b3VudDsKICAgIGFycmF5ID0gcmVzaXplKGFycmF5LCBsZW5ndGggPCAwID8gMCA6IGxlbmd0aCk7
CiAgfQogIHJldHVybiBhcnJheTsKfQoKLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBpdGVt
IGlzIGZvdW5kIGluIHRoZSBnaXZlbiBhcnJheQpwdWJsaWMgc3RhdGljIDxUPiBib29sZWFuIGlu
Y2x1ZGUoVFtdIGFycmF5LCBUIGl0ZW0pIHsKICBib29sZWFuIGZvdW5kID0gZmFsc2U7CgogIGlm
IChhcnJheSAhPSBudWxsKSB7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsg
aSsrKSB7CiAgICAgIGZvdW5kID0gdHVuZHJhLm9iamVjdC5lcXVhbChhcnJheVtpXSwgaXRlbSk7
CiAgICAgIGlmIChmb3VuZCkgYnJlYWs7CiAgICB9CiAgfQoKICByZXR1cm4gZm91bmQ7Cn0KCi8v
IHJldHVybnMgYSBuZXcgYXJyYXkgd2l0aCB0aGUgZ2l2ZW4gaXRlbSBpbnNlcnRlZCBhdCB0aGUg
Z2l2ZW4gaW5kZXgKcHVibGljIHN0YXRpYyA8VD4gVFtdIGluc2VydChUW10gYXJyYXksIFQgaXRl
bSwgU3RyaW5nIGluZGV4LCBDbGFzczxUPiBrbGFzcykgewogIGlmIChpbmRleCA9PSBudWxsKSBp
bmRleCA9ICItMSI7CiAgcmV0dXJuIGluc2VydChhcnJheSwgaXRlbSwgSW50ZWdlci5wYXJzZUlu
dChpbmRleCksIGtsYXNzKTsKfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZl
biBpdGVtIGluc2VydGVkIGF0IHRoZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiBUW10g
aW5zZXJ0KFRbXSBhcnJheSwgVCBpdGVtLCBpbnQgaW5kZXgsIENsYXNzPFQ+IGtsYXNzKSB7CiAg
aWYgKGFycmF5ID09IG51bGwpIGFycmF5ID0gKFRbXSlqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5u
ZXdJbnN0YW5jZShrbGFzcywgMCk7CgogIGphdmEudXRpbC5BcnJheUxpc3Q8VD4gbGlzdCA9IG5l
dyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KGphdmEudXRpbC5BcnJheXMuYXNMaXN0KGFycmF5KSk7
CgogIGludCBjYXBhY2l0eSA9IDA7CiAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gbGlzdC5zaXpl
KCkgKyAxOwogIGlmIChpbmRleCA8IDApIHsKICAgIGNhcGFjaXR5ID0gKGluZGV4ICogLTEpICsg
bGlzdC5zaXplKCk7CiAgICBpbmRleCA9IDA7CiAgfSBlbHNlIHsKICAgIGNhcGFjaXR5ID0gaW5k
ZXg7CiAgfQoKICBsaXN0LmVuc3VyZUNhcGFjaXR5KGNhcGFjaXR5KTsKICBpZiAoY2FwYWNpdHkg
Pj0gbGlzdC5zaXplKCkpIHsKICAgIC8vIGZpbGwgdGhlIGxpc3Qgd2l0aCBudWxscyBpZiBpdCBu
ZWVkcyB0byBiZSBleHRlbmRlZAogICAgZm9yIChpbnQgaSA9IGxpc3Quc2l6ZSgpOyBpIDwgY2Fw
YWNpdHk7IGkrKykgewogICAgICBsaXN0LmFkZChpLCBudWxsKTsKICAgIH0KICB9CiAgbGlzdC5h
ZGQoaW5kZXgsIGl0ZW0pOwogIAogIHJldHVybiBsaXN0LnRvQXJyYXkoYXJyYXkpOwp9CgovLyBy
ZXR1cm5zIGEgbmV3IGFycmF5LCB3aXRoIHRoZSBnaXZlbiBlbGVtZW50IGluc2VydGVkIGF0IHRo
ZSBnaXZlbiBpbmRleApwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGluc2VydChJRGF0YSBwaXBlbGlu
ZSwgQ2xhc3M8VD4ga2xhc3MpIHsKICBJRGF0YUN1cnNvciBjdXJzb3IgPSBwaXBlbGluZS5nZXRD
dXJzb3IoKTsKCiAgdHJ5IHsKICAgIFRbXSBsaXN0ID0gKFRbXSlJRGF0YVV0aWwuZ2V0T2JqZWN0
QXJyYXkoY3Vyc29yLCAiJGxpc3QiKTsKICAgIFQgaXRlbSA9IChUKUlEYXRhVXRpbC5nZXQoY3Vy
c29yLCAiJGl0ZW0iKTsKICAgIFN0cmluZyBpbmRleCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoY3Vy
c29yLCAiJGluZGV4Iik7CgogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIGluc2Vy
dChsaXN0ID09IG51bGwgPyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlz
dC5sZW5ndGgsIChDbGFzczxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNl
KGtsYXNzLCAwKS5nZXRDbGFzcygpKSwgaXRlbSwgaW5kZXgsIGtsYXNzKSk7CiAgfSBmaW5hbGx5
IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9CgovLyByZXR1cm5zIG9ubHkgdGhlIGl0ZW1z
IGluIHggdGhhdCBhcmUgYWxzbyBpbiB5CnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBpbnRlcnNlY3Rp
b24oVFtdIHgsIFRbXSB5KSB7CiAgaWYgKHggPT0gbnVsbCB8fCB5ID09IG51bGwpIHJldHVybiBu
dWxsOwoKICBqYXZhLnV0aWwuTGlzdDxUPiBkID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4o
eC5sZW5ndGgpOwogIGQuYWRkQWxsKGphdmEudXRpbC5BcnJheXMuYXNMaXN0KHgpKTsKICBkLnJl
dGFpbkFsbChqYXZhLnV0aWwuQXJyYXlzLmFzTGlzdCh5KSk7CiAgCiAgcmV0dXJuIGQudG9BcnJh
eShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZih4LCAwKSk7Cn0KCi8vIHJldHVybnMgYSBzdHJpbmcg
Y3JlYXRlZCBieSBjb25jYXRlbmF0aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gYXJyYXks
IHNlcGFyYXRlZCBieSB0aGUgZ2l2ZW4gc2VwYXJhdG9yIHN0cmluZwpwdWJsaWMgc3RhdGljIDxU
PiBTdHJpbmcgam9pbihUW10gYXJyYXksIFN0cmluZyBzZXBhcmF0b3IpIHsKICBTdHJpbmdCdWls
ZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpOwogIAogIGlmIChhcnJheSAhPSBudWxs
KSB7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgIFQg
dmFsdWUgPSBhcnJheVtpXTsKICAgICAgaWYgKHZhbHVlICE9IG51bGwpIGJ1aWxkZXIuYXBwZW5k
KHZhbHVlLnRvU3RyaW5nKCkpOwogICAgICBpZiAoc2VwYXJhdG9yICE9IG51bGwgJiYgaSA8IGFy
cmF5Lmxlbmd0aCAtIDEpIGJ1aWxkZXIuYXBwZW5kKHNlcGFyYXRvcik7CiAgICB9CiAgfQogIAog
IHJldHVybiBidWlsZGVyLnRvU3RyaW5nKCk7Cn0KCi8vIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0
aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gaW50IGxlbmd0aChUW10gYXJyYXkpIHsK
ICByZXR1cm4gKGFycmF5ID09IG51bGw/IDAgOiBhcnJheS5sZW5ndGgpOwp9CgovLyBtYXBzIHRo
ZSBnaXZlbiBhcnJheSB0byBhIG5ldyBhcnJheSBieSBpbnZva2luZyBhIHNlcnZpY2UgZm9yIGVh
Y2ggZWxlbWVudCBhbmQgY29sbGVjdGluZyB0aGUgb3V0cHV0CnB1YmxpYyBzdGF0aWMgPFQ+IHZv
aWQgbWFwKElEYXRhIHBpcGVsaW5lLCBDbGFzczxUPiBrbGFzcykgdGhyb3dzIFNlcnZpY2VFeGNl
cHRpb24gewogIElEYXRhQ3Vyc29yIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwoKICB0
cnkgewogICAgT2JqZWN0W10gbGlzdCA9IElEYXRhVXRpbC5nZXRPYmplY3RBcnJheShjdXJzb3Is
ICIkbGlzdCIpOwogICAgU3RyaW5nIHNlcnZpY2UgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1cnNv
ciwgIiRzZXJ2aWNlIik7CiAgICBJRGF0YSBzY29wZSA9IElEYXRhVXRpbC5nZXRJRGF0YShjdXJz
b3IsICIkcGlwZWxpbmUiKTsKICAgIFN0cmluZyBpbnB1dCA9IElEYXRhVXRpbC5nZXRTdHJpbmco
Y3Vyc29yLCAiJGl0ZW0uaW5wdXQiKTsKICAgIFN0cmluZyBvdXRwdXQgPSBJRGF0YVV0aWwuZ2V0
U3RyaW5nKGN1cnNvciwgIiRpdGVtLm91dHB1dCIpOwoKICAgIGJvb2xlYW4gc2NvcGVkID0gc2Nv
cGUgIT0gbnVsbDsKCiAgICAvLyBpbnZva2UgdGhlIHNlcnZpY2UgZm9yIGVhY2ggaXRlbSBpbiB0
aGUgbGlzdCwgcGFzc2luZyAkaXRlbSBhbmQgJGluZGV4IHZhcmlhYmxlcyBvbiBlYWNoIGludm9j
YXRpb24KICAgIC8vIGFuZCBjb2xsZWN0IHRoZSByZXR1cm5lZCAkaXRlbSdzIGludG8gYSBuZXcg
bGlzdAogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkbGlzdCIsIG1hcChsaXN0ID09IG51bGwg
PyBudWxsIDogamF2YS51dGlsLkFycmF5cy5jb3B5T2YobGlzdCwgbGlzdC5sZW5ndGgsIChDbGFz
czxUW10+KWphdmEubGFuZy5yZWZsZWN0LkFycmF5Lm5ld0luc3RhbmNlKGtsYXNzLCAwKS5nZXRD
bGFzcygpKSwgc2VydmljZSwgc2NvcGVkID8gc2NvcGUgOiBwaXBlbGluZSwgaW5wdXQsIG91dHB1
dCkpOwogIH0gZmluYWxseSB7CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gbWFwcyB0
aGUgZ2l2ZW4gYXJyYXkgdG8gYSBuZXcgYXJyYXkgYnkgaW52b2tpbmcgYSBzZXJ2aWNlIGZvciBl
YWNoIGVsZW1lbnQgYW5kIGNvbGxlY3RpbmcgdGhlIG91dHB1dApwdWJsaWMgc3RhdGljIDxUPiBU
W10gbWFwKFRbXSBhcnJheSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJpbmcg
aW5wdXQsIFN0cmluZyBvdXRwdXQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBpZiAoYXJy
YXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPT0gMCB8fCBzZXJ2aWNlID09IG51bGwpIHJldHVy
biBhcnJheTsKICBpZiAocGlwZWxpbmUgPT0gbnVsbCkgcGlwZWxpbmUgPSBJRGF0YUZhY3Rvcnku
Y3JlYXRlKCk7CiAgaWYgKGlucHV0ID09IG51bGwpIGlucHV0ID0gIiRpdGVtIjsKICBpZiAob3V0
cHV0ID09IG51bGwpIG91dHB1dCA9IGlucHV0OwogICAKICBqYXZhLnV0aWwuTGlzdDxUPiBsaXN0
ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8VD4oYXJyYXkubGVuZ3RoKTsKICBJRGF0YUN1cnNv
ciBjdXJzb3IgPSBudWxsOwogIAogIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBp
KyspIHsKICAgIC8vIGFkZCAkaXRlbSwgJGluZGV4LCAkaXRlcmF0aW9uIGFuZCAkbGVuZ3RoIHZh
cmlhYmxlcyB0byB0aGUgaW5wdXQgcGlwZWxpbmUKICAgIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1
cnNvcigpOwogICAgSURhdGFVdGlsLnB1dChjdXJzb3IsIGlucHV0LCBhcnJheVtpXSk7CiAgICBJ
RGF0YVV0aWwucHV0KGN1cnNvciwgIiRpbmRleCIsICIiICsgaSk7CiAgICBJRGF0YVV0aWwucHV0
KGN1cnNvciwgIiRpdGVyYXRpb24iLCAiIiArIChpICsgMSkpOwogICAgSURhdGFVdGlsLnB1dChj
dXJzb3IsICIkbGVuZ3RoIiwgIiIgKyBhcnJheS5sZW5ndGgpOwogICAgY3Vyc29yLmRlc3Ryb3ko
KTsKCiAgICAvLyBpbnZva2UgdGhlIGl0ZXJhdG9yIHNlcnZpY2UKICAgIHBpcGVsaW5lID0gdHVu
ZHJhLnNlcnZpY2UuaW52b2tlKHNlcnZpY2UsIHBpcGVsaW5lKTsKCiAgICAvLyBjbGVhbiB1cCB0
aGUgaW5wdXQgcGlwZWxpbmUKICAgIGN1cnNvciA9IHBpcGVsaW5lLmdldEN1cnNvcigpOwogICAg
VCBpdGVtID0gKFQpSURhdGFVdGlsLmdldChjdXJzb3IsIG91dHB1dCk7CiAgICBJRGF0YVV0aWwu
cmVtb3ZlKGN1cnNvciwgaW5wdXQpOwogICAgSURhdGFVdGlsLnJlbW92ZShjdXJzb3IsIG91dHB1
dCk7CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNvciwgIiRpbmRleCIpOwogICAgSURhdGFVdGls
LnJlbW92ZShjdXJzb3IsICIkaXRlcmF0aW9uIik7CiAgICBJRGF0YVV0aWwucmVtb3ZlKGN1cnNv
ciwgIiRsZW5ndGgiKTsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgICAKICAgIC8vIGNvbGxlY3Qg
dGhlIG1hcHBlZCBpdGVtcwogICAgbGlzdC5hZGQoaXRlbSk7CiAgfQogIAogIHJldHVybiBsaXN0
LnRvQXJyYXkoamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsKfQoKLy8gcmV0dXJu
cyBhIG5ldyBhcnJheSB3aXRoIGEgbmV3IGVsZW1lbnQgaW5zZXJ0ZWQgYXQgdGhlIGJlZ2lubmlu
ZwpwdWJsaWMgc3RhdGljIDxUPiBUW10gcHJlcGVuZChUW10gYXJyYXksIFQgaXRlbSwgQ2xhc3M8
VD4ga2xhc3MpIHsKICByZXR1cm4gaW5zZXJ0KGFycmF5LCBpdGVtLCAwLCBrbGFzcyk7Cn0KCi8v
IHJldHVybnMgYSBuZXcgYXJyYXksIHdpdGggdGhlIGdpdmVuIGVsZW1lbnQgaW5zZXJ0ZWQgYXQg
dGhlIGVuZApwdWJsaWMgc3RhdGljIDxUPiB2b2lkIHByZXBlbmQoSURhdGEgcGlwZWxpbmUsIENs
YXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0Q3Vyc29y
KCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVjdEFycmF5
KGN1cnNvciwgIiRsaXN0Iik7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1cnNvciwg
IiRpdGVtIik7CgogICAgbGlzdCA9IHByZXBlbmQobGlzdCA9PSBudWxsID8gbnVsbCA6IGphdmEu
dXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3QubGVuZ3RoLCAoQ2xhc3M8VFtdPilqYXZhLmxh
bmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShrbGFzcywgMCkuZ2V0Q2xhc3MoKSksIGl0ZW0s
IGtsYXNzKTsKCiAgICBpZiAobGlzdCAhPSBudWxsKSBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRs
aXN0IiwgbGlzdCk7CiAgfSBmaW5hbGx5IHsKICAgIGN1cnNvci5kZXN0cm95KCk7CiAgfQp9Cgov
LyBzZXRzIHRoZSBlbGVtZW50IGZyb20gdGhlIGdpdmVuIGFycmF5IGF0IHRoZSBnaXZlbiBpbmRl
eCAoc3VwcG9ydHMgcnVieS1zdHlsZSByZXZlcnNlIGluZGV4aW5nKQpwdWJsaWMgc3RhdGljIDxU
PiBUW10gcHV0KFRbXSBhcnJheSwgVCBpdGVtLCBTdHJpbmcgaW5kZXgsIENsYXNzPFQ+IGtsYXNz
KSB7CiAgcmV0dXJuIHB1dChhcnJheSwgaXRlbSwgSW50ZWdlci5wYXJzZUludChpbmRleCksIGts
YXNzKTsKfQoKLy8gc2V0cyB0aGUgZWxlbWVudCBmcm9tIHRoZSBnaXZlbiBhcnJheSBhdCB0aGUg
Z2l2ZW4gaW5kZXggKHN1cHBvcnRzIHJ1Ynktc3R5bGUgcmV2ZXJzZSBpbmRleGluZykKcHVibGlj
IHN0YXRpYyA8VD4gVFtdIHB1dChUW10gYXJyYXksIFQgaXRlbSwgaW50IGluZGV4LCBDbGFzczxU
PiBrbGFzcykgewogIGlmIChhcnJheSA9PSBudWxsKSBhcnJheSA9IChUW10pamF2YS5sYW5nLnJl
ZmxlY3QuQXJyYXkubmV3SW5zdGFuY2Uoa2xhc3MsIDApOwoKICAvLyBzdXBwb3J0IHJldmVyc2Uv
dGFpbCBpbmRleGluZwogIGlmIChpbmRleCA8IDApIGluZGV4ICs9IGFycmF5Lmxlbmd0aDsKICBp
bnQgY2FwYWNpdHkgPSAwOwogIGlmIChpbmRleCA8IDApIHsKICAgIGNhcGFjaXR5ID0gKGluZGV4
ICogLTEpICsgYXJyYXkubGVuZ3RoOwogICAgaW5kZXggPSAwOwogIH0gZWxzZSB7CiAgICBjYXBh
Y2l0eSA9IGluZGV4ICsgMTsKICB9CiAgaWYgKGNhcGFjaXR5ID4gYXJyYXkubGVuZ3RoKSBhcnJh
eSA9IGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCBjYXBhY2l0eSk7CgogIGFycmF5W2lu
ZGV4XSA9IGl0ZW07CgogIHJldHVybiBhcnJheTsKfQoKLy8gc2V0cyB0aGUgZWxlbWVudCBmcm9t
IHRoZSBnaXZlbiBhcnJheSBhdCB0aGUgZ2l2ZW4gaW5kZXggKHN1cHBvcnRzIHJ1Ynktc3R5bGUg
cmV2ZXJzZSBpbmRleGluZykKcHVibGljIHN0YXRpYyA8VD4gdm9pZCBwdXQoSURhdGEgcGlwZWxp
bmUsIENsYXNzPFQ+IGtsYXNzKSB7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gcGlwZWxpbmUuZ2V0
Q3Vyc29yKCk7CgogIHRyeSB7CiAgICBUW10gbGlzdCA9IChUW10pSURhdGFVdGlsLmdldE9iamVj
dEFycmF5KGN1cnNvciwgIiRsaXN0Iik7CiAgICBUIGl0ZW0gPSAoVClJRGF0YVV0aWwuZ2V0KGN1
cnNvciwgIiRpdGVtIik7CiAgICBTdHJpbmcgaW5kZXggPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGN1
cnNvciwgIiRpbmRleCIpOwoKICAgIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJGxpc3QiLCBwdXQo
bGlzdCA9PSBudWxsID8gbnVsbCA6IGphdmEudXRpbC5BcnJheXMuY29weU9mKGxpc3QsIGxpc3Qu
bGVuZ3RoLCAoQ2xhc3M8VFtdPilqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShr
bGFzcywgMCkuZ2V0Q2xhc3MoKSksIGl0ZW0sIGluZGV4LCBrbGFzcykpOwogIH0gZmluYWxseSB7
CiAgICBjdXJzb3IuZGVzdHJveSgpOwogIH0KfQoKLy8gcmV0dXJucyBhIG5ldyBhcnJheSB3aXRo
IGFsbCBlbGVtZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheSBidXQgaW4gcmV2ZXJzZSBvcmRlcgpw
dWJsaWMgc3RhdGljIDxUPiBUW10gcmV2ZXJzZShUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkgPT0g
bnVsbCB8fCBhcnJheS5sZW5ndGggPD0gMSkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5B
cnJheUxpc3Q8VD4gbGlzdCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KGphdmEudXRpbC5B
cnJheXMuYXNMaXN0KGFycmF5KSk7CiAgamF2YS51dGlsLkNvbGxlY3Rpb25zLnJldmVyc2UobGlz
dCk7CiAgCiAgcmV0dXJuIGxpc3QudG9BcnJheShqYXZhLnV0aWwuQXJyYXlzLmNvcHlPZihhcnJh
eSwgMCkpOyAgCn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggaXMgYSBzdWJzZXQgb2Yg
ZWxlbWVudHMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkKcHVibGljIHN0YXRpYyA8VD4gVFtdIHNsaWNl
KFRbXSBhcnJheSwgU3RyaW5nIGluZGV4LCBTdHJpbmcgbGVuZ3RoKSB7CiAgcmV0dXJuIHNsaWNl
KGFycmF5LCBpbmRleCA9PSBudWxsID8gMCA6IEludGVnZXIucGFyc2VJbnQoaW5kZXgpLCBsZW5n
dGggPT0gbnVsbCA/IChhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCkgOiBJbnRlZ2Vy
LnBhcnNlSW50KGxlbmd0aCkpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdoaWNoIGlzIGEg
c3Vic2V0IG9mIGVsZW1lbnRzIGZyb20gdGhlIGdpdmVuIGFycmF5CnB1YmxpYyBzdGF0aWMgPFQ+
IFRbXSBzbGljZShUW10gYXJyYXksIGludCBpbmRleCwgaW50IGxlbmd0aCkgewogIGlmIChhcnJh
eSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm4gYXJyYXk7CiAgLy8gc3VwcG9y
dCByZXZlcnNlL3RhaWwgbGVuZ3RoCiAgaWYgKGxlbmd0aCA8IDApIGxlbmd0aCA9IGFycmF5Lmxl
bmd0aCArIGxlbmd0aDsKICAvLyBzdXBwb3J0IHJldmVyc2UvdGFpbCBpbmRleGluZwogIGlmIChp
bmRleCA8IDApIGluZGV4ICs9IGFycmF5Lmxlbmd0aDsKICAvLyBkb24ndCBzbGljZSBwYXN0IHRo
ZSBlbmQgb2YgdGhlIGFycmF5CiAgaWYgKChsZW5ndGggKz0gaW5kZXgpID4gYXJyYXkubGVuZ3Ro
KSBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgCiAgcmV0dXJuIGphdmEudXRpbC5BcnJheXMuY29w
eU9mUmFuZ2UoYXJyYXksIGluZGV4LCBsZW5ndGgpOwp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5
IHdpdGggYWxsIGVsZW1lbnRzIHNvcnRlZApwdWJsaWMgc3RhdGljIDxUPiBUW10gc29ydChUW10g
YXJyYXkpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPD0gMSkgcmV0dXJu
IGFycmF5OwogIAogIFRbXSBjb3B5ID0gamF2YS51dGlsLkFycmF5cy5jb3B5T2YoYXJyYXksIGFy
cmF5Lmxlbmd0aCk7CiAgamF2YS51dGlsLkFycmF5cy5zb3J0KGNvcHkpOwogIHJldHVybiBjb3B5
Owp9CgovLyByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIHN0cmluZyBpdGVtcyB0cmltbWVk
LCBhbGwKLy8gZW1wdHkgc3RyaW5nIGl0ZW1zIHJlbW92ZWQsIGFuZCBhbGwgbnVsbCBpdGVtcyBy
ZW1vdmVkCnB1YmxpYyBzdGF0aWMgPFQ+IFRbXSBzcXVlZXplKFRbXSBhcnJheSkgewogIGlmIChh
cnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm4gbnVsbDsKCiAgamF2YS51
dGlsLkxpc3Q8VD4gbGlzdCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PFQ+KGFycmF5Lmxlbmd0
aCk7CgogIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIGlmIChh
cnJheVtpXSAhPSBudWxsICYmIGFycmF5W2ldIGluc3RhbmNlb2YgU3RyaW5nKSB7CiAgICAgIFQg
aXRlbSA9IChUKSgoU3RyaW5nKWFycmF5W2ldKS50cmltKCk7CiAgICAgIGlmIChpdGVtLmVxdWFs
cygiIikpIHsKICAgICAgICBhcnJheVtpXSA9IG51bGw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAg
YXJyYXlbaV0gPSBpdGVtOwogICAgICB9CiAgICB9CiAgICBpZiAoYXJyYXlbaV0gIT0gbnVsbCkg
bGlzdC5hZGQoYXJyYXlbaV0pOwogIH0KCiAgYXJyYXkgPSBsaXN0LnRvQXJyYXkoamF2YS51dGls
LkFycmF5cy5jb3B5T2YoYXJyYXksIDApKTsKICBpZiAoYXJyYXkubGVuZ3RoID09IDApIGFycmF5
ID0gbnVsbDsKICAKICByZXR1cm4gYXJyYXk7Cn0KCi8vIHJldHVybnMgYSBuZXcgYXJyYXkgd2l0
aCBhbGwgZHVwbGljYXRlIGVsZW1lbnRzIHJlbW92ZWQKcHVibGljIHN0YXRpYyA8VD4gVFtdIHVu
aXF1ZShUW10gYXJyYXkpIHsKICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPD0g
MSkgcmV0dXJuIGFycmF5OwogIAogIGphdmEudXRpbC5TZXQ8VD4gc2V0ID0gbmV3IGphdmEudXRp
bC5UcmVlU2V0PFQ+KGphdmEudXRpbC5BcnJheXMuYXNMaXN0KGFycmF5KSk7CiAgCiAgcmV0dXJu
IHNldC50b0FycmF5KGphdmEudXRpbC5BcnJheXMuY29weU9mKGFycmF5LCAwKSk7Cn0=</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
